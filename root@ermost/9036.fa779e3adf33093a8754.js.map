{"version":3,"file":"9036.fa779e3adf33093a8754.js","mappings":"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","sources":["webpack://mattermost-webapp/./actions/views/mfa.js","webpack://mattermost-webapp/./components/color_input.tsx","webpack://mattermost-webapp/./components/setting_item.tsx","webpack://mattermost-webapp/./components/user_settings/advanced/join_leave_section/join_leave_section.tsx","webpack://mattermost-webapp/./components/user_settings/advanced/join_leave_section/index.ts","webpack://mattermost-webapp/./components/user_settings/advanced/performance_debugging_section/performance_debugging_section.tsx","webpack://mattermost-webapp/./components/user_settings/advanced/performance_debugging_section/index.ts","webpack://mattermost-webapp/./components/user_settings/advanced/user_settings_advanced.tsx","webpack://mattermost-webapp/./components/user_settings/advanced/index.ts","webpack://mattermost-webapp/./components/user_settings/import_theme_modal.tsx","webpack://mattermost-webapp/./components/user_settings/display/user_settings_theme/color_chooser/color_chooser.tsx","webpack://mattermost-webapp/./components/user_settings/display/user_settings_theme/custom_theme_chooser/custom_theme_chooser.tsx","webpack://mattermost-webapp/./components/user_settings/display/user_settings_theme/theme_thumbnail.tsx","webpack://mattermost-webapp/./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.tsx","webpack://mattermost-webapp/./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.ts","webpack://mattermost-webapp/./components/user_settings/display/user_settings_theme/user_settings_theme.tsx","webpack://mattermost-webapp/./components/user_settings/display/user_settings_theme/index.ts","webpack://mattermost-webapp/./components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack://mattermost-webapp/./components/user_settings/display/manage_timezones/index.ts","webpack://mattermost-webapp/./components/user_settings/display/manage_languages/manage_languages.tsx","webpack://mattermost-webapp/./components/user_settings/display/manage_languages/index.ts","webpack://mattermost-webapp/./components/user_settings/display/user_settings_display.tsx","webpack://mattermost-webapp/./components/user_settings/display/index.ts","webpack://mattermost-webapp/./components/user_settings/general/user_settings_general.tsx","webpack://mattermost-webapp/./components/user_settings/general/index.ts","webpack://mattermost-webapp/./components/user_settings/notifications/desktop_notification_setting/desktop_notification_settings.tsx","webpack://mattermost-webapp/./packages/mattermost-redux/src/utils/notify_props.ts","webpack://mattermost-webapp/./components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack://mattermost-webapp/./components/user_settings/notifications/email_notification_setting/index.ts","webpack://mattermost-webapp/./components/user_settings/notifications/manage_auto_responder/manage_auto_responder.tsx","webpack://mattermost-webapp/./components/user_settings/notifications/user_settings_notifications.tsx","webpack://mattermost-webapp/./components/user_settings/notifications/index.ts","webpack://mattermost-webapp/./components/audit_table/holders.ts","webpack://mattermost-webapp/./components/audit_table/audit_row/audit_row.tsx","webpack://mattermost-webapp/./components/audit_table/channel_row/channel_default_row.tsx","webpack://mattermost-webapp/./components/audit_table/channel_row/channel_create_direct_row.tsx","webpack://mattermost-webapp/./components/audit_table/channel_row/channel_row.tsx","webpack://mattermost-webapp/./components/audit_table/user_row/user_update_active_session_row.tsx","webpack://mattermost-webapp/./components/audit_table/user_row/user_row.tsx","webpack://mattermost-webapp/./components/audit_table/format_audit.tsx","webpack://mattermost-webapp/./components/audit_table/audit_table.tsx","webpack://mattermost-webapp/./components/audit_table/index.ts","webpack://mattermost-webapp/./components/access_history_modal/access_history_modal.tsx","webpack://mattermost-webapp/./components/access_history_modal/index.ts","webpack://mattermost-webapp/./components/activity_log_modal/components/more_info.tsx","webpack://mattermost-webapp/./components/activity_log_modal/components/activity_log.tsx","webpack://mattermost-webapp/./components/activity_log_modal/activity_log_modal.tsx","webpack://mattermost-webapp/./components/activity_log_modal/index.ts","webpack://mattermost-webapp/./components/user_settings/security/mfa_section/mfa_section.tsx","webpack://mattermost-webapp/./components/user_settings/security/mfa_section/index.ts","webpack://mattermost-webapp/./components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack://mattermost-webapp/./components/user_settings/security/user_access_token_section/index.ts","webpack://mattermost-webapp/./components/user_settings/security/user_settings_security.tsx","webpack://mattermost-webapp/./components/user_settings/security/index.ts","webpack://mattermost-webapp/./components/user_settings/sidebar/show_unreads_category/show_unreads_category.tsx","webpack://mattermost-webapp/./components/user_settings/sidebar/show_unreads_category/index.ts","webpack://mattermost-webapp/./components/user_settings/sidebar/limit_visible_gms_dms/limit_visible_gms_dms.tsx","webpack://mattermost-webapp/./components/user_settings/sidebar/limit_visible_gms_dms/index.ts","webpack://mattermost-webapp/./components/user_settings/sidebar/user_settings_sidebar.tsx","webpack://mattermost-webapp/./components/user_settings/sidebar/index.ts","webpack://mattermost-webapp/./components/user_settings/user_settings.tsx","webpack://mattermost-webapp/./components/user_settings/index.ts","webpack://mattermost-webapp/./components/widgets/icons/fa_warning_icon.tsx","webpack://mattermost-webapp/./packages/mattermost-redux/src/actions/timezone.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\nimport tinycolor from 'tinycolor2';\n\ntype Props = {\n    id: string;\n    onChange: (color: string) => void;\n    value: string;\n    isDisabled?: boolean;\n}\n\ntype State = {\n    focused: boolean;\n    isOpened: boolean;\n    value: string;\n}\n\nexport default class ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n\n        this.state = {\n            focused: false,\n            isOpened: false,\n            value: props.value,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (!state.focused && props.value !== state.value) {\n            return {\n                value: props.value,\n            };\n        }\n\n        return null;\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick, {capture: true});\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        this.setState({focused: false});\n        this.props.onChange(newColorData.hex);\n    };\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n        }\n\n        this.setState({value});\n    };\n\n    private onFocus = (event: React.FocusEvent<HTMLInputElement>): void => {\n        this.setState({\n            focused: true,\n        });\n\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    private onBlur = () => {\n        const value = this.state.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n\n            this.setState({\n                value: normalizedColor,\n            });\n        } else {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n\n        this.setState({\n            focused: false,\n        });\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    public render() {\n        const {id} = this.props;\n        const {isOpened, value} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={value}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onFocus={this.onFocus}\n                    onKeyDown={this.onKeyDown}\n                    maxLength={7}\n                    disabled={this.props.isDisabled}\n\n                />\n                {!this.props.isDisabled &&\n                    <span\n                        id={`${id}-squareColorIcon`}\n                        className='input-group-addon color-pad'\n                        onClick={this.togglePicker}\n                    >\n                        <i\n                            id={`${id}-squareColorIconValue`}\n                            className='color-icon'\n                            style={{\n                                backgroundColor: value,\n                            }}\n                        />\n                    </span>\n                }\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={value}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode, RefObject} from 'react';\n\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\ntype Props = {\n\n    /**\n     * Whether this setting item is currently open\n     */\n    active: boolean;\n\n    /**\n     * Whether all sections in the panel are currently closed\n     */\n    areAllSectionsInactive: boolean;\n\n    /**\n     * The identifier of this section\n     */\n    section: string;\n\n    /**\n     * The setting UI when it is maximized (open)\n     */\n    max: ReactNode | null;\n\n    // Props to pass through for SettingItemMin\n    updateSection: (section: string) => void;\n    title?: ReactNode;\n    disableOpen?: boolean;\n    describe?: ReactNode;\n}\nexport default class SettingItem extends React.PureComponent<Props> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    static defaultProps = {\n        infoPosition: 'bottom',\n        saving: false,\n        section: '',\n        containerStyle: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.props.max;\n        }\n\n        return (\n            <SettingItemMin\n                title={this.props.title}\n                updateSection={this.props.updateSection}\n                describe={this.props.describe}\n                section={this.props.section}\n                disableOpen={this.props.disableOpen}\n                ref={this.minRef}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode, RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nimport {PreferenceType} from '@mattermost/types/preferences';\nimport {a11yFocus} from 'utils/utils';\n\ntype Props = {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    currentUserId: string;\n    joinLeave?: string;\n    onUpdateSection: (section?: string) => void;\n    renderOnOffLabel: (label: string) => ReactNode;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    };\n}\n\ntype State = {\n    joinLeaveState?: string;\n    isSaving?: boolean;\n    serverError?: string;\n}\n\nexport default class JoinLeaveSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n        a11yFocus(e.currentTarget);\n    }\n\n    public handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    public handleSubmit = (): void => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    public render(): React.ReactNode {\n        const {joinLeaveState} = this.state;\n        if (this.props.active) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState!)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n                ref={this.minRef}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {GlobalState} from 'types/store/index.js';\n\nimport {GenericAction} from 'mattermost-redux/types/actions.js';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true',\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState, useRef, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\ntype Props = PropsFromRedux & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    onUpdateSection: (section?: string) => void;\n};\n\nexport default function PerformanceDebuggingSection(props: Props) {\n    const minRef = useRef<SettingItemMinComponent>(null);\n    const prevActiveRef = useRef(false);\n\n    useEffect(() => {\n        if (prevActiveRef.current && !props.active && props.areAllSectionsInactive) {\n            minRef.current?.focus();\n        }\n    });\n\n    useEffect(() => {\n        prevActiveRef.current = props.active;\n    }, [props.active]);\n\n    if (!props.performanceDebuggingEnabled) {\n        return null;\n    }\n\n    let settings;\n    if (props.active) {\n        settings = <PerformanceDebuggingSectionExpanded {...props}/>;\n    } else {\n        settings = (\n            <PerformanceDebuggingSectionCollapsed\n                {...props}\n                ref={minRef}\n            />\n        );\n    }\n\n    return (\n        <>\n            {settings}\n            <div className='divider-light'/>\n        </>\n    );\n}\n\nconst PerformanceDebuggingSectionCollapsed = React.forwardRef<SettingItemMinComponent, Props>((props, ref) => {\n    let settingsEnabled = 0;\n\n    if (props.disableClientPlugins) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTelemetry) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTypingMessages) {\n        settingsEnabled += 1;\n    }\n\n    let description;\n    if (settingsEnabled === 0) {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.noneEnabled'\n                defaultMessage='No settings enabled'\n            />\n        );\n    } else {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.settingsEnabled'\n                defaultMessage='{count, number} {count, plural, one {setting} other {settings}} enabled'\n                values={{count: settingsEnabled}}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            describe={description}\n            section={AdvancedSections.PERFORMANCE_DEBUGGING}\n            updateSection={props.onUpdateSection}\n            ref={ref}\n        />\n    );\n});\n\nfunction PerformanceDebuggingSectionExpanded(props: Props) {\n    const [disableClientPlugins, setDisableClientPlugins] = useState(props.disableClientPlugins);\n    const [disableTelemetry, setDisableTelemetry] = useState(props.disableTelemetry);\n    const [disableTypingMessages, setDisableTypingMessages] = useState(props.disableTypingMessages);\n\n    const handleSubmit = useCallback(() => {\n        const preferences = [];\n\n        if (disableClientPlugins !== props.disableClientPlugins) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_CLIENT_PLUGINS,\n                value: disableClientPlugins.toString(),\n            });\n        }\n        if (disableTelemetry !== props.disableTelemetry) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TELEMETRY,\n                value: disableTelemetry.toString(),\n            });\n        }\n        if (disableTypingMessages !== props.disableTypingMessages) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TYPING_MESSAGES,\n                value: disableTypingMessages.toString(),\n            });\n        }\n\n        if (preferences.length !== 0) {\n            props.savePreferences(props.currentUserId, preferences);\n        }\n\n        props.onUpdateSection('');\n    }, [\n        props.currentUserId,\n        props.onUpdateSection,\n        props.savePreferences,\n        disableClientPlugins,\n        disableTelemetry,\n        disableTypingMessages,\n    ]);\n\n    return (\n        <SettingItemMax\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            inputs={[\n                <fieldset key='settings'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableClientPlugins}\n                                onChange={(e) => {\n                                    setDisableClientPlugins(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableClientPlugins'\n                                defaultMessage='Disable Client-side Plugins'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTelemetry}\n                                onChange={(e) => {\n                                    setDisableTelemetry(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTelemetry'\n                                defaultMessage='Disable telemetry events sent from the client'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTypingMessages}\n                                onChange={(e) => {\n                                    setDisableTypingMessages(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTypingMessages'\n                                defaultMessage='Disable \"User is typing...\" messages'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info1'\n                            defaultMessage=\"You may enable these settings temporarily to help isolate performance issues while debugging. We don't recommend leaving these settings enabled for an extended period of time as they can negatively impact your user experience.\"\n                        />\n                        <br/>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info2'\n                            defaultMessage='You may need to refresh the page before these settings take effect.'\n                        />\n                    </div>\n                </fieldset>,\n            ]}\n            submit={handleSubmit}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect, ConnectedProps} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {isPerformanceDebuggingEnabled} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        disableClientPlugins: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_CLIENT_PLUGINS),\n        disableTelemetry: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TELEMETRY),\n        disableTypingMessages: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TYPING_MESSAGES),\n        performanceDebuggingEnabled: isPerformanceDebuggingEnabled(state),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PerformanceDebuggingSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React, {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\n\nimport Constants, {AdvancedSections, Preferences} from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport {a11yFocus, isMac, localizeMessage} from 'utils/utils';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport SettingItem from 'components/setting_item';\n\nimport JoinLeaveSection from './join_leave_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\ntype Settings = {\n    [key: string]: string | undefined;\n    send_on_ctrl_enter: Props['sendOnCtrlEnter'];\n    code_block_ctrl_enter: Props['codeBlockOnCtrlEnter'];\n    formatting: Props['formatting'];\n    join_leave: Props['joinLeave'];\n    sync_drafts: Props['syncDrafts'];\n};\n\nexport type Props = {\n    currentUser: UserProfile;\n    advancedSettingsCategory: PreferenceType[];\n    sendOnCtrlEnter: string;\n    codeBlockOnCtrlEnter: string;\n    formatting: string;\n    joinLeave: string;\n    unreadScrollPosition: string;\n    syncDrafts: string;\n    updateSection: (section?: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    enablePreviewFeatures: boolean;\n    enableUserDeactivation: boolean;\n    syncedDraftsAreAllowed: boolean;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n        updateUserActive: (userId: string, active: boolean) => Promise<ActionResult>;\n        revokeAllSessionsForUser: (userId: string) => Promise<ActionResult>;\n    };\n};\n\ntype State = {\n    preReleaseFeatures: typeof PreReleaseFeatures;\n    settings: Settings;\n    enabledFeatures: number;\n    isSaving: boolean;\n    previewFeaturesEnabled: boolean;\n    showDeactivateAccountModal: boolean;\n    serverError: string;\n    preReleaseFeaturesKeys: string[];\n}\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = (): State => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings: Settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n            sync_drafts: this.props.syncDrafts,\n            [Preferences.UNREAD_SCROLL_POSITION]: this.props.unreadScrollPosition,\n        };\n\n        const PreReleaseFeaturesLocal = JSON.parse(JSON.stringify(PreReleaseFeatures));\n        delete PreReleaseFeaturesLocal.MARKDOWN_PREVIEW;\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeaturesLocal);\n\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeaturesLocal[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeaturesLocal,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n            serverError: '',\n        };\n    }\n\n    updateSetting = (setting: string, value: string, e?: React.ChangeEvent): void => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState((prevState) => ({...prevState, ...settings}));\n        a11yFocus(e?.currentTarget as HTMLElement);\n    }\n\n    toggleFeature = (feature: string, checked: boolean): void => {\n        const {settings} = this.state;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = (): void => {\n        const features: string[] = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings: string[]): Promise<void> => {\n        const preferences: PreferenceType[] = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async (): Promise<void> => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled: string): JSX.Element {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderUnreadScrollPositionLabel(option?: string): JSX.Element {\n        if (option === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT) {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.startFromLeftOff'\n                    defaultMessage='Start me where I left off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.startFromNewest'\n                defaultMessage='Start me at the newest message'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel(): JSX.Element {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        const active = this.props.activeSection === 'formatting';\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, ['formatting'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    }\n\n    renderUnreadScrollPositionSection = () => {\n        const active = this.props.activeSection === Preferences.UNREAD_SCROLL_POSITION;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.unreadScrollPositionTitle'\n                            defaultMessage='Scroll position when viewing an unread channel'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='unreadScrollPositionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionTitle'\n                                    defaultMessage='Scroll position when viewing an unread channel'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromLeftOff'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromLeftOff'\n                                        defaultMessage='Start me where I left off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromNewest'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromNewest'\n                                        defaultMessage='Start me at the newest message'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionDesc'\n                                    defaultMessage='Choose your scroll position when you view an unread channel. Channels will always be marked as read when viewed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, [Preferences.UNREAD_SCROLL_POSITION])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.unreadScrollPositionTitle'\n                        defaultMessage='Scroll position when viewing an unread channel'\n                    />\n                }\n                describe={this.renderUnreadScrollPositionLabel(this.state.settings[Preferences.UNREAD_SCROLL_POSITION])}\n                section={Preferences.UNREAD_SCROLL_POSITION}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    }\n\n    renderSyncDraftsSection = () => {\n        const active = this.props.activeSection === AdvancedSections.SYNC_DRAFTS;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.syncDrafts.Title'\n                            defaultMessage='Allow message drafts to sync with the server'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='syncDraftsSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Title'\n                                    defaultMessage='Allow message drafts to sync with the server'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOn'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOff'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Desc'\n                                    defaultMessage='When enabled, message drafts are synced with the server so they can be accessed from any device. When disabled, message drafts are only saved locally on the device where they are composed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.SYNC_DRAFTS}\n                    submit={this.handleSubmit.bind(this, ['sync_drafts'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.syncDrafts.Title'\n                        defaultMessage='Allow message drafts to sync with the server'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.sync_drafts)}\n                section={AdvancedSections.SYNC_DRAFTS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature: string): ReactNode {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    renderCtrlSendSection = () => {\n        const active = this.props.activeSection === 'advancedCtrlSend';\n        const serverError = this.state.serverError || null;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n        let max = null;\n        if (active) {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage {...ctrlSendTitle}/>\n                }\n                describe={this.renderCtrlEnterLabel()}\n                section={'advancedCtrlSend'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    }\n\n    renderPreviewFeaturesSection = () => {\n        const serverError = this.state.serverError || null;\n        const active = this.props.activeSection === 'advancedPreviewFeatures';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            this.state.preReleaseFeaturesKeys.forEach((key) => {\n                const feature = this.state.preReleaseFeatures[key as keyof typeof PreReleaseFeatures];\n                inputs.push(\n                    <div key={'advancedPreviewFeatures_' + feature.label}>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id={'advancedPreviewFeatures' + feature.label}\n                                    type='checkbox'\n                                    checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                    onChange={(e) => {\n                                        this.toggleFeature(feature.label, e.target.checked);\n                                    }}\n                                />\n                                {this.renderFeatureLabel(key)}\n                            </label>\n                        </div>\n                    </div>,\n                );\n            });\n\n            inputs.push(\n                <div key='advancedPreviewFeatures_helptext'>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.advance.preReleaseDesc'\n                        defaultMessage=\"Check any pre-released features you'd like to preview. You may also need to refresh the page before the setting will take effect.\"\n                    />\n                </div>,\n            );\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseTitle'\n                            defaultMessage='Preview Pre-release Features'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={this.saveEnabledFeatures}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.advance.enabledFeatures'\n                        defaultMessage='{count, number} {count, plural, one {feature} other {features}} enabled'\n                        values={{count: this.state.enabledFeatures}}\n                    />\n                }\n                section={'advancedPreviewFeatures'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    }\n\n    render() {\n        const ctrlSendSection = this.renderCtrlSendSection();\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n            previewFeaturesSection = this.renderPreviewFeaturesSection();\n        }\n\n        let deactivateAccountSection: ReactNode = '';\n        let makeConfirmationModal: ReactNode = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            const active = this.props.activeSection === 'deactivateAccount';\n            let max = null;\n            if (active) {\n                max = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n            deactivateAccountSection = (\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateAccountTitle'\n                            defaultMessage='Deactivate Account'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateDescShort'\n                            defaultMessage=\"Click 'Edit' to deactivate your account\"\n                        />\n                    }\n                    section={'deactivateAccount'}\n                    updateSection={this.handleUpdateSection}\n                    max={max}\n                />\n            );\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        const unreadScrollPositionSection = this.renderUnreadScrollPositionSection();\n        let unreadScrollPositionSectionDivider = null;\n        if (unreadScrollPositionSection) {\n            unreadScrollPositionSectionDivider = <div className='divider-light'/>;\n        }\n\n        let syncDraftsSection = null;\n        let syncDraftsSectionDivider = null;\n        if (this.props.syncedDraftsAreAllowed) {\n            syncDraftsSection = this.renderSyncDraftsSection();\n            if (syncDraftsSection) {\n                syncDraftsSectionDivider = <div className='divider-light'/>;\n            }\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        active={this.props.activeSection === AdvancedSections.JOIN_LEAVE}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    <PerformanceDebuggingSection\n                        active={this.props.activeSection === AdvancedSections.PERFORMANCE_DEBUGGING}\n                        onUpdateSection={this.handleUpdateSection}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                    />\n                    {deactivateAccountSection}\n                    {unreadScrollPositionSectionDivider}\n                    {unreadScrollPositionSection}\n                    {syncDraftsSectionDivider}\n                    {syncDraftsSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, getUnreadScrollPositionPreference, makeGetCategory, syncedDraftsAreAllowed} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport {GlobalState} from 'types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport AdvancedSettingsDisplay, {Props} from './user_settings_advanced';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state: GlobalState) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            syncDrafts: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'sync_drafts', 'true'),\n            currentUser: getCurrentUser(state),\n            unreadScrollPosition: getUnreadScrollPositionPreference(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n            syncedDraftsAreAllowed: syncedDraftsAreAllowed(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, WrappedComponentProps, injectIntl} from 'react-intl';\n\nimport {Theme} from 'mattermost-redux/selectors/entities/preferences';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\ninterface Props extends WrappedComponentProps {\n    callback: ((args: Theme) => void) | null;\n    onExited: () => void;\n}\n\ntype State = {\n    value: string;\n    inputError: React.ReactNode | null;\n    show: boolean;\n}\n\nclass ImportThemeModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            inputError: null,\n            show: true,\n        };\n    }\n\n    private handleOnHide = () => {\n        this.setState({show: false});\n    }\n\n    private handleSubmit = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const text = this.state.value;\n\n        if (!ImportThemeModal.isInputValid(text)) {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        /*\n         * index mapping of slack theme format (index => slack-property name)\n         *\n         * |-------|-------------------------|-------------------------|\n         * | index | Slack theme-property    | MM theme-property       |\n         * |-------|-------------------------|-------------------------|\n         * |   0   | Column BG               | sidebarBg               |\n         * |   1   | ???                     | sidebarHeaderBg         |\n         * |   2   | Active Item BG          | sidebarTextActiveBorder |\n         * |   3   | Active Item Text        | sidebarTextActiveColor  |\n         * |   4   | Hover Item BG           | sidebarTextHoverBg      |\n         * |   5   | Text Color              | sidebarText             |\n         * |   6   | Active Presence         | onlineIndicator         |\n         * |   7   | Mention Badge           | mentionBg               |\n         * |   8   | TOP-NAV BG              | --- (desktop only)      |\n         * |   9   | TOP-NAV Text            | --- (desktop only)      |\n         * |-------|-------------------------|-------------------------|\n         *\n         * values at index 8 + 9 are only for the desktop app\n         */\n\n        const [\n            sidebarBg, // 0\n            sidebarHeaderBg, // 1\n            sidebarTextActiveBorder, // 2\n            sidebarTextActiveColor, // 3\n            sidebarTextHoverBg, // 4\n            sidebarText, // 5\n            onlineIndicator, // 6\n            mentionBg, // 7\n        ] = text.split(',');\n\n        const theme = setThemeDefaults({\n            type: 'custom',\n            sidebarBg,\n            sidebarText,\n            sidebarUnreadText: sidebarText,\n            sidebarTextHoverBg,\n            sidebarTextActiveBorder,\n            sidebarTextActiveColor,\n            sidebarHeaderBg,\n            sidebarHeaderTextColor: sidebarText,\n            onlineIndicator,\n            mentionBg,\n        });\n\n        this.props.callback?.(theme as Theme);\n\n        this.handleOnHide();\n    }\n\n    private static isInputValid(text: string) {\n        if (text.length === 0) {\n            return false;\n        }\n\n        if (text.indexOf(' ') !== -1) {\n            return false;\n        }\n\n        if (text.length > 0 && text.indexOf(',') === -1) {\n            return false;\n        }\n\n        if (text.length > 0) {\n            const colors = text.split(',');\n\n            if (colors.length !== 10) {\n                return false;\n            }\n\n            for (let i = 0; i < colors.length; i++) {\n                if (colors[i].length !== 7 && colors[i].length !== 4) {\n                    return false;\n                }\n\n                if (colors[i].charAt(0) !== '#') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n        this.setState({value});\n\n        if (ImportThemeModal.isInputValid(value)) {\n            this.setState({inputError: null});\n        } else {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n        }\n    }\n\n    render() {\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal'\n                    show={this.state.show}\n                    onHide={this.handleOnHide}\n                    onExited={this.props.onExited}\n                    role='dialog'\n                    aria-labelledby='importThemeModalLabel'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='importThemeModalLabel'\n                        >\n                            <FormattedMessage\n                                id='user.settings.import_theme.importHeader'\n                                defaultMessage='Import Slack Theme'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <p>\n                                <FormattedMessage\n                                    id='user.settings.import_theme.importBody'\n                                    defaultMessage='To import a theme, go to a Slack team and look for \"Preferences -> Themes\". Open the custom theme option, copy the theme color values and paste them here:'\n                                />\n                            </p>\n                            <div className='form-group less'>\n                                <div className='col-sm-12'>\n                                    <input\n                                        id='themeVector'\n                                        type='text'\n                                        className='form-control'\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                    />\n                                    <div className='input__help'>\n                                        {this.state.inputError}\n                                    </div>\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelButton'\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.handleOnHide}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitButton'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.submit'\n                                    defaultMessage='Submit'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n\nexport default injectIntl(ImportThemeModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <React.Fragment>\n            <label className='custom-label'>{props.label}</label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </React.Fragment>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, ClipboardEvent, createRef, MouseEvent, RefObject} from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\n\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\nimport {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {t} from 'utils/i18n';\nimport Constants from 'utils/constants';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger, {BaseOverlayTrigger} from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from '../color_chooser/color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\ntype Messages = {\n    [key: string]: {\n        id: string;\n        defaultMessage: string;\n    };\n}\n\nconst messages: Messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarTeamBarBg: {\n        id: t('user.settings.custom_theme.sidebarTeamBarBg'),\n        defaultMessage: 'Team Sidebar BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n};\n\ntype State = {\n    copyTheme: string;\n};\n\nexport default class CustomThemeChooser extends React.PureComponent<Props, State> {\n    textareaRef: RefObject<HTMLTextAreaElement>;\n    sidebarStylesHeaderRef: RefObject<HTMLDivElement>;\n    centerChannelStylesHeaderRef: RefObject<HTMLDivElement>;\n    linkAndButtonStylesHeaderRef: RefObject<HTMLDivElement>;\n    sidebarStylesRef: RefObject<HTMLDivElement>;\n    headerOverlayRef: RefObject<BaseOverlayTrigger>;\n    centerChannelStylesRef: RefObject<HTMLDivElement>;\n    linkAndButtonStylesRef: RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n        this.textareaRef = createRef();\n        this.sidebarStylesHeaderRef = createRef();\n        this.centerChannelStylesHeaderRef = createRef();\n        this.linkAndButtonStylesHeaderRef = createRef();\n        this.sidebarStylesRef = createRef();\n        this.headerOverlayRef = createRef();\n        this.centerChannelStylesRef = createRef();\n        this.linkAndButtonStylesRef = createRef();\n\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n    handleColorChange = (settingId: string, color: string) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme: Theme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme: Theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e: ClipboardEvent<HTMLTextAreaElement>) => {\n        let text = '';\n\n        if ((window as any).clipboardData && (window as any).clipboardData.getData) { // IE\n            text = (window as any).clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        theme = setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e: ChangeEvent<HTMLTextAreaElement>) => e.stopPropagation();\n\n    selectTheme = () => {\n        this.textareaRef.current?.focus();\n        this.textareaRef.current?.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n\n        this.sidebarStylesHeaderRef.current?.classList.toggle('open');\n        this.toggleSection(this.sidebarStylesRef.current);\n    }\n\n    toggleCenterChannelStyles = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n\n        this.centerChannelStylesHeaderRef.current?.classList.toggle('open');\n        this.toggleSection(this.centerChannelStylesRef.current);\n    }\n\n    toggleLinkAndButtonStyles = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n\n        this.linkAndButtonStylesHeaderRef.current?.classList.toggle('open');\n        this.toggleSection(this.linkAndButtonStylesRef.current);\n    }\n\n    toggleSection(node: HTMLElement | null) {\n        if (!node) {\n            return;\n        }\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const theme: Theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess: HTMLElement | null = document.querySelector('.copy-theme-success');\n        if (copySuccess) {\n            copySuccess.style.display = 'inline-block';\n            setTimeout(() => {\n                copySuccess.style.display = 'none';\n            }, COPY_SUCCESS_INTERVAL);\n        }\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements: JSX.Element[] = [];\n        const centerChannelElements: JSX.Element[] = [];\n        const linkAndButtonElements: JSX.Element[] = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions: JSX.Element[] = [];\n                let codeThemeURL = '';\n\n                element.themes?.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                const popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref={this.headerOverlayRef}\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref={this.textareaRef}\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref={this.sidebarStylesHeaderRef}\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref={this.sidebarStylesRef}\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref={this.centerChannelStylesHeaderRef}\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref={this.centerChannelStylesRef}\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref={this.linkAndButtonStylesHeaderRef}\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref={this.linkAndButtonStylesRef}\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/jsx-max-props-per-line */\n\nimport React from 'react';\n\ntype ThemeThumbnailProps = {\n    themeName?: string;\n    themeKey: string;\n    sidebarBg: string;\n    sidebarText: string;\n    sidebarUnreadText: string;\n    onlineIndicator: string;\n    awayIndicator: string;\n    dndIndicator: string;\n    centerChannelColor: string;\n    centerChannelBg: string;\n    newMessageSeparator: string;\n    buttonBg: string;\n}\n\nfunction ThemeThumbnail({\n    themeName,\n    themeKey,\n    sidebarBg = '#174AB5',\n    sidebarText = '#86A1D9',\n    sidebarUnreadText = 'white',\n    onlineIndicator = '#3DB887',\n    awayIndicator = '#FFBC1F',\n    dndIndicator = '#D24B4E',\n    centerChannelColor = '#E0E1E3',\n    centerChannelBg = 'white',\n    newMessageSeparator = '#1C58D9',\n    buttonBg = '#15B7B7',\n}: ThemeThumbnailProps): JSX.Element {\n    return (\n        <svg width='112' height='86' viewBox='0 0 112 86' fill='none' xmlns='http://www.w3.org/2000/svg' aria-labelledby={`${themeKey}-theme-icon`} role='img'>\n            <title id={`${themeKey}-theme-icon`}>{`${themeName} theme icon`}</title>\n            <rect style={{fill: centerChannelBg}} x='0' y='0' width='112' height='86'/>\n            <g>\n                <rect style={{fill: centerChannelBg}} x='50' y='-1' width='63' height='88'/>\n                <g>\n                    <rect style={{fill: centerChannelColor}} x='55' y='75' width='52' height='6' rx='3'/>\n                    <rect style={{fill: centerChannelBg}} x='56' y='76' width='50' height='4' rx='2'/>\n                </g>\n                <rect style={{fill: buttonBg}} x='71' y='65' width='22' height='5' rx='2.5'/>\n                <rect style={{fill: newMessageSeparator}} x='50' y='32' width='62' height='1'/>\n                <g style={{fill: centerChannelColor}}>\n                    <rect x='55' y='5' width='52' height='4' rx='2'/>\n                    <rect x='55' y='14' width='52' height='4' rx='2'/>\n                    <rect x='55' y='23' width='52' height='4' rx='2'/>\n                    <rect x='55' y='38' width='52' height='4' rx='2'/>\n                    <rect x='55' y='47' width='52' height='4' rx='2'/>\n                    <rect x='55' y='56' width='52' height='4' rx='2'/>\n                </g>\n            </g>\n            <g>\n                <rect style={{fill: sidebarBg}} x='-1' y='-1' width='51' height='88'/>\n                <g style={{fill: sidebarText}}>\n                    <circle cx='7' cy='61' r='2'/>\n                    <circle cx='7' cy='70' r='2'/>\n                    <circle cx='7' cy='43' r='2'/>\n                    <circle cx='7' cy='34' r='2'/>\n                    <circle cx='7' cy='16' r='2'/>\n                    <circle cx='7' cy='7' r='2'/>\n                    <rect x='11' y='5' width='28' height='4' rx='2'/>\n                    <rect x='11' y='14' width='28' height='4' rx='2'/>\n                    <rect x='11' y='32' width='28' height='4' rx='2'/>\n                    <rect x='11' y='41' width='28' height='4' rx='2'/>\n                    <rect x='11' y='50' width='28' height='4' rx='2'/>\n                    <rect x='11' y='59' width='28' height='4' rx='2'/>\n                    <rect x='11' y='68' width='28' height='4' rx='2'/>\n                    <rect x='11' y='77' width='28' height='4' rx='2'/>\n                </g>\n                <circle style={{fill: dndIndicator}} cx='7' cy='79' r='2'/>\n                <circle style={{fill: awayIndicator}} cx='7' cy='52' r='2'/>\n                <circle style={{fill: onlineIndicator}} cx='7' cy='25' r='2'/>\n                <g style={{fill: sidebarUnreadText}}>\n                    <circle cx='43' cy='25' r='2'/>\n                    <rect x='11' y='23' width='28' height='4' rx='2'/>\n                </g>\n            </g>\n        </svg>\n    );\n}\n\nexport default ThemeThumbnail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {changeOpacity} from 'mattermost-redux/utils/theme_utils';\nimport {Theme, ThemeKey} from 'mattermost-redux/selectors/entities/preferences';\n\nimport ThemeThumbnail from '../theme_thumbnail';\n\nimport {toTitleCase} from 'utils/utils';\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n    allowedThemes: string[];\n}\n\nconst PremadeThemeChooser = ({theme, updateTheme, allowedThemes = []}: Props) => {\n    const premadeThemes = [];\n    const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n    for (const k in Preferences.THEMES) {\n        if (Preferences.THEMES.hasOwnProperty(k)) {\n            if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                continue;\n            }\n\n            const premadeTheme: Theme = Object.assign({}, Preferences.THEMES[k as ThemeKey]);\n\n            let activeClass = '';\n            if (premadeTheme.type === theme.type) {\n                activeClass = 'active';\n            }\n\n            premadeThemes.push(\n                <div\n                    className='col-xs-6 col-sm-3 premade-themes'\n                    key={'premade-theme-key' + k}\n                >\n                    <div\n                        id={`premadeTheme${premadeTheme.type?.replace(' ', '')}`}\n                        className={activeClass}\n                        onClick={() => updateTheme(premadeTheme)}\n                    >\n                        <label>\n                            <ThemeThumbnail\n                                themeKey={k}\n                                themeName={premadeTheme.type}\n                                sidebarBg={premadeTheme.sidebarBg}\n                                sidebarText={changeOpacity(premadeTheme.sidebarText, 0.48)}\n                                sidebarUnreadText={premadeTheme.sidebarUnreadText}\n                                onlineIndicator={premadeTheme.onlineIndicator}\n                                awayIndicator={premadeTheme.awayIndicator}\n                                dndIndicator={premadeTheme.dndIndicator}\n                                centerChannelColor={changeOpacity(premadeTheme.centerChannelColor, 0.16)}\n                                centerChannelBg={premadeTheme.centerChannelBg}\n                                newMessageSeparator={premadeTheme.newMessageSeparator}\n                                buttonBg={premadeTheme.buttonBg}\n                            />\n                            <div className='theme-label'>{toTitleCase(premadeTheme.type || '')}</div>\n                        </label>\n                    </div>\n                </div>,\n            );\n        }\n    }\n\n    return (\n        <div className='row appearance-section'>\n            <div className='clearfix'>\n                {premadeThemes}\n            </div>\n        </div>\n    );\n};\n\nexport default PremadeThemeChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from 'types/store';\n\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {RefObject} from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\nimport {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport ImportThemeModal from 'components/user_settings/import_theme_modal';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {applyTheme} from 'utils/utils';\n\nimport {ModalData} from 'types/actions';\n\nimport CustomThemeChooser from './custom_theme_chooser/custom_theme_chooser';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\ntype Props = {\n    currentTeamId: string;\n    theme: Theme;\n    selected: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    setRequireConfirm?: (requireConfirm: boolean) => void;\n    setEnforceFocus?: (enforceFocus: boolean) => void;\n    allowCustomThemes: boolean;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    actions: {\n        saveTheme: (teamId: string, theme: Theme) => void;\n        deleteTeamSpecificThemes: () => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n    };\n};\n\ntype State = {\n    isSaving: boolean;\n    type: string;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    serverError: string;\n    theme: Theme;\n};\n\nexport default class ThemeSetting extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n    originalTheme: Theme;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n            serverError: '',\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n        if (prevProps.selected && !this.props.selected && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props): State {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n            serverError: '',\n            isSaving: false,\n        };\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    submitTheme = async (): Promise<void> => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm?.(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme: Theme): void => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm?.(themeChanged);\n\n        this.setState({theme});\n        applyTheme(theme);\n    };\n\n    updateType = (type: string): void => this.setState({type});\n\n    resetFields = (): void => {\n        const state = this.getStateFromProps();\n        state.serverError = '';\n        this.setState(state);\n\n        applyTheme(state.theme);\n\n        this.props.setRequireConfirm?.(false);\n    };\n\n    handleImportModal = (): void => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.IMPORT_THEME_MODAL,\n            dialogType: ImportThemeModal,\n            dialogProps: {\n                callback: this.updateTheme,\n            },\n        });\n\n        this.props.setEnforceFocus?.(false);\n    };\n\n    handleUpdateSection = (section: string): void => this.props.updateSection(section);\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>,\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>,\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\nimport {openModal} from 'actions/views/modals';\n\nimport {Preferences} from 'utils/constants';\n\nimport {GlobalState} from 'types/store';\n\nimport UserSettingsTheme from './user_settings_theme';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state: GlobalState) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {Timezone} from 'timezones.json';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getBrowserTimezone} from 'utils/timezone';\nimport {getTimezoneLabel} from 'mattermost-redux/utils/timezone_utils';\n\nimport {UserProfile} from '@mattermost/types/users';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: Timezone[];\n    timezoneLabel: string;\n    actions: Actions;\n}\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    isSaving: boolean;\n    serverError?: string;\n    openMenu: boolean;\n    selectedOption: SelectedOption;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            isSaving: false,\n            openMenu: false,\n            selectedOption: {label: props.timezoneLabel, value: props.useAutomaticTimezone ? props.automaticTimezone : props.manualTimezone},\n        };\n    }\n\n    onChange = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                manualTimezone: selectedOption.value,\n                selectedOption,\n            });\n        }\n    }\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {useAutomaticTimezone, automaticTimezone, manualTimezone} = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n        let timezoneLabel: string;\n        let selectedOptionValue: string;\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n            timezoneLabel = getTimezoneLabel(this.props.timezones, automaticTimezone);\n            selectedOptionValue = automaticTimezone;\n        } else {\n            timezoneLabel = getTimezoneLabel(this.props.timezones, getBrowserTimezone());\n            selectedOptionValue = getBrowserTimezone();\n            this.setState({\n                manualTimezone: getBrowserTimezone(),\n            });\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n            selectedOption: {label: timezoneLabel, value: selectedOptionValue},\n        });\n    };\n\n    handleManualTimezone = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n    render() {\n        const {timezones} = this.props;\n        const {useAutomaticTimezone} = this.state;\n\n        const timeOptions = this.props.timezones.map((timeObject) => {\n            return {\n                value: timeObject.utc[0],\n                label: timeObject.text,\n            };\n        });\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n        const reactStyles = {\n\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n\n        };\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Automatic'\n                    />\n\n                </label>\n            </div>\n        );\n\n        const manualTimezoneInput = (\n            <div\n                className='pt-2'\n            >\n                <ReactSelect\n                    className='react-select react-select-top'\n                    classNamePrefix='react-select'\n                    id='displayTimezone'\n                    menuPortalTarget={document.body}\n                    styles={reactStyles}\n                    options={timeOptions}\n                    clearable={false}\n                    onChange={this.onChange}\n                    value={this.state.selectedOption}\n                    aria-labelledby='changeInterfaceTimezoneLabel'\n                    isDisabled={useAutomaticTimezone}\n                />\n                {serverError}\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        inputs.push(manualTimezoneInput);\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport timezones from 'timezones.json';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from '@mattermost/types/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {getTimezoneLabel} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport ManageTimezones from './manage_timezones';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\nfunction mapStateToProps(state: GlobalState) {\n    const currentUserId = getCurrentUserId(state);\n    const timezoneLabel = getTimezoneLabel(state, currentUserId);\n    return {\n        timezones,\n        timezoneLabel,\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, IntlShape} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {isKeyPressed} from 'utils/utils';\nimport Constants from 'utils/constants';\n\nimport {UserProfile} from '@mattermost/types/users';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    locale: string;\n    updateSection: (section: string) => void;\n    actions: Actions;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const locales: any = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: locales[userLocale].value,\n            label: locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).then((res) => {\n            if ('data' in res) {\n                // Do nothing since changing the locale essentially refreshes the page\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        const {intl} = this.props;\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n        const locales: any = I18n.getLanguages();\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n        const interfaceLanguageLabelAria = intl.formatMessage({id: 'user.settings.languages.dropdown.arialabel', defaultMessage: 'Dropdown selector to change the interface language'});\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    aria-label={interfaceLanguageLabelAria}\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote1'\n                        defaultMessage='Select which language Mattermost displays in the user interface.'\n                    />\n                    <p/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote2'\n                        defaultMessage='Would you like to help with translations? Join the <link>Mattermost Translation Server</link> to contribute.'\n                        values={{\n                            link: (msg: React.ReactNode) => (\n                                <a\n                                    href='http://translate.mattermost.com'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                        }}\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\nexport default injectIntl(ManageLanguage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport ManageLanguages from './manage_languages';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\n\nimport deepEqual from 'fast-deep-equal';\n\nimport {FormattedMessage} from 'react-intl';\nimport {PrimitiveType, FormatXMLElementFn} from 'intl-messageformat';\n\nimport {Timezone} from 'timezones.json';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport Constants from 'utils/constants';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport {a11yFocus} from 'utils/utils';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport {UserProfile, UserTimezone} from '@mattermost/types/users';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        availabilityStatusOnPosts: props.availabilityStatusOnPosts,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        colorizeUsernames: props.colorizeUsernames,\n        collapseDisplay: props.collapseDisplay,\n        collapsedReplyThreads: props.collapsedReplyThreads,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n        lastActiveDisplay: props.lastActiveDisplay.toString(),\n        oneClickReactionsOnPosts: props.oneClickReactionsOnPosts,\n        clickToReply: props.clickToReply,\n    };\n}\n\ntype ChildOption = {\n    id: string;\n    message: string;\n    value: string;\n    display: string;\n    moreId: string;\n    moreMessage: string;\n};\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        id: string;\n        message: string;\n        moreId?: string;\n        moreMessage?: string;\n    };\n    childOption?: ChildOption;\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: {\n        id: string;\n        message: string;\n    };\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: {\n        id: string;\n        message: string;\n        values?: Record<string, React.ReactNode | PrimitiveType | FormatXMLElementFn<React.ReactNode, React.ReactNode>>;\n    };\n    disabled?: boolean;\n    onSubmit?: () => void;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal?: () => void;\n    collapseModal?: () => void;\n    setRequireConfirm?: () => void;\n    setEnforceFocus?: () => void;\n    timezones: Timezone[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    defaultClientLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    currentUserTimezone: string;\n    enableTimezone: boolean;\n    shouldAutoUpdateTimezone: boolean | string;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    collapsedReplyThreadsAllowUserPreference: boolean;\n    clickToReply: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    emojiPickerEnabled: boolean;\n    timezoneLabel: string;\n    lastActiveDisplay: boolean;\n    lastActiveTimeEnabled: boolean;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    linkPreviewDisplay: string;\n    lastActiveDisplay: string;\n    oneClickReactionsOnPosts: string;\n    clickToReply: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    trackChangeIfNecessary(preference: PreferenceType, oldValue: any): void {\n        const props = {\n            field: 'display.' + preference.name,\n            value: preference.value,\n        };\n\n        if (preference.value !== oldValue) {\n            trackEvent('settings', 'user_settings_update', props);\n        }\n    }\n\n    submitLastActive = () => {\n        const {user, actions} = this.props;\n        const {lastActiveDisplay} = this.state;\n\n        const updatedUser = {\n            ...user,\n            props: {\n                ...user.props,\n                show_last_active: lastActiveDisplay,\n            },\n        };\n\n        actions.updateMe(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const availabilityStatusOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.AVAILABILITY_STATUS_ON_POSTS,\n            value: this.state.availabilityStatusOnPosts,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const colorizeUsernamesPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLORIZE_USERNAMES,\n            value: this.state.colorizeUsernames,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const collapsedReplyThreadsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSED_REPLY_THREADS,\n            value: this.state.collapsedReplyThreads,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n        const oneClickReactionsOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n            value: this.state.oneClickReactionsOnPosts,\n        };\n        const clickToReplyPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CLICK_TO_REPLY,\n            value: this.state.clickToReply,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapsedReplyThreadsPreference,\n            clickToReplyPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n            availabilityStatusOnPostsPreference,\n            oneClickReactionsOnPostsPreference,\n            colorizeUsernamesPreference,\n        ];\n\n        this.trackChangeIfNecessary(collapsedReplyThreadsPreference, this.props.collapsedReplyThreads);\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleAvailabilityStatusRadio = (availabilityStatusOnPosts: string) => {\n        this.setState({availabilityStatusOnPosts});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleCollapseReplyThreadsRadio(collapsedReplyThreads: string) {\n        this.setState({collapsedReplyThreads});\n    }\n\n    handleLastActiveRadio(lastActiveDisplay: string) {\n        this.setState({lastActiveDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOneClickReactionsRadio = (oneClickReactionsOnPosts: string) => {\n        this.setState({oneClickReactionsOnPosts});\n    }\n\n    handleClickToReplyRadio = (clickToReply: string) => {\n        this.setState({clickToReply});\n    }\n\n    handleOnChange(e: React.ChangeEvent, display: {[key: string]: any}) {\n        this.setState({...display});\n        a11yFocus(e.currentTarget as HTMLElement);\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!deepEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n            onSubmit,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | (() => void) | null = onSubmit || this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n                values={description.values}\n            />\n        );\n\n        const active = this.props.activeSection === section;\n        let max = null;\n        if (active) {\n            const format = [false, false, false];\n            let childOptionToShow: ChildOption | undefined;\n            if (value === firstOption.value) {\n                format[0] = true;\n                childOptionToShow = firstOption.childOption;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n                childOptionToShow = secondOption.childOption;\n            } else {\n                format[2] = true;\n                if (thirdOption) {\n                    childOptionToShow = thirdOption.childOption;\n                }\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={(e) => this.handleOnChange(e, thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let childOptionSection;\n            if (childOptionToShow) {\n                const childDisplay = childOptionToShow.display;\n                childOptionSection = (\n                    <div className='checkbox'>\n                        <hr/>\n                        <label>\n                            <input\n                                id={name + 'childOption'}\n                                type='checkbox'\n                                name={childOptionToShow.id}\n                                checked={childOptionToShow.value === 'true'}\n                                onChange={(e) => {\n                                    this.handleOnChange(e, {[childDisplay]: e.target.checked ? 'true' : 'false'});\n                                }}\n                            />\n                            <FormattedMessage\n                                id={childOptionToShow.id}\n                                defaultMessage={childOptionToShow.message}\n                            />\n                            {moreColon}\n                            <span className='font-weight--normal'>\n                                <FormattedMessage\n                                    id={childOptionToShow.moreId}\n                                    defaultMessage={childOptionToShow.moreMessage}\n                                />\n                            </span>\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={(e) => this.handleOnChange(e, firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={(e) => this.handleOnChange(e, secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                    {childOptionSection}\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            max = (\n                <SettingItemMax\n                    title={messageTitle}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.updateSection}\n                />);\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                    max={max}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        let lastActiveSection = null;\n\n        if (this.props.lastActiveTimeEnabled) {\n            lastActiveSection = this.createSection({\n                section: 'lastactive',\n                display: 'lastActiveDisplay',\n                value: this.state.lastActiveDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.lastActiveDisplay'),\n                    message: 'Share last active time',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.lastActiveOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.lastActiveOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.lastActiveDesc'),\n                    message: 'When enabled, other users will see when you were last active.',\n                },\n                onSubmit: this.submitLastActive,\n            });\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        const availabilityStatusOnPostsSection = this.createSection({\n            section: 'availabilityStatus',\n            display: 'availabilityStatusOnPosts',\n            value: this.state.availabilityStatusOnPosts,\n            defaultDisplay: 'true',\n            title: {\n                id: t('user.settings.display.availabilityStatusOnPostsTitle'),\n                message: 'Show user availability on posts',\n            },\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.on'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.off'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.availabilityStatusOnPostsDescription'),\n                message: 'When enabled, online availability is displayed on profile images in the message list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            const active = this.props.activeSection === 'timezone';\n            let max = null;\n            if (active) {\n                max = (\n                    <ManageTimezones\n                        user={this.props.user}\n                        useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                        automaticTimezone={userTimezone.automaticTimezone}\n                        manualTimezone={userTimezone.manualTimezone}\n                        updateSection={this.updateSection}\n                    />\n                );\n            }\n            timezoneSelection = (\n                <div>\n                    <SettingItem\n                        active={active}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.timezone'\n                                defaultMessage='Timezone'\n                            />\n                        }\n                        describe={this.props.timezoneLabel}\n                        section={'timezone'}\n                        updateSection={this.updateSection}\n                        max={max}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n                childOption: {\n                    id: t('user.settings.display.colorize'),\n                    value: this.state.colorizeUsernames,\n                    display: 'colorizeUsernames',\n                    message: 'Colorize usernames',\n                    moreId: t('user.settings.display.colorizeDes'),\n                    moreMessage: 'Use colors to distinguish users in compact mode',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        let collapsedReplyThreads;\n\n        if (this.props.collapsedReplyThreadsAllowUserPreference) {\n            collapsedReplyThreads = this.createSection({\n                section: Preferences.COLLAPSED_REPLY_THREADS,\n                display: 'collapsedReplyThreads',\n                value: this.state.collapsedReplyThreads,\n                defaultDisplay: Preferences.COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT,\n                title: {\n                    id: t('user.settings.display.collapsedReplyThreadsTitle'),\n                    message: 'Collapsed Reply Threads',\n                },\n                firstOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_ON,\n                    radionButtonText: {\n                        id: t('user.settings.display.collapsedReplyThreadsOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_OFF,\n                    radionButtonText: {\n                        id: t('user.settings.display.collapsedReplyThreadsOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.collapsedReplyThreadsDescription'),\n                    message: 'When enabled, reply messages are not shown in the channel and you\\'ll be notified about threads you\\'re following in the \"Threads\" view.',\n                },\n            });\n        }\n\n        const clickToReply = this.createSection({\n            section: Preferences.CLICK_TO_REPLY,\n            display: 'clickToReply',\n            value: this.state.clickToReply,\n            defaultDisplay: 'true',\n            title: {\n                id: t('user.settings.display.clickToReply'),\n                message: 'Click to open threads',\n            },\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.on'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.off'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.clickToReplyDescription'),\n                message: 'When enabled, click anywhere on a message to open the reply thread.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (!I18n.isLanguageAvailable(userLocale)) {\n            userLocale = this.props.defaultClientLocale;\n        }\n        const localeName = I18n.getLanguageInfo(userLocale).name;\n\n        languagesSection = (\n            <div>\n                <SettingItem\n                    active={this.props.activeSection === 'languages'}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.language'\n                            defaultMessage='Language'\n                        />\n                    }\n                    describe={localeName}\n                    section={'languages'}\n                    updateSection={this.updateSection}\n                    max={(\n                        <ManageLanguages\n                            user={this.props.user}\n                            locale={userLocale}\n                            updateSection={this.updateSection}\n                        />\n                    )}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let oneClickReactionsOnPostsSection;\n        if (this.props.emojiPickerEnabled) {\n            oneClickReactionsOnPostsSection = this.createSection({\n                section: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n                display: 'oneClickReactionsOnPosts',\n                value: this.state.oneClickReactionsOnPosts,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.oneClickReactionsOnPostsTitle'),\n                    message: 'Quick reactions on messages',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.sidebar.on'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.sidebar.off'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.oneClickReactionsOnPostsDescription'),\n                    message: 'When enabled, you can react in one-click with recently used reactions when hovering over a message.',\n                },\n            });\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4 className='modal-title'>\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {collapsedReplyThreads}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {availabilityStatusOnPostsSection}\n                    {lastActiveSection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {clickToReply}\n                    {channelDisplayModeSection}\n                    {oneClickReactionsOnPostsSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport timezones from 'timezones.json';\n\nimport {GenericAction, ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, isCollapsedThreadsAllowed, getCollapsedThreadsPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getTimezoneLabel, makeGetUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {CollapsedThreads} from '@mattermost/types/config';\nimport {PreferenceType} from '@mattermost/types/preferences';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport {GlobalState} from 'types/store';\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsDisplay from './user_settings_display';\n\ntype Actions = {\n    autoUpdateTimezone: (deviceTimezone: string) => void;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nexport function makeMapStateToProps() {\n    const getUserTimezone = makeGetUserTimezone();\n\n    return (state: GlobalState) => {\n        const config = getConfig(state);\n        const currentUserId = getCurrentUserId(state);\n        const userTimezone = getUserTimezone(state, currentUserId);\n        const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n        const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n        const timezoneLabel = getTimezoneLabel(state, currentUserId);\n        const allowCustomThemes = config.AllowCustomThemes === 'true';\n        const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n        const defaultClientLocale = config.DefaultClientLocale as string;\n        const enableThemeSelection = config.EnableThemeSelection === 'true';\n        const enableTimezone = config.ExperimentalTimezone === 'true';\n        const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n        const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n        const emojiPickerEnabled = config.EnableEmojiPicker === 'true';\n        const lastActiveTimeEnabled = config.EnableLastActiveTime === 'true';\n\n        let lastActiveDisplay = true;\n        if (getUser(state, currentUserId).props?.show_last_active === 'false') {\n            lastActiveDisplay = false;\n        }\n\n        return {\n            lockTeammateNameDisplay,\n            allowCustomThemes,\n            configTeammateNameDisplay,\n            enableLinkPreviews,\n            defaultClientLocale,\n            enableThemeSelection,\n            enableTimezone,\n            timezones,\n            timezoneLabel,\n            userTimezone,\n            shouldAutoUpdateTimezone,\n            currentUserTimezone: getUserCurrentTimezone(userTimezone) as string,\n            availabilityStatusOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.AVAILABILITY_STATUS_ON_POSTS, Preferences.AVAILABILITY_STATUS_ON_POSTS_DEFAULT),\n            militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n            teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n            channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n            messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n            colorizeUsernames: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLORIZE_USERNAMES, Preferences.COLORIZE_USERNAMES_DEFAULT),\n            collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n            collapsedReplyThreadsAllowUserPreference: isCollapsedThreadsAllowed(state) && getConfig(state).CollapsedThreads !== CollapsedThreads.ALWAYS_ON,\n            collapsedReplyThreads: getCollapsedThreadsPreference(state),\n            clickToReply: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CLICK_TO_REPLY, Preferences.CLICK_TO_REPLY_DEFAULT),\n            linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n            oneClickReactionsOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.ONE_CLICK_REACTIONS_ENABLED, Preferences.ONE_CLICK_REACTIONS_ENABLED_DEFAULT),\n            emojiPickerEnabled,\n            lastActiveDisplay,\n            lastActiveTimeEnabled,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            autoUpdateTimezone,\n            savePreferences,\n            updateMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, IntlShape} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport SettingPicture from 'components/setting_picture';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport SettingItem from 'components/setting_item';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameGroupNameUniqueness: {\n        id: t('user.settings.general.usernameGroupNameUniqueness'),\n        defaultMessage: 'This username conflicts with an existing group name.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG, JPEG, or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    maxFileSize: number;\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, status: boolean) => void;\n        clearErrors: () => void;\n        updateMe: (user: UserProfile) => Promise<{\n            data: boolean;\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        sendVerificationEmail: (email: string) => Promise<{\n            data: boolean;\n            error?: {\n                err: string;\n            };\n        }>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<{\n            data: boolean;\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    clientError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n}\n\nexport class UserSettingsGeneralTab extends React.Component<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {clientError: formatMessage(holders.usernameReserved), serverError: ''};\n            } else {\n                errObj = {clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''};\n            }\n            this.setState(errObj);\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.server_error_id === 'app.user.group_name_conflict') {\n                        serverError = formatMessage(holders.usernameGroupNameUniqueness);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'email';\n        let max = null;\n        if (active) {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (this.props.user.auth_service === '') {\n            describe = this.props.user.email;\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGitlab'\n                    defaultMessage='Login done through GitLab ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGoogle'\n                    defaultMessage='Login done through Google Apps ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginOffice365'\n                    defaultMessage='Login done through Office 365 ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginLdap'\n                    defaultMessage='Login done through AD/LDAP ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginSaml'\n                    defaultMessage='Login done through SAML ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.general.email'\n                        defaultMessage='Email'\n                    />\n                }\n                describe={describe}\n                section={'email'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createNameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'name';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n\n        if (user.first_name && user.last_name) {\n            describe = user.first_name + ' ' + user.last_name;\n        } else if (user.first_name) {\n            describe = user.first_name;\n        } else if (user.last_name) {\n            describe = user.last_name;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyName'\n                    defaultMessage=\"Click 'Edit' to add your full name\"\n                />\n            );\n            if (Utils.isMobile()) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyName'\n                        defaultMessage='Click to add your full name'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.fullName)}\n                describe={describe}\n                section={'name'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createNicknameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'nickname';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.nickname) {\n            describe = user.nickname;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyNickname'\n                    defaultMessage=\"Click 'Edit' to add a nickname\"\n                />\n            );\n            if (Utils.isMobile()) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyNickname'\n                        defaultMessage='Click to add a nickname'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.nickname)}\n                describe={describe}\n                section={'nickname'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createUsernameSection = () => {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'username';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.username)}\n                describe={this.props.user.username}\n                section={'username'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createPositionSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'position';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.position) {\n            describe = user.position;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyPosition'\n                    defaultMessage=\"Click 'Edit' to add your job title / position\"\n                />\n            );\n            if (Utils.isMobile()) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyPosition'\n                        defaultMessage='Click to add your job title / position'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.position)}\n                describe={describe}\n                section={'position'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createPictureSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'picture';\n        let max = null;\n\n        if (active) {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id={'setting_picture.help.profile'}\n                        defaultMessage='Upload a picture in BMP, JPG, JPEG, or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            max = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={(e: React.MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        }\n\n        let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n        if (Utils.isMobile()) {\n            minMessage = formatMessage(holders.uploadImageMobile);\n        }\n        if (user.last_picture_update) {\n            minMessage = (\n                <FormattedMessage\n                    id='user.settings.general.imageUpdated'\n                    defaultMessage='Image last updated {date}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={new Date(user.last_picture_update)}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                    }}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.profilePicture)}\n                describe={minMessage}\n                section={'picture'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        const nameSection = this.createNameSection();\n        const nicknameSection = this.createNicknameSection();\n        const usernameSection = this.createUsernameSection();\n        const positionSection = this.createPositionSection();\n        const emailSection = this.createEmailSection();\n        const pictureSection = this.createPictureSection();\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4 className='modal-title'>\n                        <div className='modal-back'>\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserSettingsGeneralTab, {Props} from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            logError,\n            clearErrors,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, RefObject} from 'react';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport {isDesktopApp} from 'utils/user_agent';\n\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\ntype SelectedOption = {\n    label: string;\n    value: string;\n};\n\ntype Props = {\n    activity: string;\n    threads?: string;\n    sound: string;\n    updateSection: (section: string) => void;\n    setParentState: (key: string, value: string | boolean) => void;\n    submit: () => void;\n    cancel: () => void;\n    error: string;\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    saving: boolean;\n    selectedSound: string;\n    isCollapsedThreadsEnabled: boolean;\n};\n\ntype State = {\n    selectedOption: SelectedOption;\n    blurDropdown: boolean;\n};\n\nexport default class DesktopNotificationSettings extends React.PureComponent<Props, State> {\n    dropdownSoundRef: RefObject<ReactSelect>;\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n        const selectedOption = {value: props.selectedSound, label: props.selectedSound};\n        this.state = {\n            selectedOption,\n            blurDropdown: false,\n        };\n        this.dropdownSoundRef = React.createRef();\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    handleMinUpdateSection = (section: string): void => {\n        this.props.updateSection(section);\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section: string): void => this.props.updateSection(section);\n\n    handleOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        if (key && value) {\n            this.props.setParentState(key, value);\n            Utils.a11yFocus(e.currentTarget);\n        }\n    }\n\n    handleThreadsOnChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('desktopThreads', value);\n    }\n\n    setDesktopNotificationSound: ReactSelect['onChange'] = (selectedOption: ValueType<SelectedOption>): void => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.props.setParentState('desktopNotificationSound', selectedOption.value);\n            this.setState({selectedOption});\n            Utils.tryNotificationSound(selectedOption.value);\n        }\n    }\n\n    blurDropdown(): void {\n        if (!this.state.blurDropdown) {\n            this.setState({blurDropdown: true});\n            if (this.dropdownSoundRef.current) {\n                this.dropdownSoundRef.current.blur();\n            }\n        }\n    }\n\n    buildMaximizedSetting = (): JSX.Element => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        let notificationSelection;\n        let threadsNotificationSelection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (this.props.sound === 'true') {\n                const sounds = Array.from(Utils.notificationSounds.keys());\n                const options = sounds.map((sound) => {\n                    return {value: sound, label: sound};\n                });\n\n                if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version || '', '4.6.0'))) {\n                    notificationSelection = (<div className='pt-2'>\n                        <ReactSelect\n                            className='react-select notification-sound-dropdown'\n                            classNamePrefix='react-select'\n                            id='displaySoundNotification'\n                            options={options}\n                            clearable={false}\n                            onChange={this.setDesktopNotificationSound}\n                            value={this.state.selectedOption}\n                            isSearchable={false}\n                            ref={this.dropdownSoundRef}\n                        /></div>);\n                }\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        {notificationSelection}\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        if (this.props.isCollapsedThreadsEnabled && NotificationLevels.MENTION === this.props.activity) {\n            threadsNotificationSelection = (\n                <>\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads.desktop'\n                                defaultMessage='Thread reply notifications'\n                            />\n                        </legend>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.threads.allActivity'\n                                    defaultMessage={'Notify me about threads I\\'m following'}\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads'\n                                defaultMessage={'When enabled, any reply to a thread you\\'re following will send a desktop notification.'}\n                            />\n                        </div>\n                    </fieldset>\n                    <hr/>\n                </>\n            );\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {threadsNotificationSelection}\n                {soundSection}\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                serverError={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n                ref={this.minRef}\n            />\n        );\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.blurDropdown();\n\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Preferences} from '../constants';\nexport function getEmailInterval(enableEmailNotification: boolean, enableEmailBatching: boolean, emailIntervalPreference: number): number {\n    const {\n        INTERVAL_NEVER,\n        INTERVAL_IMMEDIATE,\n        INTERVAL_FIFTEEN_MINUTES,\n        INTERVAL_HOUR,\n    } = Preferences;\n\n    const validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    const validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    } else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    } else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    } else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n\n    return emailIntervalPreference;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences, NotificationLevels} from 'utils/constants';\nimport {a11yFocus, localizeMessage} from 'utils/utils';\n\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\nimport {UserNotifyProps} from '@mattermost/types/users';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    currentUserId: string;\n    activeSection: string;\n    updateSection: (section: string) => void;\n    enableEmail: boolean;\n    emailInterval: number;\n    onSubmit: () => void;\n    onCancel: () => void;\n    onChange: (enableEmail: UserNotifyProps['email']) => void;\n    serverError?: string;\n    saving?: boolean;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n        Promise<{data: boolean}>;\n    };\n    isCollapsedThreadsEnabled: boolean;\n    threads: string;\n    setParentState: (key: string, value: any) => void;\n};\n\ntype State = {\n    activeSection: string;\n    emailInterval: number;\n    enableEmail: boolean;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail: enableEmail === 'true',\n            newInterval,\n        });\n\n        a11yFocus(e.currentTarget);\n\n        this.props.onChange(enableEmail as UserNotifyProps['email']);\n    }\n\n    handleThreadsOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('emailThreads', value);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n        }\n\n        this.props.onSubmit();\n    }\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n                ref={this.minRef}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    serverError={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        let threadsNotificationSelection = null;\n        if (this.props.isCollapsedThreadsEnabled && this.props.enableEmail) {\n            threadsNotificationSelection = (\n                <React.Fragment key='userNotificationEmailThreadsOptions'>\n                    <hr/>\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads.desktop'\n                                defaultMessage='Thread reply notifications'\n                            />\n                        </legend>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.threads.allActivity'\n                                    defaultMessage={'Notify me about threads I\\'m following'}\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email_threads'\n                                defaultMessage={'When enabled, any reply to a thread you\\'re following will send an email notification.'}\n                            />\n                        </div>\n                    </fieldset>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                    threadsNotificationSelection,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                serverError={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.activeSection === 'email' && this.props.activeSection === '') {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\ntype Actions = {\n    savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n    Promise<{data: boolean}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {localizeMessage} from 'utils/utils';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\ntype Props = {\n    autoResponderActive: boolean;\n    autoResponderMessage: string;\n    updateSection: (section: string) => void;\n    setParentState: (key: string, value: string | boolean) => void;\n    submit: () => void;\n    saving: boolean;\n    error?: string;\n}\n\nexport default class ManageAutoResponder extends React.PureComponent<Props> {\n    handleAutoResponderChecked = (e: ChangeEvent<HTMLInputElement>) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <textarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows={5}\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React, {ChangeEvent, RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport {a11yFocus, localizeMessage, moveCursorToEnd} from 'utils/utils';\nimport {isDesktopApp} from 'utils/user_agent';\nimport {t} from 'utils/i18n';\n\nimport SettingItem from 'components/setting_item';\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {UserNotifyProps, UserProfile} from '@mattermost/types/users';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport DesktopNotificationSettings from './desktop_notification_setting/desktop_notification_settings';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder/manage_auto_responder';\n\nexport type Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    sendPushNotifications: boolean;\n    enableAutoResponder: boolean;\n    actions: {\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n    };\n    isCollapsedThreadsEnabled: boolean;\n}\n\ntype State = {\n    enableEmail: UserNotifyProps['email'];\n    desktopActivity: UserNotifyProps['desktop'];\n    desktopThreads: UserNotifyProps['desktop_threads'];\n    pushThreads: UserNotifyProps['push_threads'];\n    emailThreads: UserNotifyProps['email_threads'];\n    pushActivity: UserNotifyProps['push'];\n    pushStatus: UserNotifyProps['push_status'];\n    desktopSound: UserNotifyProps['desktop_sound'];\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'];\n    usernameKey: boolean;\n    customKeys: string;\n    customKeysChecked: boolean;\n    firstNameKey: boolean;\n    channelKey: boolean;\n    autoResponderActive: boolean;\n    autoResponderMessage: UserNotifyProps['auto_responder_message'];\n    notifyCommentsLevel: UserNotifyProps['comments'];\n    isSaving: boolean;\n    serverError: string;\n};\n\nfunction getNotificationsStateFromProps(props: Props): State {\n    const user = props.user;\n\n    let desktop: UserNotifyProps['desktop'] = NotificationLevels.MENTION;\n    let desktopThreads: UserNotifyProps['desktop_threads'] = NotificationLevels.ALL;\n    let pushThreads: UserNotifyProps['push_threads'] = NotificationLevels.ALL;\n    let emailThreads: UserNotifyProps['email_threads'] = NotificationLevels.ALL;\n    let sound: UserNotifyProps['desktop_sound'] = 'true';\n    let desktopNotificationSound: UserNotifyProps['desktop_notification_sound'] = 'Bing';\n    let comments: UserNotifyProps['comments'] = 'never';\n    let enableEmail: UserNotifyProps['email'] = 'true';\n    let pushActivity: UserNotifyProps['push'] = NotificationLevels.MENTION;\n    let pushStatus: UserNotifyProps['push_status'] = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage: UserNotifyProps['auto_responder_message'] = localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.',\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_threads) {\n            desktopThreads = user.notify_props.desktop_threads;\n        }\n        if (user.notify_props.push_threads) {\n            pushThreads = user.notify_props.push_threads;\n        }\n        if (user.notify_props.email_threads) {\n            emailThreads = user.notify_props.email_threads;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = user.notify_props.desktop_notification_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        desktopThreads,\n        pushThreads,\n        emailThreads,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        desktopNotificationSound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n        serverError: '',\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent<Props, State> {\n    customCheckRef: RefObject<HTMLInputElement>;\n    customMentionsRef: RefObject<HTMLInputElement>;\n    drawerRef: RefObject<HTMLHeadingElement>;\n    wrapperRef: RefObject<HTMLDivElement>;\n\n    static defaultProps = {\n        activeSection: '',\n    }\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n        this.customCheckRef = React.createRef();\n        this.customMentionsRef = React.createRef();\n        this.drawerRef = React.createRef();\n        this.wrapperRef = React.createRef();\n    }\n\n    handleSubmit = (): void => {\n        const data: UserNotifyProps = {} as UserNotifyProps;\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version || '', '4.6.0'))) {\n            data.desktop_notification_sound = this.state.desktopNotificationSound;\n        }\n        data.desktop = this.state.desktopActivity;\n        data.desktop_threads = this.state.desktopThreads;\n        data.email_threads = this.state.emailThreads;\n        data.push_threads = this.state.pushThreads;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString() as UserNotifyProps['auto_responder_active'];\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.',\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString() as UserNotifyProps['first_name'];\n        data.channel = this.state.channelKey.toString() as UserNotifyProps['channel'];\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data} as UserProfile).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (): void => this.setState(getNotificationsStateFromProps(this.props));\n\n    handleUpdateSection = (section: string): void => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key: string, value: string | boolean): void => {\n        const data: {[key: string]: string | boolean } = {};\n        data[key] = value;\n        this.setState((prevState) => ({...prevState, ...data}));\n    }\n\n    handleNotifyPushThread = (e: ChangeEvent<HTMLInputElement>): void => {\n        const pushThreads = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.setState({pushThreads});\n    }\n\n    handleNotifyCommentsRadio = (notifyCommentsLevel: UserNotifyProps['comments'], e?: React.ChangeEvent): void => {\n        this.setState({notifyCommentsLevel});\n        a11yFocus(e?.currentTarget as HTMLElement);\n    }\n\n    handlePushRadio = (pushActivity: UserNotifyProps['push'], e?: React.ChangeEvent): void => {\n        this.setState({pushActivity});\n        a11yFocus(e?.currentTarget as HTMLElement);\n    }\n\n    handlePushStatusRadio = (pushStatus: UserNotifyProps['push_status'], e?: React.ChangeEvent): void => {\n        this.setState({pushStatus});\n        a11yFocus(e?.currentTarget as HTMLElement);\n    }\n\n    handleEmailRadio = (enableEmail: UserNotifyProps['email']): void => this.setState({enableEmail});\n\n    updateUsernameKey = (val: boolean): void => this.setState({usernameKey: val});\n\n    updateFirstNameKey = (val: boolean): void => this.setState({firstNameKey: val});\n\n    updateChannelKey = (val: boolean): void => this.setState({channelKey: val});\n\n    updateCustomMentionKeys = (): void => {\n        const checked = this.customCheckRef.current?.checked;\n\n        if (checked) {\n            const text = this.customMentionsRef.current?.value || '';\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = (): void => {\n        if (this.customCheckRef.current) {\n            this.customCheckRef.current.checked = true;\n        }\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        const active = this.props.activeSection === 'push';\n        const inputs = [];\n        let submit = null;\n        let max = null;\n\n        if (active) {\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushThreadsNotificationSelection = null;\n                if (this.props.isCollapsedThreadsEnabled && this.state.pushActivity === NotificationLevels.MENTION) {\n                    pushThreadsNotificationSelection = (\n                        <React.Fragment key='userNotificationPushThreadsOptions'>\n                            <hr/>\n                            <fieldset>\n                                <legend className='form-legend'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.threads.push'\n                                        defaultMessage='Thread reply notifications'\n                                    />\n                                </legend>\n                                <div className='checkbox'>\n                                    <label>\n                                        <input\n                                            id='pushThreadsNotificationAllActivity'\n                                            type='checkbox'\n                                            name='pushThreadsNotificationLevel'\n                                            checked={this.state.pushThreads === NotificationLevels.ALL}\n                                            onChange={this.handleNotifyPushThread}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.notifications.push_threads.allActivity'\n                                            defaultMessage={'Notify me about threads I\\'m following'}\n                                        />\n                                    </label>\n                                    <br/>\n                                </div>\n                                <div className='mt-5'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.push_threads'\n                                        defaultMessage={'When enabled, any reply to a thread you\\'re following will send a mobile push notification.'}\n                                    />\n                                </div>\n                            </fieldset>\n                        </React.Fragment>\n                    );\n                }\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <React.Fragment key='userNotificationPushStatusOptions'>\n                            <hr/>\n                            <fieldset>\n                                <legend className='form-legend'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.push_notification.status'\n                                        defaultMessage='Trigger push notifications when'\n                                    />\n                                </legend>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationOnline'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[0]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.online'\n                                            defaultMessage='Online, away or offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationAway'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[1]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.away'\n                                            defaultMessage='Away or offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationOffline'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[2]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.offline'\n                                            defaultMessage='Offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='mt-5'>\n                                    <span>\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.status_info'\n                                            defaultMessage='Notification alerts are only pushed to your mobile device when your availability matches the selection above.'\n                                        />\n                                    </span>\n                                </div>\n                            </fieldset>\n                        </React.Fragment>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                    </div>,\n                    pushStatusSettings,\n                    pushThreadsNotificationSelection,\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>,\n                );\n            }\n            max = (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    inputs={inputs}\n                    submit={submit}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element;\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    }\n\n    createKeysSection = () => {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n        const active = this.props.activeSection === 'keys';\n\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e: ChangeEvent<HTMLInputElement>): void => this.updateFirstNameKey(e.target.checked);\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            const handleUpdateUsernameKey = (e: ChangeEvent<HTMLInputElement>): void => this.updateUsernameKey(e.target.checked);\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            const handleUpdateChannelKey = (e: ChangeEvent<HTMLInputElement>): void => this.updateChannelKey(e.target.checked);\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref={this.customCheckRef}\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref={this.customMentionsRef}\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let keys = ['@' + user.username];\n        if (this.state.firstNameKey) {\n            keys.push(user.first_name);\n        }\n        if (this.state.usernameKey) {\n            keys.push(user.username);\n        }\n\n        if (this.state.channelKey) {\n            keys.push('@channel');\n            keys.push('@all');\n            keys.push('@here');\n        }\n        if (this.state.customKeys.length > 0) {\n            keys = keys.concat(this.state.customKeys.split(','));\n        }\n\n        let describe: JSX.Element | string = '';\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i] !== '') {\n                describe += '\"' + keys[i] + '\", ';\n            }\n        }\n\n        if (describe.length > 0) {\n            describe = describe.substring(0, describe.length - 2);\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.noWords'\n                    defaultMessage='No words configured'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                describe={describe}\n                section={'keys'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n\n            />);\n    }\n\n    createCommentsSection = () => {\n        const serverError = this.state.serverError;\n\n        const active = this.props.activeSection === 'comments';\n        let max = null;\n        if (active) {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element;\n        if (this.state.notifyCommentsLevel === 'never') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsNever'\n                    defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                />\n            );\n        } else if (this.state.notifyCommentsLevel === 'root') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsRoot'\n                    defaultMessage='Trigger notifications on messages in threads that I start'\n                />\n            );\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsAny'\n                    defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                title={localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                describe={describe}\n                section={'comments'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n                areAllSectionsInactive={this.props.activeSection === ''}\n            />\n        );\n    }\n\n    createAutoResponderSection = () => {\n        if (this.props.enableAutoResponder) {\n            const describe = this.state.autoResponderActive ? (\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderEnabled'\n                    defaultMessage='Enabled'\n                />\n            ) : (\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderDisabled'\n                    defaultMessage='Disabled'\n                />\n            );\n\n            return (\n                <SettingItem\n                    active={this.props.activeSection === 'auto-responder'}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.notifications.autoResponder'\n                            defaultMessage='Automatic Direct Message Replies'\n                        />\n                    }\n                    describe={describe}\n                    section={'auto-responder'}\n                    updateSection={this.handleUpdateSection}\n                    max={(\n                        <div>\n                            <ManageAutoResponder\n                                autoResponderActive={this.state.autoResponderActive}\n                                autoResponderMessage={this.state.autoResponderMessage || ''}\n                                updateSection={this.handleUpdateSection}\n                                setParentState={this.setStateValue}\n                                submit={this.handleSubmit}\n                                error={this.state.serverError}\n                                saving={this.state.isSaving}\n                            />\n                            <div className='divider-dark'/>\n                        </div>\n                    )}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const autoResponderSection = this.createAutoResponderSection();\n        const commentsSection = this.createCommentsSection();\n        const keysSection = this.createKeysSection();\n        const pushNotificationSection = this.createPushNotificationSection();\n        const enableEmailProp = this.state.enableEmail === 'true';\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref={this.drawerRef}\n                    >\n                        <div className='modal-back'>\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                ariaLabel={{\n                                    id: t('generic_icons.collapse'),\n                                    defaultMessage: 'Collapse Icon',\n                                }}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref={this.wrapperRef}\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        threads={this.state.desktopThreads}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        selectedSound={this.state.desktopNotificationSound || 'default'}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={enableEmailProp}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        setParentState={this.setStateValue}\n                        threads={this.state.emailThreads || ''}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {!this.props.isCollapsedThreadsEnabled && (\n                        <>\n                            {commentsSection}\n                            <div className='divider-light'/>\n                        </>\n                    )}\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport UserSettingsNotifications, {Props} from './user_settings_notifications';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n        isCollapsedThreadsEnabled: isCollapsedThreadsEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            updateMe,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {defineMessages} from 'react-intl';\n\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defaultMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nexport default holders;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedTime, useIntl} from 'react-intl';\n\nimport {useSelector} from 'react-redux';\n\nimport {Audit} from '@mattermost/types/audits';\n\nimport holders from '../holders';\nimport {toTitleCase} from 'utils/utils';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from '@mattermost/types/store';\n\nexport type Props = {\n    audit: Audit;\n    actionURL: string;\n    desc?: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function AuditRow({\n    actionURL,\n    audit,\n    desc: aDesc,\n    showUserId,\n    showIp,\n    showSession,\n}: Props) {\n    const intl = useIntl();\n    let desc = aDesc;\n    if (!desc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            desc = intl.formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            desc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n\n    const ip = audit.ip_address;\n    const sessionId = audit.session_id;\n\n    const auditProfile = useSelector((state: GlobalState) => getUser(state, audit.user_id));\n    const userId = auditProfile ? auditProfile.email : audit.user_id;\n    let uContent;\n    if (showUserId) {\n        uContent = <td className='word-break--all'>{userId}</td>;\n    }\n\n    let iContent;\n    if (showIp) {\n        iContent = (\n            <td className='whitespace--nowrap word-break--all'>\n                {ip}\n            </td>\n        );\n    }\n\n    let sContent;\n    if (showSession) {\n        sContent = (\n            <td className='whitespace--nowrap word-break--all'>\n                {sessionId}\n            </td>\n        );\n    }\n\n    let descStyle = '';\n    if (desc.toLowerCase().indexOf('fail') !== -1) {\n        descStyle = ' color--error';\n    }\n\n    return (\n        <tr key={audit.id}>\n            <td className='whitespace--nowrap word-break--all'>\n                {timestamp}\n            </td>\n            {uContent}\n            <td className={'word-break--all' + descStyle}>{desc}</td>\n            {iContent}\n            {sContent}\n        </tr>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {useIntl} from 'react-intl';\n\nimport {useSelector} from 'react-redux';\n\nimport {Audit} from '@mattermost/types/audits';\nimport {GlobalState} from '@mattermost/types/store';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n    channelInfo: string[];\n    channelName: string;\n    channelURL: string;\n};\n\nexport default function ChannelDefaultRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n    channelInfo,\n    channelName,\n    channelURL,\n}: Props) {\n    const intl = useIntl();\n\n    let userIdField = [];\n    let userId = '';\n    let username = '';\n\n    if (channelInfo[1]) {\n        userIdField = channelInfo[1].split('=');\n\n        if (userIdField.indexOf('user_id') >= 0) {\n            userId = userIdField[userIdField.indexOf('user_id') + 1];\n        }\n    }\n\n    const profile = useSelector((state: GlobalState) => getUser(state, userId));\n    if (profile) {\n        username = profile.username;\n    }\n\n    let desc = '';\n    if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n        desc = intl.formatMessage(holders.channelDeleted, {url: channelURL});\n    } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n        desc = intl.formatMessage(holders.userAdded, {username, channelName});\n    } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n        desc = intl.formatMessage(holders.userRemoved, {\n            username,\n            channelName,\n        });\n    }\n\n    return (\n        <AuditRow\n            audit={audit}\n            actionURL={actionURL}\n            desc={desc}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {useIntl} from 'react-intl';\n\nimport {useSelector} from 'react-redux';\n\nimport {Audit} from '@mattermost/types/audits';\nimport {Channel} from '@mattermost/types/channels';\nimport {getDirectTeammate} from 'mattermost-redux/selectors/entities/channels';\n\nimport {GlobalState} from 'types/store';\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n    channelObj?: Channel | null;\n}\n\nexport default function ChannelCreateDirectRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n    channelObj,\n}: Props) {\n    const intl = useIntl();\n\n    const channelId = channelObj?.id ?? '';\n\n    const desc = intl.formatMessage(holders.establishedDM, {\n        username: useSelector((state: GlobalState) =>\n            getDirectTeammate(state, channelId),\n        )?.username,\n    });\n    return (\n        <AuditRow\n            audit={audit}\n            actionURL={actionURL}\n            desc={desc}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {useSelector} from 'react-redux';\n\nimport {Audit} from '@mattermost/types/audits';\n\nimport holders from '../holders';\nimport AuditRow from '../audit_row/audit_row';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\nimport {GlobalState} from '@mattermost/types/store';\n\nimport ChannelDefaultRow from './channel_default_row';\nimport ChannelCreateDirectRow from './channel_create_direct_row';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function ChannelRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n}: Props): JSX.Element {\n    const props = {\n        showUserId,\n        showIp,\n        showSession,\n    };\n    const intl = useIntl();\n\n    const channelInfo = audit.extra_info.split(' ');\n    const channelNameField = channelInfo[0].split('=');\n\n    const channelURL = channelNameField.indexOf('name') >= 0 ? channelNameField[channelNameField.indexOf('name') + 1] : '';\n    const channelObj = useSelector((state: GlobalState) => getChannelByName(state, channelURL));\n    const channelName = channelObj?.display_name ?? channelURL;\n\n    switch (actionURL) {\n    case '/channels/create':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.channelCreated, {channelName})}\n                {...props}\n            />\n        );\n    case '/channels/create_direct':\n        return (\n            <ChannelCreateDirectRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n                channelObj={channelObj}\n            />\n        );\n    case '/channels/update':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.nameUpdated, {channelName})}\n                {...props}\n            />\n        );\n    case '/channels/update_desc': // support the old path\n    case '/channels/update_header':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.headerUpdated, {channelName})}\n                {...props}\n            />\n        );\n    default: {\n        return (\n            <ChannelDefaultRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n                channelInfo={channelInfo}\n                channelName={channelName}\n                channelURL={channelURL}\n            />\n        );\n    }\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {useIntl} from 'react-intl';\n\nimport {useSelector} from 'react-redux';\n\nimport {Audit} from '@mattermost/types/audits';\nimport {GlobalState} from '@mattermost/types/store';\nimport {getCurrentUser, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {isSystemAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n    updateField: string;\n    userInfo: string[];\n}\n\nexport default function UserUpdateActiveSessionRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n    updateField,\n    userInfo,\n}: Props): JSX.Element {\n    const intl = useIntl();\n\n    let desc = '';\n\n    if (updateField === 'true') {\n        desc = intl.formatMessage(holders.accountActive);\n    } else if (updateField === 'false') {\n        desc = intl.formatMessage(holders.accountInactive);\n    }\n\n    const actingUserInfo = userInfo[1].split('=');\n    const isSessionUser = actingUserInfo[0] === 'session_user';\n    const actingUser = useSelector((state: GlobalState) => getUser(state, isSessionUser ? actingUserInfo[1] : ''));\n    const user = useSelector((state: GlobalState) => getCurrentUser(state));\n    if (isSessionUser) {\n        if (user && actingUser && isSystemAdmin(user.roles)) {\n            desc += intl.formatMessage(holders.by, {\n                username: actingUser.username,\n            });\n        } else if (user && actingUser) {\n            desc += intl.formatMessage(holders.byAdmin);\n        }\n    }\n\n    return (\n        <AuditRow\n            audit={audit}\n            actionURL={actionURL}\n            desc={desc}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {Audit} from '@mattermost/types/audits';\n\nimport holders from '../holders';\nimport AuditRow from '../audit_row/audit_row';\n\nimport UserUpdateActiveSessionRow from './user_update_active_session_row';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function UserRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n}: Props): JSX.Element {\n    const props = {\n        showUserId,\n        showIp,\n        showSession,\n    };\n    const intl = useIntl();\n\n    const userInfo = audit.extra_info.split(' ');\n\n    let desc = '';\n    switch (actionURL) {\n    case '/users/login':\n        if (userInfo[0] === 'attempt') {\n            desc = intl.formatMessage(holders.attemptedLogin);\n        } else if (userInfo[0] === 'success') {\n            desc = intl.formatMessage(holders.successfullLogin);\n        } else if (userInfo[0] === 'authenticated') {\n            desc = intl.formatMessage(holders.authenticated);\n        } else if (userInfo[0]) {\n            desc = intl.formatMessage(holders.failedLogin);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    case '/users/revoke_session':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.sessionRevoked, {\n                    sessionId: userInfo[0].split('=')[1],\n                })}\n                {...props}\n            />\n        );\n    case '/users/newimage':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updatePicture)}\n                {...props}\n            />\n        );\n    case '/users/update':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updateGeneral)}\n                {...props}\n            />\n        );\n    case '/users/newpassword':\n        if (userInfo[0] === 'attempted') {\n            desc = intl.formatMessage(holders.attemptedPassword);\n        } else if (userInfo[0] === 'completed') {\n            desc = intl.formatMessage(holders.successfullPassword);\n        } else if (\n            userInfo[0] ===\n                'failed - tried to update user password who was logged in through oauth'\n        ) {\n            desc = intl.formatMessage(holders.failedPassword);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updateGeneral)}\n                {...props}\n            />\n        );\n    case '/users/update_roles': {\n        const userRoles = userInfo[0].split('=')[1];\n\n        desc = intl.formatMessage(holders.updatedRol);\n        if (userRoles.trim()) {\n            desc += userRoles;\n        } else {\n            desc += intl.formatMessage(holders.member);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    }\n    case '/users/update_active': {\n        const updateType = userInfo[0].split('=')[0];\n        const updateField = userInfo[0].split('=')[1];\n\n        /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n        if (updateType === 'active') {\n            return (\n                <UserUpdateActiveSessionRow\n                    audit={audit}\n                    actionURL={actionURL}\n                    showUserId={showUserId}\n                    showIp={showIp}\n                    showSession={showSession}\n                    updateField={updateField}\n                    userInfo={userInfo}\n                />\n            );\n        } else if (updateType === 'session_id') {\n            desc = intl.formatMessage(holders.sessionRevoked, {\n                sessionId: updateField,\n            });\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    }\n    case '/users/send_password_reset':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.sentEmail, {\n                    email: userInfo[0].split('=')[1],\n                })}\n                {...props}\n            />\n        );\n    case '/users/reset_password':\n        if (userInfo[0] === 'attempt') {\n            desc = intl.formatMessage(holders.attemptedReset);\n        } else if (userInfo[0] === 'success') {\n            desc = intl.formatMessage(holders.successfullReset);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    case '/users/update_notify':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updateGlobalNotifications)}\n                {...props}\n            />\n        );\n    default:\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {useIntl} from 'react-intl';\n\nimport {Audit} from '@mattermost/types/audits';\n\nimport {toTitleCase} from 'utils/utils';\n\nimport ChannelRow from './channel_row/channel_row';\nimport UserRow from './user_row/user_row';\nimport holders from './holders';\nimport AuditRow from './audit_row/audit_row';\n\nexport type Props = {\n    audit: Audit;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function FormatAudit({\n    audit,\n    showUserId,\n    showIp,\n    showSession,\n}: Props) {\n    const intl = useIntl();\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n\n    if (actionURL.indexOf('/channels') === 0) {\n        return (\n            <ChannelRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n            />\n        );\n    }\n\n    if (actionURL.indexOf('/users') === 0) {\n        return (\n            <UserRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n            />\n        );\n    }\n\n    const {formatMessage} = intl;\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(holders.oauthTokenFailed, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    return (\n        <AuditRow\n            audit={audit}\n            desc={auditDesc}\n            actionURL={actionURL}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, IntlShape} from 'react-intl';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {Audit} from '@mattermost/types/audits';\n\nimport FormatAudit from './format_audit';\n\ntype Props = {\n    intl: IntlShape;\n    audits: Audit[];\n    showUserId?: boolean;\n    showIp?: boolean;\n    showSession?: boolean;\n    currentUser: UserProfile;\n    actions: {\n        getMissingProfilesByIds: (userIds: string[]) => ActionFunc;\n    };\n};\n\nexport class AuditTable extends React.PureComponent<Props> {\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const {audits, showUserId, showIp, showSession} = this.props;\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody data-testid='auditTableBody'>\n                    {audits.map((audit) => (\n                        <FormatAudit\n                            key={audit.id}\n                            audit={audit}\n                            showUserId={Boolean(this.props.showUserId)}\n                            showIp={Boolean(this.props.showIp)}\n                            showSession={Boolean(this.props.showSession)}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AuditTable from './audit_table';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUser: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {Session} from '@mattermost/types/sessions';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: Session;\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {General} from 'mattermost-redux/constants';\nimport {Session} from '@mattermost/types/sessions';\n\nimport {localizeMessage} from 'utils/utils';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\ntype Props = {\n\n    /**\n     * The index of this instance within the list\n     */\n    index: number;\n\n    /**\n     * The current locale of the user\n     */\n    locale: string;\n\n    /**\n     * The session that's to be displayed\n     */\n    currentSession: Session;\n\n    /**\n     * Function to revoke session\n     */\n    submitRevoke: (sessionId: string, event: React.MouseEvent) => void;\n};\n\ntype State = {\n    moreInfo: boolean;\n};\n\ntype MobileSessionInfo = {\n    devicePicture?: string;\n    deviceTitle?: string;\n    devicePlatform: JSX.Element;\n};\n\nexport default class ActivityLog extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = (): void => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e: React.MouseEvent): void => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session: Session): boolean => {\n        return Boolean(session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android')));\n    };\n\n    mobileSessionInfo = (session: Session): MobileSessionInfo => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render(): React.ReactNode {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture: string | undefined = '';\n        let deviceTitle = '';\n\n        if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n            deviceTitle = sessionInfo.deviceTitle || deviceTitle;\n        } else {\n            if (currentSession.props.platform === 'Windows') {\n                devicePicture = 'fa fa-windows';\n                deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n            } else if (currentSession.props.platform === 'Macintosh' ||\n                currentSession.props.platform === 'iPhone') {\n                devicePicture = 'fa fa-apple';\n                deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            } else if (currentSession.props.platform === 'Linux') {\n                if (currentSession.props.os.indexOf('Android') >= 0) {\n                    devicePlatform = (\n                        <FormattedMessage\n                            id='activity_log_modal.android'\n                            defaultMessage='Android'\n                        />\n                    );\n                    devicePicture = 'fa fa-android';\n                    deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n                } else {\n                    devicePicture = 'fa fa-linux';\n                    deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n                }\n            } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n\n            if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.desktop'\n                        defaultMessage='Native Desktop App'\n                    />\n                );\n            }\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Session} from '@mattermost/types/sessions';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log';\n\nexport type Props = {\n\n    /**\n     * The current user id\n     */\n    currentUserId: string;\n\n    /**\n     * Current user's sessions\n     */\n    sessions: Session[];\n\n    /**\n     * Current user's locale\n     */\n    locale: string;\n\n    /**\n     * Function that's called when user closes the modal\n     */\n    onHide: () => void;\n\n    actions: {\n\n        /**\n         * Function to refresh sessions from server\n         */\n        getSessions: (userId: string) => ActionFunc;\n\n        /**\n         * Function to revoke a particular session\n         */\n        revokeSession: (userId: string, sessionId: string) => Promise<{ data: boolean }>;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class ActivityLogModal extends React.PureComponent<Props, State> {\n    static propTypes = {\n\n    }\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        const modalContent = (e.target as Element)?.closest('.modal-content');\n        modalContent?.classList.add('animation--highlight');\n        setTimeout(() => {\n            modalContent?.classList.remove('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        const activityList = this.props.sessions.reduce((array: JSX.Element[], currentSession, index) => {\n            if (currentSession.props.type === 'UserAccessToken') {\n                return array;\n            }\n\n            array.push(\n                <ActivityLog\n                    key={currentSession.id}\n                    index={index}\n                    locale={this.props.locale}\n                    currentSession={currentSession}\n                    submitRevoke={this.submitRevoke}\n                />,\n            );\n            return array;\n        }, []);\n\n        const content = <form role='form'>{activityList}</form>;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\nimport {ActionFunc, GenericAction} from 'mattermost-redux/types/actions';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {GlobalState} from 'types/store';\n\nimport ActivityLogModal, {Props} from './activity_log_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc| GenericAction>, Props['actions']>({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        getHistory().push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            getHistory().push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport {UserProfile} from '@mattermost/types/users';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<{\n            data: {token: string; description: string; id: string; is_active: boolean} | null;\n            error?: {\n                message: string;\n            };\n        }>;\n        revokeUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        enableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        disableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: {token: string; description: string; id: string; is_active: boolean} | null;\n    tokenCreationState?: string;\n    tokenError?: string;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private minRef: React.RefObject<SettingItemMinComponent>;\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>. Create new tokens on your desktop.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-personal-access-token/'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-personal-access-token/'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\ntype Actions = {\n    getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n    createUserAccessToken: (userId: string, description: string) => Promise<{\n        data: {token: string; description: string; id: string; is_active: boolean} | null;\n        error?: {\n            message: string;\n        };\n    }>;\n    revokeUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    enableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    disableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    clearUserAccessTokens: () => void;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport Constants from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport LocalizedIcon from 'components/localized_icon';\nimport SettingItem from 'components/setting_item';\nimport ToggleModalButton from 'components/toggle_modal_button';\n\nimport {OAuthApp} from '@mattermost/types/integrations';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableSignUpWithEmail: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    enableSignUpWithOffice365: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: ReturnType<typeof Utils.getPasswordConfig>;\n    militaryTime: boolean;\n    actions: Actions;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    passwordError: React.ReactNode;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport default class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.currentPasswordError',\n                    'Please enter your current password.',\n                ),\n                serverError: '',\n            });\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(\n            newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.passwordMatchError',\n                    'The new passwords you entered do not match.',\n                ),\n                serverError: '',\n            });\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        const inputs = [];\n        let submit;\n\n        const active = this.props.activeSection === SECTION_PASSWORD;\n        let max = null;\n        if (active) {\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.currentPassword',\n                                    'Current Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.newPassword',\n                                    'New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.retypePassword',\n                                    'Retype New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        const active = this.props.activeSection === SECTION_SIGNIN;\n        let max = null;\n        if (active) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={Utils.localizeMessage(\n                        'user.settings.security.method',\n                        'Sign-in Method',\n                    )}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OPENID_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.openid'\n                    defaultMessage='OpenID'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={Utils.localizeMessage(\n                    'user.settings.security.method',\n                    'Sign-in Method',\n                )}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        const active = this.props.activeSection === SECTION_APPS;\n        let max = null;\n        if (active) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={Utils.localizeMessage(\n                    'user.settings.security.oauthApps',\n                    'OAuth 2.0 Applications',\n                )}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOpenId ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={Utils.localizeMessage('user.settings.security.close', 'Close')}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                    >\n                        <div className='modal-back'>\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        modalId='access_history'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <LocalizedIcon\n                            className='fa fa-clock-o'\n                            title={{id: t('user.settings.security.viewHistory.icon'), defaultMessage: 'Access History Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        modalId='activity_log'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <LocalizedIcon\n                            className='fa fa-clock-o'\n                            title={{id: t('user.settings.security.logoutActiveSessions.icon'), defaultMessage: 'Active Sessions Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from '@mattermost/types/store';\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (userId: string, currentPassword: string, newPassword: string) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {PreferenceType} from '@mattermost/types/preferences';\n\nimport {a11yFocus} from 'utils/utils';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\n\ntype Props = {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    currentUserId: string;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<{data: boolean}>;\n    showUnreadsCategory: boolean;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    checked: boolean;\n    isSaving: boolean;\n}\n\nexport default class ShowUnreadsCategory extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            checked: false,\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    checked: props.showUnreadsCategory,\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            checked: e.target.value === 'true',\n        });\n        a11yFocus(e.target);\n    }\n\n    handleSubmit = async () => {\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.currentUserId, [{\n            user_id: this.props.currentUserId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.SHOW_UNREAD_SECTION,\n            value: this.state.checked.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    }\n\n    renderDescription = () => {\n        if (this.props.showUnreadsCategory) {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.showUnreadsCategoryTitle'\n                defaultMessage='Group unread channels separately'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='showUnreadsCategory'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOn'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={this.state.checked}\n                                    onChange={() => this.setState({checked: true})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOff'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={!this.state.checked}\n                                    onChange={() => this.setState({checked: false})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.showUnreadsCategoryDesc'\n                                defaultMessage='When enabled, all unread channels and direct messages will be grouped together in the sidebar.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {shouldShowUnreadsCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport ShowUnreadsCategory from './show_unreads_category';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        showUnreadsCategory: shouldShowUnreadsCategory(state),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowUnreadsCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {RefObject} from 'react';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingItemMinComponent from 'components/setting_item_min/setting_item_min';\nimport {localizeMessage} from 'utils/utils';\n\nimport {PreferenceType} from '@mattermost/types/preferences';\n\ntype Limit = {\n    value: number;\n    label: string;\n};\n\ntype Props = {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    currentUserId: string;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<{data: boolean}>;\n    dmGmLimit: number;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    limit: Limit;\n    isSaving: boolean;\n}\n\nconst limits: Limit[] = [\n    {value: 10000, label: localizeMessage('user.settings.sidebar.limitVisibleGMsDMs.allDirectMessages', 'All Direct Messages')},\n    {value: 10, label: '10'},\n    {value: 15, label: '15'},\n    {value: 20, label: '20'},\n    {value: 40, label: '40'},\n];\n\nexport default class LimitVisibleGMsDMs extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            limit: {value: 20, label: '20'},\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    limit: limits.find((l) => l.value === props.dmGmLimit),\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        } else if (!props.active) {\n            return {\n                limit: limits.find((l) => l.value === props.dmGmLimit),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    handleChange = (selected: ValueType<Limit>) => {\n        if (selected && 'value' in selected) {\n            this.setState({limit: selected});\n        }\n    }\n\n    handleSubmit = async () => {\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.currentUserId, [{\n            user_id: this.props.currentUserId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: this.state.limit.value.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    }\n\n    renderDescription = () => {\n        return (\n            <span>{this.state.limit.label}</span>\n        );\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.limitVisibleGMsDMsTitle'\n                defaultMessage='Number of direct messages to show'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='limitVisibleGMsDMs'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <ReactSelect\n                            className='react-select'\n                            classNamePrefix='react-select'\n                            id='limitVisibleGMsDMs'\n                            options={limits}\n                            clearable={false}\n                            onChange={this.handleChange}\n                            value={this.state.limit}\n                            isSearchable={false}\n                            menuPortalTarget={document.body}\n                            styles={reactStyles}\n                        />\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.limitVisibleGMsDMsDesc'\n                                defaultMessage='You can also change these settings in the direct messages sidebar menu.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nconst reactStyles = {\n    menuPortal: (provided: React.CSSProperties) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getVisibleDmGmLimit} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        dmGmLimit: getVisibleDmGmLimit(state),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LimitVisibleGMsDMs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\nimport ShowUnreadsCategory from './show_unreads_category';\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nexport interface Props {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nexport default function UserSettingsSidebar(props: Props): JSX.Element {\n    return (\n        <div>\n            <div className='modal-header'>\n                <button\n                    id='closeButton'\n                    type='button'\n                    className='close'\n                    data-dismiss='modal'\n                    aria-label='Close'\n                    onClick={props.closeModal}\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                </button>\n                <h4 className='modal-title'>\n                    <div\n                        className='modal-back'\n                        onClick={props.collapseModal}\n                    >\n                        <LocalizedIcon\n                            className='fa fa-angle-left'\n                            title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                        />\n                    </div>\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                </h4>\n            </div>\n            <div\n                id='sidebarTitle'\n                className='user-settings'\n            >\n                <h3 className='tab-header'>\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                </h3>\n                <div className='divider-dark first'/>\n                <ShowUnreadsCategory\n                    active={props.activeSection === 'showUnreadsCategory'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                />\n                <div className='divider-dark'/>\n                <LimitVisibleGMsDMs\n                    active={props.activeSection === 'limitVisibleGMsDMs'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                />\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nexport default UserSettingsSidebar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {UserProfile} from '@mattermost/types/users';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection: string;\n    updateSection: (section?: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n};\n\nexport default class UserSettings extends React.PureComponent<Props> {\n    render() {\n        if (this.props.activeTab === 'profile') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from '@mattermost/types/store';\n\nimport UserSettings from './user_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {makeGetUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {DispatchFunc, GetStateFunc} from 'mattermost-redux/types/actions';\n\nimport {updateMe} from './users';\nexport function autoUpdateTimezone(deviceTimezone: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const currentUser = getCurrentUser(getState());\n        const currentTimezone = makeGetUserTimezone()(getState(), currentUser.id);\n        const newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n        if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n            const timezone = {\n                useAutomaticTimezone: 'true',\n                automaticTimezone: deviceTimezone,\n                manualTimezone: currentTimezone.manualTimezone,\n            };\n\n            const updatedUser = {\n                ...currentUser,\n                timezone,\n            };\n\n            updateMe(updatedUser)(dispatch, getState);\n        }\n\n        return {data: true};\n    };\n}\n"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","ColorInput","React","constructor","props","super","e","this","colorPicker","current","contains","target","setState","isOpened","state","colorInput","focus","newColorData","focused","onChange","hex","event","value","color","tinycolor","normalizedColor","toHex","isValid","setSelectionRange","length","key","togglePicker","static","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","capture","removeEventListener","render","id","className","ref","type","onBlur","onFocus","onKeyDown","maxLength","disabled","isDisabled","onClick","style","backgroundColor","handleColorChange","disableAlpha","string","SettingItem","minRef","focusEditButton","active","areAllSectionsInactive","max","title","updateSection","describe","section","disableOpen","bool","infoPosition","saving","containerStyle","JoinLeaveSection","currentTarget","joinLeaveState","a11yFocus","joinLeave","onUpdateSection","actions","joinLeavePreference","category","Preferences","user_id","name","savePreferences","FormattedMessage","defaultMessage","inputs","AdvancedSections","checked","handleOnChange","setting","submit","handleSubmit","isSaving","serverError","handleUpdateSection","renderOnOffLabel","connect","getPreference","bindActionCreators","PerformanceDebuggingSection","useRef","prevActiveRef","useEffect","performanceDebuggingEnabled","settings","PerformanceDebuggingSectionExpanded","PerformanceDebuggingSectionCollapsed","description","settingsEnabled","disableClientPlugins","disableTelemetry","disableTypingMessages","values","count","setDisableClientPlugins","useState","setDisableTelemetry","setDisableTypingMessages","useCallback","preferences","push","toString","mapDispatchToProps","getBool","isPerformanceDebuggingEnabled","PreReleaseFeatures","Constants","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","sync_drafts","syncDrafts","unreadScrollPosition","PreReleaseFeaturesLocal","JSON","parse","stringify","MARKDOWN_PREVIEW","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","feature","label","preReleaseFeatures","previewFeaturesEnabled","enablePreviewFeatures","showDeactivateAccountModal","String","forEach","lastIndexOf","features","async","currentUser","userId","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","default","t","mac","isMac","ctrlSendTitle","ctrlSendDesc","activeSection","updateSetting","bind","unread_scroll_position","renderUnreadScrollPositionLabel","getCtrlSendText","ctrlSendActive","renderCtrlEnterLabel","toggleFeature","renderFeatureLabel","saveEnabledFeatures","localizeMessage","enabled","option","ctrlEnter","codeBlockCtrlEnter","ctrlSendSection","renderCtrlSendSection","formattingSection","renderFormattingSection","previewFeaturesSection","previewFeaturesSectionDivider","formattingSectionDivider","renderPreviewFeaturesSection","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","unreadScrollPositionSection","renderUnreadScrollPositionSection","unreadScrollPositionSectionDivider","syncDraftsSection","syncDraftsSectionDivider","syncedDraftsAreAllowed","renderSyncDraftsSection","closeModal","collapseModal","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","getCurrentUser","getUnreadScrollPositionPreference","ImportThemeModal","preventDefault","text","isInputValid","inputError","sidebarBg","sidebarHeaderBg","sidebarTextActiveBorder","sidebarTextActiveColor","sidebarTextHoverBg","sidebarText","onlineIndicator","mentionBg","split","theme","setThemeDefaults","sidebarUnreadText","sidebarHeaderTextColor","callback","handleOnHide","indexOf","colors","i","charAt","Modal","dialogClassName","onHide","onExited","role","closeButton","componentClass","handleChange","injectIntl","ColorChooser","newColor","messages","defineMessages","sidebarTeamBarBg","awayIndicator","dndIndicator","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","newTheme","mentionBj","copyTheme","setCopyTheme","window","clipboardData","getData","err","stopPropagation","textareaRef","sidebarStylesHeaderRef","classList","toggle","toggleSection","sidebarStylesRef","centerChannelStylesHeaderRef","centerChannelStylesRef","linkAndButtonStylesHeaderRef","linkAndButtonStylesRef","selectTheme","execCommand","showCopySuccess","copySuccess","querySelector","display","setTimeout","createRef","headerOverlayRef","assign","image","node","ontransitionend","overflowY","sidebarElements","centerChannelElements","linkAndButtonElements","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","popoverStyle","width","alt","src","defaultValue","onCodeThemeChange","placement","overlay","group","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","ThemeThumbnail","themeName","themeKey","height","viewBox","fill","xmlns","x","y","rx","cx","cy","r","PremadeThemeChooser","allowedThemes","premadeThemes","hasAllowedThemes","trim","k","premadeTheme","activeClass","replace","changeOpacity","toTitleCase","AllowedThemes","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","themeChanged","field","hasOwnProperty","applyTheme","openModal","modalId","ModalIdentifiers","dialogType","dialogProps","setEnforceFocus","selected","resetFields","componentWillUnmount","showAllTeamsCheckbox","displayCustom","custom","premade","themeUI","allowCustomThemes","updateType","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","disableEnterSubmit","getThemeCategory","getCurrentTeamId","getTheme","getMyTeamsCount","UserSettingsTheme","ManageTimezones","selectedOption","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","user","timezone","updatedUser","updateMe","res","Error","timezoneLabel","selectedOptionValue","getBrowserTimezone","getTimezoneLabel","timezones","openMenu","timeOptions","map","timeObject","utc","reactStyles","menuPortal","provided","zIndex","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","manualTimezoneInput","classNamePrefix","menuPortalTarget","body","styles","options","clearable","changeTimezone","ManageLanguage","modalBody","isKeyPressed","remove","add","locale","locales","I18n","userLocale","reactSelectContainer","componentDidMount","handleContainerKeyDown","intl","l","order","sort","a","b","lang","interfaceLanguageLabelAria","formatMessage","input","menuIsOpen","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","link","msg","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","availabilityStatusOnPosts","channelDisplayMode","messageDisplay","colorizeUsernames","collapseDisplay","collapsedReplyThreads","linkPreviewDisplay","lastActiveDisplay","oneClickReactionsOnPosts","clickToReply","UserSettingsDisplay","show_last_active","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","availabilityStatusOnPostsPreference","AVAILABILITY_STATUS_ON_POSTS","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","colorizeUsernamesPreference","COLORIZE_USERNAMES","collapseDisplayPreference","COLLAPSE_DISPLAY","collapsedReplyThreadsPreference","COLLAPSED_REPLY_THREADS","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","oneClickReactionsOnPostsPreference","ONE_CLICK_REACTIONS_ENABLED","clickToReplyPreference","CLICK_TO_REPLY","trackChangeIfNecessary","updateState","newState","deepEqual","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","preference","oldValue","trackEvent","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleCollapseReplyThreadsRadio","handleLastActiveRadio","handleLinkPreviewRadio","createSection","firstOption","secondOption","thirdOption","onSubmit","extraInfo","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","childOptionToShow","childOption","firstDisplay","secondDisplay","thirdSection","childOptionSection","thirdDisplay","childDisplay","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","lastActiveSection","lastActiveTimeEnabled","submitLastActive","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","availabilityStatusOnPostsSection","timezoneSelection","userTimezone","Boolean","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","collapsedReplyThreadsAllowUserPreference","COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT","COLLAPSED_REPLY_THREADS_ON","COLLAPSED_REPLY_THREADS_OFF","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","defaultClientLocale","localeName","themeSection","oneClickReactionsOnPostsSection","enableThemeSelection","emojiPickerEnabled","currentUserTimezone","getUserTimezone","makeGetUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","EnableEmojiPicker","EnableLastActiveTime","getUser","getUserCurrentTimezone","isCollapsedThreadsAllowed","CollapsedThreads","getCollapsedThreadsPreference","holders","usernameReserved","usernameGroupNameUniqueness","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","UserSettingsGeneralTab","email","resendStatus","showSpinner","sendVerificationEmail","loading","Utils","handleEmailResend","toLowerCase","usernameError","errObj","ValidationErrors","clientError","min","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","AnnouncementBarTypes","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","autoFocus","updateFirstName","updateLastName","notifClick","updateTab","notifLink","notify","submitName","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","submitPosition","setDefault","helpText","imgSrc","ldapPictureAttributeSet","submitPicture","last_picture_update","setDefaultProfilePicture","onSetDefault","defaultImageSrc","onFileChange","updatePicture","minMessage","date","FormattedDate","Date","day","month","year","originalEmail","createEmailSection","emailVerificationEnabled","updateEmail","updateConfirmEmail","updateCurrentPassword","submitEmail","nameSection","createNameSection","nicknameSection","createNicknameSection","usernameSection","createUsernameSection","positionSection","createPositionSection","emailSection","pictureSection","createPictureSection","number","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","LdapPictureAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","NotificationLevels","activityRadio","soundSection","notificationSelection","threadsNotificationSelection","activity","soundRadio","sound","from","isDesktopApp","desktop","semver","version","setDesktopNotificationSound","isSearchable","dropdownSoundRef","isCollapsedThreadsEnabled","threads","handleThreadsOnChange","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","selectedSound","blurDropdown","blur","buildMaximizedSetting","buildMinimizedSetting","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithoutEmailBatching","EmailNotificationSetting","enableEmail","newInterval","emailInterval","sendEmailNotifications","batchingOptions","batchingInfo","nextProps","renderMinSettingView","renderMaxSettingView","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktopThreads","pushThreads","emailThreads","desktopNotificationSound","comments","pushActivity","pushStatus","notify_props","desktop_threads","push_threads","email_threads","desktop_sound","desktop_notification_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customCheckRef","customMentionsRef","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","pushThreadsNotificationSelection","handleNotifyPushThread","handlePushStatusRadio","handlePushRadio","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","moveCursorToEnd","concat","substring","commentsActive","handleNotifyCommentsRadio","enableAutoResponder","setStateValue","drawerRef","wrapperRef","autoResponderSection","createAutoResponderSection","commentsSection","createCommentsSection","keysSection","createKeysSection","pushNotificationSection","createPushNotificationSection","enableEmailProp","ariaLabel","handleEmailRadio","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","sessionRevoked","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","successfullLogin","failedLogin","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditRow","actionURL","audit","desc","aDesc","showUserId","showIp","showSession","useIntl","extra_info","actionDesc","extraInfoDesc","create_at","timestamp","FormattedTime","hour","minute","ip","ip_address","sessionId","session_id","auditProfile","useSelector","uContent","iContent","sContent","descStyle","ChannelDefaultRow","channelInfo","channelName","channelURL","userIdField","profile","test","url","ChannelCreateDirectRow","channelObj","channelId","getDirectTeammate","ChannelRow","channelNameField","getChannelByName","display_name","UserUpdateActiveSessionRow","updateField","userInfo","actingUserInfo","isSessionUser","actingUser","isSystemAdmin","roles","UserRow","userRoles","FormatAudit","action","auditDesc","oauthInfo","clientIdField","oauthTokenFailure","token","webhookInfo","licenseInfo","AuditTable","ids","audits","getMissingProfilesByIds","userIdContent","ipContent","sessionContent","AccessHistoryModal","getUserAudits","onShow","content","userAudits","bsSize","any","getCurrentUserAudits","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","getMonthLong","time","os","browser","ActivityLog","submitRevoke","session","device_id","includes","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","devicePlatform","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","altId","modalContent","closest","revokeSession","getSessions","activityList","sessions","reduce","array","getUserSessions","getCurrentLocale","MfaSection","getHistory","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","UserUtils","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","linkTokens","linkAPI","onKeyPress","saveTokenKeyPress","btnClass","savingMessage","stopCreatingToken","additionalClassName","startCreatingToken","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","getMe","appId","deauthorizeOAuthApp","filter","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","openidOption","ldapOption","samlOption","enableSignUpWithGitLab","Link","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLdap","enableSaml","enableSignUpWithEmail","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","ShowUnreadsCategory","showUnreadsCategory","shouldShowUnreadsCategory","limits","LimitVisibleGMsDMs","limit","find","dmGmLimit","getVisibleDmGmLimit","UserSettingsSidebar","UserSettings","activeTab","WarningIcon","deviceTimezone","currentTimezone","newTimezoneExists"],"sourceRoot":""}