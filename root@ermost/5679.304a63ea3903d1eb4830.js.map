{"version":3,"file":"5679.304a63ea3903d1eb4830.js","mappings":"8NAuBA,MAAMA,EAAa,IAAmD,IAAlD,IAACC,EAAG,UAAEC,EAAS,QAAEC,GAAe,EAChD,MAAM,cAACC,IAAiBC,EAAAA,EAAAA,WAExB,OACI,yBACIC,GAAG,cACHJ,UAAWK,IAAW,gBAAiBL,IAEvC,kBAAC,EAAAM,KAAI,CACDL,QAASA,EACTM,GAAIR,GAEJ,0BACIK,GAAG,mBACHJ,UAAU,yBACVQ,MAAON,EAAc,CAACE,GAAI,qBAAsBK,eAAgB,gBAEpE,kBAAC,EAAAC,iBAAgB,CACbN,GAAG,kBACHK,eAAe,UAGrB,EAEZ,aAlCEV,IAAK,WAELC,UAAS,WAKTC,QAAO,UA4BXH,EAAWa,aAAe,CACtBZ,IAAK,KAGT,S,8nBC3Be,MAAMa,UAA8BC,IAAAA,cAAkC,iDACzE,CACJC,MAAO,KACPC,WAAY,OACf,mBACWF,IAAAA,aAAkC,oBACjCA,IAAAA,aAAmC,yBAE/BG,UACbC,EAAEC,iBAEF,MAAMC,EAAQC,KAAKC,WAAWC,QAASC,MAAMC,OAAOC,cACpD,IAAKN,KAAUO,EAAAA,EAAAA,IAAQP,GASnB,YARAC,KAAKO,SAAS,CACVb,MACI,kBAAC,EAAAJ,iBAAgB,CACbN,GAAG,sBACHK,eAAe,0CAQ/BW,KAAKO,SAAS,CAACb,MAAO,OAEtB,MAAM,KAACc,EAAI,MAAEd,SAAeM,KAAKS,MAAMC,QAAQC,uBAAuBZ,GAClES,GACAR,KAAKO,SAAS,CACVb,MAAO,KACPC,WACI,yBACIX,GAAG,yBACHJ,UAAU,kCAEV,kBAAC,EAAAU,iBAAgB,CACbN,GAAG,qBACHK,eAAe,mEAEnB,6BACI,2BAAIU,IAER,6BACA,kBAAC,EAAAT,iBAAgB,CACbN,GAAG,2BACHK,eAAe,gCAK3BW,KAAKY,UAAUV,UACfF,KAAKY,UAAUV,QAAQW,QAAS,IAE7BnB,GACPM,KAAKO,SAAS,CACVb,MAAOA,EAAMoB,QACbnB,WAAY,MAEpB,GACH,CAEDoB,SACI,IAAIrB,EAAQ,KACRM,KAAKgB,MAAMtB,QACXA,EACI,yBAAKd,UAAU,wBACX,2BAAOA,UAAU,iBAAiBoB,KAAKgB,MAAMtB,SAKzD,IAAIuB,EAAY,aAKhB,OAJIvB,IACAuB,GAAa,cAIb,6BACI,kBAAC,IAAU,MACX,yBAAKrC,UAAU,aACX,yBAAKA,UAAU,0BACX,kBAAC,EAAAU,iBAAgB,CACbN,GAAG,sBACHkC,QAAQ,KACR7B,eAAe,mBAElBW,KAAKgB,MAAMrB,WACZ,0BACIwB,SAAUnB,KAAKoB,eACfC,IAAKrB,KAAKY,WAEV,2BACI,kBAAC,EAAAtB,iBAAgB,CACbN,GAAG,4BACHK,eAAe,yEAGvB,yBAAKT,UAAWqC,GACZ,kBAAC,IAAc,CACXjC,GAAG,0BACHsC,KAAK,QACL1C,UAAU,eACV2C,KAAK,QACLC,YAAa,CACTxC,IAAIyC,EAAAA,EAAAA,GAAE,uBACNpC,eAAgB,SAEpBgC,IAAKrB,KAAKC,WACVyB,WAAW,QACXC,WAAW,KAGlBjC,EACD,4BACIV,GAAG,sBACHsC,KAAK,SACL1C,UAAU,mBAEV,kBAAC,EAAAU,iBAAgB,CACbN,GAAG,sBACHK,eAAe,0BAQ/C,EACH,EAlIoBG,EAAqB,aAVtCkB,QAAS,WACLC,uBAAyB,IAAD,kBAAF,aCA9B,MAMA,GAAeiB,EAAAA,EAAAA,SAAQ,MANKC,IAAiC,CACzDnB,SAASoB,EAAAA,EAAAA,oBAAiE,CACtEnB,uBAAsBA,EAAAA,IACvBkB,MAGP,CAAiDrC,E","sources":["webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/password_reset_send_link/password_reset_send_link.tsx","webpack://mattermost-webapp/./components/password_reset_send_link/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    className?: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nconst BackButton = ({url, className, onClick}: Props): JSX.Element => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div\n            id='back_button'\n            className={classNames('signup-header', className)}\n        >\n            <Link\n                onClick={onClick}\n                to={url}\n            >\n                <span\n                    id='back_button_icon'\n                    className='fa fa-1x fa-angle-left'\n                    title={formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n                />\n                <FormattedMessage\n                    id='web.header.back'\n                    defaultMessage='Back'\n                />\n            </Link>\n        </div>\n    );\n};\nBackButton.defaultProps = {\n    url: '/',\n};\n\nexport default BackButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ServerError} from '@mattermost/types/errors';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport BackButton from 'components/common/back_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n';\n\ninterface Props {\n    actions: {\n        sendPasswordResetEmail: (email: string) => Promise<{data: any; error: ServerError}>;\n    };\n}\n\ninterface State {\n    error: React.ReactNode;\n    updateText: React.ReactNode;\n}\n\nexport default class PasswordResetSendLink extends React.PureComponent<Props, State> {\n    state = {\n        error: null,\n        updateText: null,\n    };\n    resetForm = React.createRef<HTMLFormElement>();\n    emailInput = React.createRef<HTMLInputElement>();\n\n    handleSendLink = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const email = this.emailInput.current!.value.trim().toLowerCase();\n        if (!email || !isEmail(email)) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='password_send.error'\n                        defaultMessage='Please enter a valid email address.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        // End of error checking clear error\n        this.setState({error: null});\n\n        const {data, error} = await this.props.actions.sendPasswordResetEmail(email);\n        if (data) {\n            this.setState({\n                error: null,\n                updateText: (\n                    <div\n                        id='passwordResetEmailSent'\n                        className='reset-form alert alert-success'\n                    >\n                        <FormattedMessage\n                            id='password_send.link'\n                            defaultMessage='If the account exists, a password reset email will be sent to:'\n                        />\n                        <div>\n                            <b>{email}</b>\n                        </div>\n                        <br/>\n                        <FormattedMessage\n                            id='password_send.checkInbox'\n                            defaultMessage='Please check your inbox.'\n                        />\n                    </div>\n                ),\n            });\n            if (this.resetForm.current) {\n                this.resetForm.current.hidden = true;\n            }\n        } else if (error) {\n            this.setState({\n                error: error.message,\n                updateText: null,\n            });\n        }\n    };\n\n    render() {\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='form-group has-error'>\n                    <label className='control-label'>{this.state.error}</label>\n                </div>\n            );\n        }\n\n        let formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <FormattedMessage\n                            id='password_send.title'\n                            tagName='h1'\n                            defaultMessage='Password Reset'\n                        />\n                        {this.state.updateText}\n                        <form\n                            onSubmit={this.handleSendLink}\n                            ref={this.resetForm}\n                        >\n                            <p>\n                                <FormattedMessage\n                                    id='password_send.description'\n                                    defaultMessage='To reset your password, enter the email address you used to sign up'\n                                />\n                            </p>\n                            <div className={formClass}>\n                                <LocalizedInput\n                                    id='passwordResetEmailInput'\n                                    type='email'\n                                    className='form-control'\n                                    name='email'\n                                    placeholder={{\n                                        id: t('password_send.email'),\n                                        defaultMessage: 'Email',\n                                    }}\n                                    ref={this.emailInput}\n                                    spellCheck='false'\n                                    autoFocus={true}\n                                />\n                            </div>\n                            {error}\n                            <button\n                                id='passwordResetButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='password_send.reset'\n                                    defaultMessage='Reset my password'\n                                />\n                            </button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {sendPasswordResetEmail} from 'mattermost-redux/actions/users';\nimport {GenericAction, ActionFunc} from 'mattermost-redux/types/actions';\nimport {ServerError} from '@mattermost/types/errors';\n\nimport PasswordResetSendLink from './password_reset_send_link';\n\ntype Actions = {\n    sendPasswordResetEmail: (emal: string) => Promise<{data: any; error: ServerError}>;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n        sendPasswordResetEmail,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(PasswordResetSendLink);\n"],"names":["BackButton","url","className","onClick","formatMessage","useIntl","id","classNames","Link","to","title","defaultMessage","FormattedMessage","defaultProps","PasswordResetSendLink","React","error","updateText","async","e","preventDefault","email","this","emailInput","current","value","trim","toLowerCase","isEmail","setState","data","props","actions","sendPasswordResetEmail","resetForm","hidden","message","render","state","formClass","tagName","onSubmit","handleSendLink","ref","type","name","placeholder","t","spellCheck","autoFocus","connect","dispatch","bindActionCreators"],"sourceRoot":""}