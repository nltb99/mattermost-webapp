{"version":3,"file":"3348.484fcac35df43439d023.js","mappings":"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","sources":["webpack://mattermost-webapp/./components/notify_counts/notify_counts.tsx","webpack://mattermost-webapp/./components/notify_counts/index.ts","webpack://mattermost-webapp/./components/channel_header_mobile/collapse_lhs_button/collapse_lhs_button.tsx","webpack://mattermost-webapp/./components/channel_header_mobile/collapse_lhs_button/index.ts","webpack://mattermost-webapp/./components/channel_header_mobile/collapse_rhs_button/collapse_rhs_button.tsx","webpack://mattermost-webapp/./components/channel_header_mobile/collapse_rhs_button/index.ts","webpack://mattermost-webapp/./components/widgets/icons/info_icon.tsx","webpack://mattermost-webapp/./components/channel_header_mobile/channel_info_button/channel_info_button.tsx","webpack://mattermost-webapp/./components/channel_header_mobile/channel_info_button/index.ts","webpack://mattermost-webapp/./components/channel_header_mobile/show_search_button/show_search_button.tsx","webpack://mattermost-webapp/./components/channel_header_mobile/show_search_button/index.ts","webpack://mattermost-webapp/./components/channel_header_mobile/unmute_channel_button/unmute_channel_button.tsx","webpack://mattermost-webapp/./components/channel_header_mobile/unmute_channel_button/index.ts","webpack://mattermost-webapp/./components/channel_header_mobile/channel_header_mobile.tsx","webpack://mattermost-webapp/./components/channel_header_mobile/index.ts","webpack://mattermost-webapp/./components/widgets/icons/menu_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {BasicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\ntype Props = BasicUnreadMeta;\n\nexport default class NotifyCounts extends React.PureComponent<Props> {\n    render() {\n        if (this.props.unreadMentionCount) {\n            return <span className='badge badge-notify'>{this.props.unreadMentionCount}</span>;\n        } else if (this.props.isUnread) {\n            return <span className='badge badge-notify'>{'â€¢'}</span>;\n        }\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUnreadStatusInCurrentTeam, basicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\n\nimport {GlobalState} from 'types/store';\n\nimport NotifyCounts from './notify_counts';\n\nfunction mapStateToProps(state: GlobalState) {\n    return basicUnreadMeta(getUnreadStatusInCurrentTeam(state));\n}\n\nexport default connect(mapStateToProps)(NotifyCounts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport NotifyCounts from 'components/notify_counts';\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\ntype Props = {\n    actions: {\n        toggleLhs: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    };\n}\n\nconst CollapseLhsButton: React.FunctionComponent<Props> = (props: Props) => (\n    <button\n        key='navbar-toggle-sidebar'\n        type='button'\n        className='navbar-toggle'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={props.actions.toggleLhs}\n    >\n        <span className='sr-only'>\n            <FormattedMessage\n                id='navbar.toggle2'\n                defaultMessage='Toggle sidebar'\n            />\n        </span>\n        <MenuIcon className='style--none icon icon__menu icon--sidebarHeaderTextColor'/>\n        <NotifyCounts/>\n    </button>\n);\n\nexport default CollapseLhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {toggle as toggleLhs} from 'actions/views/lhs';\n\nimport CollapseLhsButton from './collapse_lhs_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators({\n        toggleLhs,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseLhsButton);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\ntype Actions = {\n    toggleRhsMenu: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\ntype Props = {\n    actions: Actions;\n}\n\nconst CollapseRhsButton: React.FunctionComponent<Props> = (props: Props) => (\n    <button\n        key='navbar-toggle-menu'\n        type='button'\n        className='navbar-toggle navbar-right__icon menu-toggle pull-right'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={props.actions.toggleRhsMenu}\n    >\n        <MenuIcon/>\n    </button>\n);\n\nexport default CollapseRhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {toggleMenu as toggleRhsMenu} from 'actions/views/rhs';\n\nimport CollapseRhsButton from './collapse_rhs_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators({\n        toggleRhsMenu,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseRhsButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function InfoIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 22 22'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.info', defaultMessage: 'Info Icon'})}\n            >\n                <g\n                    stroke='none'\n                    strokeWidth='1'\n                    fill='inherit'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-388.000000, -18.000000)'\n                        fill='inherit'\n                    >\n                        <g>\n                            <g transform='translate(381.000000, 11.000000)'>\n                                <g transform='translate(7.000000, 7.000000)'>\n                                    <path d='M11,22 C4.92486775,22 0,17.0751322 0,11 C0,4.92486775 4.92486775,0 11,0 C17.0751322,0 22,4.92486775 22,11 C22,17.0751322 17.0751322,22 11,22 Z M11,20.7924685 C16.408231,20.7924685 20.7924685,16.408231 20.7924685,11 C20.7924685,5.59176898 16.408231,1.20753149 11,1.20753149 C5.59176898,1.20753149 1.20753149,5.59176898 1.20753149,11 C1.20753149,16.408231 5.59176898,20.7924685 11,20.7924685 Z M10.1572266,16.0625 L10.1572266,8.69335938 L11.3466797,8.69335938 L11.3466797,16.0625 L10.1572266,16.0625 Z M10.7519531,7.50390625 C10.3417969,7.50390625 10,7.16210938 10,6.75195312 C10,6.33496094 10.3417969,6 10.7519531,6 C11.1689453,6 11.5039062,6.33496094 11.5039062,6.75195312 C11.5039062,7.16210938 11.1689453,7.50390625 10.7519531,7.50390625 Z'/>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport InfoIcon from 'components/widgets/icons/info_icon';\nimport {Channel} from '@mattermost/types/channels';\n\ntype Props = {\n    channel: Channel;\n    actions: {\n        showChannelInfo: (channelId: string) => void;\n    };\n};\n\nconst NavbarInfoButton: React.FunctionComponent<Props> = ({channel, actions}: Props): JSX.Element => (\n    <button\n        className='navbar-toggle navbar-right__icon navbar-info-button pull-right'\n        aria-label={localizeMessage('accessibility.button.Info', 'Info')}\n        onClick={() => actions.showChannelInfo(channel.id)}\n    >\n        <InfoIcon\n            className='icon icon__info'\n            aria-hidden='true'\n        />\n    </button>\n);\n\nexport default NavbarInfoButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {showChannelInfo} from 'actions/views/rhs';\n\nimport ChannelInfoButton from './channel_info_button';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            showChannelInfo,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ChannelInfoButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport SearchIcon from 'components/widgets/icons/search_icon';\n\ntype Actions = {\n    openRHSSearch: () => void;\n}\n\ntype Props = {\n    actions: Actions;\n}\n\nexport default class ShowSearchButton extends React.PureComponent<Props> {\n    handleClick = () => {\n        this.props.actions.openRHSSearch();\n    }\n\n    render() {\n        return (\n            <button\n                type='button'\n                className='navbar-toggle navbar-right__icon navbar-search pull-right'\n                onClick={this.handleClick}\n                aria-label={localizeMessage('accessibility.button.Search', 'Search')}\n            >\n                <SearchIcon\n                    className='icon icon__search'\n                    aria-hidden='true'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {openRHSSearch} from 'actions/views/rhs';\n\nimport ShowSearchButton from './show_search_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators({\n        openRHSSearch,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ShowSearchButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {ChannelNotifyProps} from '@mattermost/types/channels';\n\nimport {NotificationLevels} from 'utils/constants';\n\ntype Actions = {\n    updateChannelNotifyProps: (userId: string, channelId: string, props: ChannelNotifyProps) => void;\n}\n\ntype Props = {\n    user: { id: string };\n    channel: { id: string };\n    actions: Actions;\n}\n\nexport default class UnmuteChannelButton extends React.PureComponent<Props> {\n    handleClick = (): void => {\n        const {\n            user,\n            channel,\n            actions: {\n                updateChannelNotifyProps,\n            },\n        } = this.props;\n\n        updateChannelNotifyProps(user.id, channel.id, {mark_unread: NotificationLevels.ALL} as ChannelNotifyProps);\n    }\n\n    render(): JSX.Element {\n        return (\n            <button\n                type='button'\n                className='navbar-toggle icon icon__mute'\n                onClick={this.handleClick}\n            >\n                <span className='fa fa-bell-slash-o icon'/>\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport UnmuteChannelButton from './unmute_channel_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(UnmuteChannelButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {Channel} from '@mattermost/types/channels';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport {MobileChannelHeaderDropdown} from 'components/channel_header_dropdown';\nimport MobileChannelHeaderPlug from 'plugins/mobile_channel_header_plug';\n\nimport CollapseLhsButton from './collapse_lhs_button';\nimport CollapseRhsButton from './collapse_rhs_button';\nimport ChannelInfoButton from './channel_info_button';\nimport ShowSearchButton from './show_search_button';\nimport UnmuteChannelButton from './unmute_channel_button';\n\ntype Props = {\n    channel?: Channel;\n\n    /**\n     * Relative url for the team, used to redirect if a link in the channel header is clicked\n     */\n    currentRelativeTeamUrl?: string;\n\n    inGlobalThreads?: boolean;\n    inDrafts?: boolean;\n    isMobileView: boolean;\n    isMuted?: boolean;\n    isReadOnly?: boolean;\n    isRHSOpen?: boolean;\n    user: UserProfile;\n    actions: {\n        closeLhs: () => void;\n        closeRhs: () => void;\n        closeRhsMenu: () => void;\n    };\n}\n\nexport default class ChannelHeaderMobile extends React.PureComponent<Props> {\n    componentDidMount() {\n        document.querySelector('.inner-wrap')?.addEventListener('click', this.hideSidebars);\n    }\n\n    componentWillUnmount() {\n        document.querySelector('.inner-wrap')?.removeEventListener('click', this.hideSidebars);\n    }\n\n    hideSidebars = (e: Event) => {\n        if (this.props.isMobileView) {\n            if (this.props.isRHSOpen) {\n                this.props.actions.closeRhs();\n            }\n\n            const target = e.target as HTMLElement | undefined;\n\n            if (target && target.className !== 'navbar-toggle' && target.className !== 'icon-bar') {\n                this.props.actions.closeLhs();\n                this.props.actions.closeRhsMenu();\n            }\n        }\n    }\n\n    render() {\n        const {user, channel, isMuted, inGlobalThreads, inDrafts} = this.props;\n\n        let heading;\n        if (inGlobalThreads) {\n            heading = (\n                <FormattedMessage\n                    id='globalThreads.heading'\n                    defaultMessage='Followed threads'\n                />\n            );\n        } else if (inDrafts) {\n            heading = (\n                <FormattedMessage\n                    id='drafts.heading'\n                    defaultMessage='Drafts'\n                />\n            );\n        } else if (channel) {\n            heading = (\n                <>\n                    <MobileChannelHeaderDropdown/>\n                    {isMuted && (\n                        <UnmuteChannelButton\n                            user={user}\n                            channel={channel}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        return (\n            <nav\n                id='navbar'\n                className='navbar navbar-default navbar-fixed-top'\n                role='navigation'\n            >\n                <div className='container-fluid theme'>\n                    <div className='navbar-header'>\n                        <CollapseLhsButton/>\n                        <div className={classNames('navbar-brand', {GlobalThreads___title: inGlobalThreads})}>\n                            {heading}\n                        </div>\n                        <div className='spacer'/>\n                        {channel && (\n                            <ChannelInfoButton\n                                channel={channel}\n                            />\n                        )}\n                        <ShowSearchButton/>\n                        {channel && (\n                            <MobileChannelHeaderPlug\n                                channel={channel}\n                                isDropdown={false}\n                            />\n                        )}\n                        <CollapseRhsButton/>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Location} from 'history';\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {withRouter, matchPath} from 'react-router-dom';\n\nimport {createSelector} from 'reselect';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {\n    getCurrentChannel,\n    getMyCurrentChannelMembership,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {\n    closeRightHandSide as closeRhs,\n    closeMenu as closeRhsMenu,\n} from 'actions/views/rhs';\nimport {close as closeLhs} from 'actions/views/lhs';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {GlobalState} from 'types/store';\n\nimport ChannelHeaderMobile from './channel_header_mobile';\n\nconst isCurrentChannelMuted = createSelector(\n    'isCurrentChannelMuted',\n    getMyCurrentChannelMembership,\n    (membership) => isChannelMuted(membership),\n);\n\ntype OwnProps = {\n    location: Location;\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isMobileView: getIsMobileView(state),\n    isMuted: isCurrentChannelMuted(state),\n    inGlobalThreads: Boolean(matchPath(ownProps.location.pathname, {path: '/:team/threads/:threadIdentifier?'})),\n    inDrafts: Boolean(matchPath(ownProps.location.pathname, {path: '/:team/drafts'})),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        closeLhs,\n        closeRhs,\n        closeRhsMenu,\n    }, dispatch),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ChannelHeaderMobile));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function MenuIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='16px'\n                height='10px'\n                viewBox='0 0 16 10'\n                version='1.1'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.menu', defaultMessage: 'Menu Icon'})}\n            >\n                <g\n                    stroke='none'\n                    strokeWidth='1'\n                    fill='inherit'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-188.000000, -38.000000)'\n                        fillRule='nonzero'\n                        fill='inherit'\n                    >\n                        <g>\n                            <g>\n                                <g transform='translate(188.000000, 38.000000)'>\n                                    <path d='M15.5,0 C15.776,0 16,0.224 16,0.5 L16,1.5 C16,1.776 15.776,2 15.5,2 L0.5,2 C0.224,2 0,1.776 0,1.5 L0,0.5 C0,0.224 0.224,0 0.5,0 L15.5,0 Z M15.5,4 C15.776,4 16,4.224 16,4.5 L16,5.5 C16,5.776 15.776,6 15.5,6 L0.5,6 C0.224,6 0,5.776 0,5.5 L0,4.5 C0,4.224 0.224,4 0.5,4 L15.5,4 Z M15.5,8 C15.776,8 16,8.224 16,8.5 L16,9.5 C16,9.776 15.776,10 15.5,10 L0.5,10 C0.224,10 0,9.776 0,9.5 L0,8.5 C0,8.224 0.224,8 0.5,8 L15.5,8 Z'/>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        </span>\n    );\n}\n"],"names":["NotifyCounts","React","render","this","props","unreadMentionCount","className","isUnread","connect","state","basicUnreadMeta","getUnreadStatusInCurrentTeam","CollapseLhsButton","key","type","onClick","actions","toggleLhs","FormattedMessage","id","defaultMessage","dispatch","bindActionCreators","CollapseRhsButton","toggleRhsMenu","InfoIcon","formatMessage","useIntl","width","height","viewBox","role","stroke","strokeWidth","fill","fillRule","transform","d","NavbarInfoButton","channel","localizeMessage","showChannelInfo","ChannelInfoButton","ShowSearchButton","openRHSSearch","handleClick","UnmuteChannelButton","user","updateChannelNotifyProps","mark_unread","NotificationLevels","string","ChannelHeaderMobile","e","isMobileView","isRHSOpen","closeRhs","target","closeLhs","closeRhsMenu","componentDidMount","document","querySelector","addEventListener","hideSidebars","componentWillUnmount","removeEventListener","isMuted","inGlobalThreads","inDrafts","heading","classNames","GlobalThreads___title","isDropdown","currentRelativeTeamUrl","bool","isReadOnly","isCurrentChannelMuted","createSelector","getMyCurrentChannelMembership","membership","isChannelMuted","withRouter","ownProps","getCurrentUser","getCurrentChannel","getIsMobileView","Boolean","matchPath","location","pathname","path","MenuIcon","version"],"sourceRoot":""}