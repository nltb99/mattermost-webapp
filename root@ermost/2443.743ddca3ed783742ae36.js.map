{"version":3,"file":"2443.743ddca3ed783742ae36.js","mappings":"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","sources":["webpack://mattermost-webapp/./components/error_page/error_title.tsx","webpack://mattermost-webapp/./components/error_page/messages/cloud_archived.tsx","webpack://mattermost-webapp/./components/error_page/error_message.tsx","webpack://mattermost-webapp/./components/error_page/error_page.tsx","webpack://mattermost-webapp/./components/error_page/index.tsx","webpack://mattermost-webapp/./components/widgets/icons/fa_warning_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    type?: string | null;\n    title: string;\n}\n\nconst ErrorTitle: React.FC<Props> = ({type, title}: Props) => {\n    let errorTitle = null;\n    if (type) {\n        switch (type) {\n        case ErrorPageTypes.LOCAL_STORAGE:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.local_storage.title'\n                    defaultMessage='Cannot Load Mattermost'\n                />\n            );\n            break;\n        case ErrorPageTypes.PERMALINK_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='permalink.error.title'\n                    defaultMessage='Message Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.CLOUD_ARCHIVED:\n            errorTitle = (\n                <FormattedMessage\n                    id='cloud_archived.error.title'\n                    defaultMessage='Message Archived'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_ACCESS_DENIED:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_access_denied.title'\n                    defaultMessage='Authorization Error'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_MISSING_CODE:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_missing_code.title'\n                    defaultMessage='Mattermost Needs Your Help'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL:\n        case ErrorPageTypes.OAUTH_INVALID_PARAM:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_invalid_param.title'\n                    defaultMessage='OAuth Parameter Error'\n                />\n            );\n            break;\n        case ErrorPageTypes.TEAM_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.team_not_found.title'\n                    defaultMessage='Team Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.CHANNEL_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.channel_not_found.title'\n                    defaultMessage='Channel Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.PAGE_NOT_FOUND:\n        default:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.not_found.title'\n                    defaultMessage='Page Not Found'\n                />\n            );\n        }\n    } else if (title) {\n        errorTitle = <>{title}</>;\n    } else {\n        errorTitle = <>{Utils.localizeMessage('error.generic.title', 'Error')}</>;\n    }\n\n    return errorTitle;\n};\n\nexport default ErrorTitle;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {getSubscriptionProductName} from 'mattermost-redux/selectors/entities/cloud';\n\nexport default function CloudArchived() {\n    const planName = useSelector(getSubscriptionProductName);\n    return (\n        <FormattedMessage\n            id='cloud_archived.error.access'\n            defaultMessage='Permalink belongs to a message that has been archived because of {planName} limits. Upgrade to access message again.'\n            values={{\n                planName,\n            }}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nimport ErrorLink from './error_link';\nimport CloudArchived from './messages/cloud_archived';\n\ntype Props = {\n    type?: string | null;\n    message?: string;\n    service?: string;\n    isGuest?: boolean;\n}\n\nconst ErrorMessage: React.FC<Props> = ({type, message, service, isGuest}: Props) => {\n    let errorMessage = null;\n    if (type) {\n        switch (type) {\n        case ErrorPageTypes.LOCAL_STORAGE:\n            errorMessage = (\n                <div>\n                    <FormattedMessage\n                        id='error.local_storage.message'\n                        defaultMessage='Mattermost was unable to load because a setting in your browser prevents the use of its local storage features. To allow Mattermost to load, try the following actions:'\n                    />\n                    <ul>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help1'\n                                defaultMessage='Enable cookies'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help2'\n                                defaultMessage='Turn off private browsing'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help3'\n                                defaultMessage='Use a supported browser (IE 11, Chrome 61+, Firefox 60+, Safari 12+, Edge 42+)'\n                            />\n                        </li>\n                    </ul>\n                </div>\n            );\n            break;\n        case ErrorPageTypes.PERMALINK_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='permalink.error.access'\n                        defaultMessage='Permalink belongs to a deleted message or to a channel to which you do not have access.'\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.CLOUD_ARCHIVED:\n            errorMessage = (\n                <p>\n                    <CloudArchived/>\n                </p>\n            );\n            break;\n        case ErrorPageTypes.TEAM_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.team_not_found.message'\n                        defaultMessage=\"The team you're requesting is private or does not exist. Please contact your Administrator for an invitation.\"\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.CHANNEL_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    {isGuest ? (\n                        <FormattedMessage\n                            id='error.channel_not_found.message_guest'\n                            defaultMessage='Your guest account has no channels assigned. Please contact an administrator.'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='error.channel_not_found.message'\n                            defaultMessage=\"The channel you're requesting is private or does not exist. Please contact an Administrator to be added to the channel.\"\n                        />\n\n                    )}\n                </p>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_MISSING_CODE:\n            errorMessage = (\n                <div>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code'\n                            defaultMessage='The service provider {service} did not provide an authorization code in the redirect URL.'\n                            values={{\n                                service,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.google'\n                            defaultMessage='For {link} make sure your administrator enabled the Google+ API.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.mattermost.com/deployment/sso-google.html'}\n                                        messageId={t('error.oauth_missing_code.google.link')}\n                                        defaultMessage={'Google Apps'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.office365'\n                            defaultMessage='For {link} make sure the administrator of your Microsoft organization has enabled the Mattermost app.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.mattermost.com/deployment/sso-office.html'}\n                                        messageId={t('error.oauth_missing_code.office365.link')}\n                                        defaultMessage={'Office 365'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.gitlab'\n                            defaultMessage='For {link} please make sure you followed the setup instructions.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.mattermost.com/deployment/sso-gitlab.html'}\n                                        messageId={t('error.oauth_missing_code.gitlab.link')}\n                                        defaultMessage={'GitLab'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.forum'\n                            defaultMessage=\"If you reviewed the above and are still having trouble with configuration, you may post in our {link} where we'll be happy to help with issues during setup.\"\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://forum.mattermost.com/c/trouble-shoot'}\n                                        messageId={t('error.oauth_missing_code.forum.link')}\n                                        defaultMessage={'Troubleshooting forum'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                </div>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_ACCESS_DENIED:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.oauth_access_denied'\n                        defaultMessage='You must authorize Mattermost to log in with {service}.'\n                        values={{\n                            service,\n                        }}\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL:\n        case ErrorPageTypes.OAUTH_INVALID_PARAM:\n            errorMessage = (\n                <p>\n                    {message}\n                </p>\n            );\n            break;\n        case ErrorPageTypes.PAGE_NOT_FOUND:\n        default:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.not_found.message'\n                        defaultMessage='The page you were trying to reach does not exist'\n                    />\n                </p>\n            );\n        }\n    } else if (message) {\n        errorMessage = (\n            <p>\n                {message}\n            </p>\n        );\n    } else {\n        errorMessage = (\n            <p>\n                <FormattedMessage\n                    id='error.generic.message'\n                    defaultMessage='An error has occurred.'\n                />\n            </p>\n        );\n    }\n\n    return errorMessage;\n};\n\nexport default ErrorMessage;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {ErrorPageTypes, Constants} from 'utils/constants';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport ErrorTitle from './error_title';\nimport ErrorMessage from './error_message';\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    asymmetricSigningPublicKey?: string;\n    siteName?: string;\n    isGuest?: boolean;\n}\n\nexport default class ErrorPage extends React.PureComponent<Props> {\n    public componentDidMount() {\n        document.body.setAttribute('class', 'sticky error');\n    }\n\n    public componentWillUnmount() {\n        document.body.removeAttribute('class');\n    }\n\n    public render() {\n        const {isGuest} = this.props;\n        const params: URLSearchParams = new URLSearchParams(this.props.location.search);\n        const signature = params.get('s');\n\n        let trustParams = false;\n        if (signature) {\n            params.delete('s');\n\n            const key = this.props.asymmetricSigningPublicKey;\n            const keyPEM = '-----BEGIN PUBLIC KEY-----\\n' + key + '\\n-----END PUBLIC KEY-----';\n\n            const verify = crypto.createVerify('sha256');\n            verify.update('/error?' + params.toString());\n            trustParams = verify.verify(keyPEM, signature, 'base64');\n        }\n\n        const type = params.get('type');\n        const title = (trustParams && params.get('title')) || '';\n        const message = (trustParams && params.get('message')) || '';\n        const service = (trustParams && params.get('service')) || '';\n        const returnTo = (trustParams && params.get('returnTo')) || '';\n\n        let backButton;\n        if (type === ErrorPageTypes.PERMALINK_NOT_FOUND && returnTo) {\n            backButton = (\n                <Link to={returnTo}>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to Mattermost'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.CLOUD_ARCHIVED && returnTo) {\n            backButton = (\n                <Link to={returnTo}>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to Mattermost'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.TEAM_NOT_FOUND) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to {siteName}'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.CHANNEL_NOT_FOUND && isGuest) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.channelNotFound.guest_link'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.CHANNEL_NOT_FOUND) {\n            backButton = (\n                <Link to={params.get('returnTo') as string}>\n                    <FormattedMessage\n                        id='error.channelNotFound.link'\n                        defaultMessage='Back to {defaultChannelName}'\n                        values={{\n                            defaultChannelName: Constants.DEFAULT_CHANNEL_UI_NAME,\n                        }}\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.OAUTH_ACCESS_DENIED || type === ErrorPageTypes.OAUTH_MISSING_CODE) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link_login'\n                        defaultMessage='Back to Login Page'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.OAUTH_INVALID_PARAM || type === ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL) {\n            backButton = null;\n        } else {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to {siteName}'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </Link>\n            );\n        }\n\n        const errorPage = (\n            <div className='container-fluid'>\n                <div className='error__container'>\n                    <div className='error__icon'>\n                        <WarningIcon/>\n                    </div>\n                    <h2 data-testid='errorMessageTitle'>\n                        <ErrorTitle\n                            type={type}\n                            title={title}\n                        />\n                    </h2>\n                    <ErrorMessage\n                        type={type}\n                        message={message}\n                        service={service}\n                        isGuest={isGuest}\n                    />\n                    {backButton}\n                </div>\n            </div>\n        );\n\n        return (\n            <>\n                {errorPage}\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/common';\n\nimport {GlobalState} from 'types/store';\n\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport ErrorPage from './error_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const user = getCurrentUser(state);\n\n    return {\n        siteName: config.SiteName,\n        asymmetricSigningPublicKey: config.AsymmetricSigningPublicKey,\n        isGuest: Boolean(user && isGuest(user.roles)),\n    };\n}\n\nexport default connect(mapStateToProps)(ErrorPage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n"],"names":["ErrorTitle","type","title","errorTitle","ErrorPageTypes","FormattedMessage","id","defaultMessage","Utils","string","CloudArchived","planName","useSelector","getSubscriptionProductName","values","ErrorMessage","message","service","isGuest","errorMessage","link","url","messageId","t","ErrorPage","React","componentDidMount","document","body","setAttribute","componentWillUnmount","removeAttribute","render","this","props","params","URLSearchParams","location","search","signature","get","trustParams","delete","keyPEM","asymmetricSigningPublicKey","verify","crypto","update","toString","returnTo","backButton","Link","to","siteName","defaultChannelName","Constants","errorPage","className","connect","state","config","getConfig","user","getCurrentUser","SiteName","AsymmetricSigningPublicKey","Boolean","roles","WarningIcon","additionalClassName"],"sourceRoot":""}