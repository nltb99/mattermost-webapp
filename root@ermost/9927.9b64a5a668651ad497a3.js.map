{"version":3,"file":"9927.9b64a5a668651ad497a3.js","mappings":"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","sources":["webpack://mattermost-webapp/./components/backstage/components/backstage_navbar.tsx","webpack://mattermost-webapp/./packages/mattermost-redux/src/selectors/entities/integrations.ts","webpack://mattermost-webapp/./components/backstage/components/backstage_list.tsx","webpack://mattermost-webapp/./components/integrations/bots/bot.tsx","webpack://mattermost-webapp/./components/integrations/bots/bots.tsx","webpack://mattermost-webapp/./components/integrations/bots/index.ts","webpack://mattermost-webapp/./components/backstage/components/backstage_header.tsx","webpack://mattermost-webapp/./components/integrations/bots/add_bot/add_bot.tsx","webpack://mattermost-webapp/./components/integrations/bots/add_bot/index.ts","webpack://mattermost-webapp/./images/incoming_webhook.jpg","webpack://mattermost-webapp/./images/oauth_icon.png","webpack://mattermost-webapp/./images/outgoing_webhook.jpg","webpack://mattermost-webapp/./images/slash_command_icon.jpg","webpack://mattermost-webapp/./components/integrations/integration_option.tsx","webpack://mattermost-webapp/./components/integrations/integrations.tsx","webpack://mattermost-webapp/./components/integrations/index.ts","webpack://mattermost-webapp/./components/integrations/delete_integration_link/delete_integration_link.tsx","webpack://mattermost-webapp/./components/integrations/delete_integration_link/index.ts","webpack://mattermost-webapp/./components/emoji/emoji_list_item/delete_emoji_button.tsx","webpack://mattermost-webapp/./components/emoji/emoji_list_item/emoji_list_item.tsx","webpack://mattermost-webapp/./components/emoji/emoji_list_item/index.ts","webpack://mattermost-webapp/./components/emoji/emoji_list/emoji_list.tsx","webpack://mattermost-webapp/./components/emoji/emoji_list/index.ts","webpack://mattermost-webapp/./components/emoji/emoji_page.tsx","webpack://mattermost-webapp/./components/emoji/index.ts","webpack://mattermost-webapp/./components/emoji/add_emoji/add_emoji.tsx","webpack://mattermost-webapp/./components/emoji/add_emoji/index.ts","webpack://mattermost-webapp/./actions/integration_actions.jsx","webpack://mattermost-webapp/./components/copy_text.tsx","webpack://mattermost-webapp/./components/integrations/installed_incoming_webhook.tsx","webpack://mattermost-webapp/./components/integrations/installed_incoming_webhooks/installed_incoming_webhooks.tsx","webpack://mattermost-webapp/./components/integrations/installed_incoming_webhooks/index.ts","webpack://mattermost-webapp/./components/channel_select/channel_select.tsx","webpack://mattermost-webapp/./components/channel_select/index.ts","webpack://mattermost-webapp/./components/integrations/abstract_incoming_webhook.jsx","webpack://mattermost-webapp/./components/integrations/add_incoming_webhook/add_incoming_webhook.tsx","webpack://mattermost-webapp/./components/integrations/add_incoming_webhook/index.ts","webpack://mattermost-webapp/./components/integrations/edit_incoming_webhook/edit_incoming_webhook.tsx","webpack://mattermost-webapp/./components/integrations/edit_incoming_webhook/index.ts","webpack://mattermost-webapp/./components/integrations/installed_outgoing_webhook.tsx","webpack://mattermost-webapp/./components/integrations/installed_outgoing_webhooks/installed_outgoing_webhooks.tsx","webpack://mattermost-webapp/./components/integrations/installed_outgoing_webhooks/index.ts","webpack://mattermost-webapp/./components/integrations/abstract_outgoing_webhook.jsx","webpack://mattermost-webapp/./components/integrations/add_outgoing_webhook/add_outgoing_webhook.tsx","webpack://mattermost-webapp/./components/integrations/add_outgoing_webhook/index.ts","webpack://mattermost-webapp/./components/integrations/edit_outgoing_webhook/edit_outgoing_webhook.tsx","webpack://mattermost-webapp/./components/integrations/edit_outgoing_webhook/index.ts","webpack://mattermost-webapp/./components/integrations/installed_oauth_app/installed_oauth_app.tsx","webpack://mattermost-webapp/./components/integrations/installed_oauth_app/index.ts","webpack://mattermost-webapp/./components/integrations/installed_oauth_apps/installed_oauth_apps.tsx","webpack://mattermost-webapp/./components/integrations/installed_oauth_apps/index.ts","webpack://mattermost-webapp/./components/integrations/abstract_oauth_app.jsx","webpack://mattermost-webapp/./components/integrations/add_oauth_app/add_oauth_app.tsx","webpack://mattermost-webapp/./components/integrations/add_oauth_app/index.ts","webpack://mattermost-webapp/./components/integrations/edit_oauth_app/edit_oauth_app.tsx","webpack://mattermost-webapp/./components/integrations/edit_oauth_app/index.ts","webpack://mattermost-webapp/./components/integrations/installed_command.tsx","webpack://mattermost-webapp/./components/integrations/installed_commands/installed_commands.tsx","webpack://mattermost-webapp/./components/integrations/installed_commands/index.ts","webpack://mattermost-webapp/./components/integrations/abstract_command.jsx","webpack://mattermost-webapp/./components/integrations/add_command/add_command.tsx","webpack://mattermost-webapp/./components/integrations/add_command/index.ts","webpack://mattermost-webapp/./components/integrations/edit_command/edit_command.tsx","webpack://mattermost-webapp/./components/integrations/edit_command/index.ts","webpack://mattermost-webapp/./components/integrations/confirm_integration/confirm_integration.tsx","webpack://mattermost-webapp/./components/integrations/confirm_integration/index.ts","webpack://mattermost-webapp/./components/integrations/commands_container/commands_container.tsx","webpack://mattermost-webapp/./components/integrations/commands_container/index.ts","webpack://mattermost-webapp/./components/backstage/components/backstage_category.tsx","webpack://mattermost-webapp/./components/backstage/components/backstage_section.tsx","webpack://mattermost-webapp/./components/backstage/components/backstage_sidebar.tsx","webpack://mattermost-webapp/./components/backstage/backstage_controller.tsx","webpack://mattermost-webapp/./components/backstage/index.ts","webpack://mattermost-webapp/./components/widgets/icons/fa_search_icon.tsx","webpack://mattermost-webapp/./components/widgets/icons/fa_warning_icon.tsx","webpack://mattermost-webapp/./packages/mattermost-redux/src/actions/bots.ts","webpack://mattermost-webapp/./packages/mattermost-redux/src/selectors/entities/bots.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Team} from '@mattermost/types/teams';\n\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\ntype Props = {\n    team?: Team;\n    siteName?: string;\n}\n\nconst BackstageNavbar = ({team, siteName}: Props) => {\n    const teamExists = team?.delete_at === 0;\n\n    return (\n        <div className='backstage-navbar'>\n            <Link\n                className='backstage-navbar__back'\n                to={`/${teamExists ? team?.name : ''}`}\n            >\n                <BackIcon/>\n                <span>\n                    {teamExists ? (\n                        <FormattedMessage\n                            id='backstage_navbar.backToMattermost'\n                            defaultMessage='Back to {siteName}'\n                            values={{siteName: siteName ?? team?.name}}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='backstage_navbar.back'\n                            defaultMessage='Back'\n                        />\n                    )}\n                </span>\n            </Link>\n        </div>\n    );\n};\n\nexport default BackstageNavbar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\n\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {OutgoingWebhook, Command} from '@mattermost/types/integrations';\nimport {GlobalState} from '@mattermost/types/store';\nimport {IDMappedObjects} from '@mattermost/types/utilities';\n\nimport {appsEnabled} from './apps';\n\nexport function getIncomingHooks(state: GlobalState) {\n    return state.entities.integrations.incomingHooks;\n}\n\nexport function getOutgoingHooks(state: GlobalState) {\n    return state.entities.integrations.outgoingHooks;\n}\n\nexport function getCommands(state: GlobalState) {\n    return state.entities.integrations.commands;\n}\n\nexport function getOAuthApps(state: GlobalState) {\n    return state.entities.integrations.oauthApps;\n}\n\nexport const getAppsOAuthAppIDs: (state: GlobalState) => string[] = createSelector(\n    'getAppsOAuthAppIDs',\n    appsEnabled,\n    (state: GlobalState) => state.entities.integrations.appsOAuthAppIDs,\n    (apps, ids) => {\n        return apps ? ids : [];\n    },\n);\n\nexport const getAppsBotIDs: (state: GlobalState) => string[] = createSelector(\n    'getAppsBotIDs',\n    appsEnabled,\n    (state: GlobalState) => state.entities.integrations.appsBotIDs,\n    (apps, ids) => {\n        return apps ? ids : [];\n    },\n);\n\nexport function getSystemCommands(state: GlobalState) {\n    return state.entities.integrations.systemCommands;\n}\n\n/**\n * get outgoing hooks in current team\n */\nexport const getOutgoingHooksInCurrentTeam: (state: GlobalState) => OutgoingWebhook[] = createSelector(\n    'getOutgoingHooksInCurrentTeam',\n    getCurrentTeamId,\n    getOutgoingHooks,\n    (teamId, hooks) => {\n        return Object.values(hooks).filter((o) => o.team_id === teamId);\n    },\n);\n\nexport const getAllCommands: (state: GlobalState) => IDMappedObjects<Command> = createSelector(\n    'getAllCommands',\n    getCommands,\n    getSystemCommands,\n    (commands, systemCommands) => {\n        return {\n            ...commands,\n            ...systemCommands,\n        };\n    },\n);\n\nexport const getAutocompleteCommandsList: (state: GlobalState) => Command[] = createSelector(\n    'getAutocompleteCommandsList',\n    getAllCommands,\n    getCurrentTeamId,\n    (commands, currentTeamId) => {\n        return Object.values(commands).filter((command) => {\n            return command && (!command.team_id || command.team_id === currentTeamId) && command.auto_complete;\n        }).sort((a, b) => a.display_name.localeCompare(b.display_name));\n    },\n);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, ReactNode, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport LoadingScreen from 'components/loading_screen';\nimport SearchIcon from 'components/widgets/icons/fa_search_icon';\n\ntype Props = {\n    children?: ReactNode | ((filter: string) => void);\n    header: ReactNode;\n    addLink?: string;\n    addText?: ReactNode;\n    addButtonId?: string;\n    emptyText?: ReactNode;\n    emptyTextSearch?: JSX.Element;\n    helpText?: ReactNode;\n    loading: boolean;\n    searchPlaceholder?: string;\n};\n\nconst BackstageList = ({searchPlaceholder = localizeMessage('backstage_list.search', 'Search'), ...remainingProps}: Props) => {\n    const [filter, setFilter] = useState('');\n\n    const updateFilter = (e: ChangeEvent<HTMLInputElement>) => setFilter(e.target.value);\n\n    const filterLowered = filter.toLowerCase();\n\n    let children;\n    if (remainingProps.loading) {\n        children = <LoadingScreen/>;\n    } else {\n        children = remainingProps.children;\n        let hasChildren = true;\n        if (typeof children === 'function') {\n            [children, hasChildren] = children(filterLowered);\n        }\n        children = React.Children.map(children, (child) => {\n            return React.cloneElement(child, {filterLowered});\n        });\n        if (children.length === 0 || !hasChildren) {\n            if (!filterLowered) {\n                if (remainingProps.emptyText) {\n                    children = (\n                        <div className='backstage-list__item backstage-list__empty'>\n                            {remainingProps.emptyText}\n                        </div>\n                    );\n                }\n            } else if (remainingProps.emptyTextSearch) {\n                children = (\n                    <div\n                        className='backstage-list__item backstage-list__empty'\n                        id='emptySearchResultsMessage'\n                    >\n                        {React.cloneElement(remainingProps.emptyTextSearch, {values: {searchTerm: filterLowered}})}\n                    </div>\n                );\n            }\n        }\n    }\n\n    let addLink = null;\n\n    if (remainingProps.addLink && remainingProps.addText) {\n        addLink = (\n            <Link\n                className='add-link'\n                to={remainingProps.addLink}\n            >\n                <button\n                    type='button'\n                    className='btn btn-primary'\n                    id={remainingProps.addButtonId}\n                >\n                    <span>\n                        {remainingProps.addText}\n                    </span>\n                </button>\n            </Link>\n        );\n    }\n\n    return (\n        <div className='backstage-content'>\n            <div className='backstage-header'>\n                <h1>\n                    {remainingProps.header}\n                </h1>\n                {addLink}\n            </div>\n            <div className='backstage-filters'>\n                <div className='backstage-filter__search'>\n                    <SearchIcon/>\n                    <input\n                        type='search'\n                        className='form-control'\n                        placeholder={searchPlaceholder}\n                        value={filter}\n                        onChange={updateFilter}\n                        style={style.search}\n                        id='searchInput'\n                    />\n                </div>\n            </div>\n            <span className='backstage-list__help'>\n                {remainingProps.helpText}\n            </span>\n            <div className='backstage-list'>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nconst style = {\n    search: {flexGrow: 0, flexShrink: 0},\n};\n\nexport default BackstageList;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, SyntheticEvent, ReactNode} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {Bot as BotType} from '@mattermost/types/bots';\nimport {UserProfile, UserAccessToken} from '@mattermost/types/users';\nimport {Team} from '@mattermost/types/teams';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport Markdown from 'components/markdown';\nimport SaveButton from 'components/save_button';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport * as Utils from 'utils/utils';\n\nexport function matchesFilter(bot: BotType, filter?: string, owner?: UserProfile): boolean {\n    if (!filter) {\n        return true;\n    }\n    const username = bot.username || '';\n    const description = bot.description || '';\n    const displayName = bot.display_name || '';\n\n    let ownerUsername = 'plugin';\n    if (owner && owner.username) {\n        ownerUsername = owner.username;\n    }\n    return !(username.toLowerCase().indexOf(filter) === -1 &&\n        displayName.toLowerCase().indexOf(filter) === -1 &&\n        description.toLowerCase().indexOf(filter) === -1 &&\n        ownerUsername.toLowerCase().indexOf(filter) === -1);\n}\n\ntype Props = {\n\n    /**\n    *  Bot that we are displaying\n    */\n    bot: BotType;\n\n    /**\n    * Owner of the bot we are displaying\n    */\n    owner?: UserProfile;\n\n    /**\n    * User of the bot we are displaying\n    */\n    user: UserProfile;\n\n    /**\n    * The access tokens of the bot user\n    */\n    accessTokens: Record<string, UserAccessToken>;\n\n    /**\n    * String used for filtering bot items\n    */\n    filter?: string;\n\n    /**\n     * Determine whether this bot is managed by the app framework\n     */\n    fromApp: boolean;\n\n    actions: {\n\n        /**\n        * Disable a bot\n        */\n        disableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n        * Enable a bot\n        */\n        enableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n        * Access token managment\n        */\n        createUserAccessToken: (userId: string, description: string) => Promise<{\n            data: {token: string; description: string; id: string; is_active: boolean} | null;\n            error?: Error;\n        }>;\n\n        revokeUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n        enableUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n        disableUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n    };\n\n    /**\n    *  Only used for routing since backstage is team based.\n    */\n    team: Team;\n}\n\ntype State = {\n    confirmingId: string;\n    creatingTokenState: string;\n    token: UserAccessToken | Record<string, any>;\n    error: ReactNode;\n}\n\nexport default class Bot extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            confirmingId: '',\n            creatingTokenState: 'CLOSED',\n            token: {},\n            error: '',\n        };\n    }\n\n    enableBot = (): void => {\n        this.props.actions.enableBot(this.props.bot.user_id);\n    }\n\n    disableBot = (): void => {\n        this.props.actions.disableBot(this.props.bot.user_id);\n    }\n\n    enableUserAccessToken = (id: string): void => {\n        this.props.actions.enableUserAccessToken(id);\n    }\n\n    disableUserAccessToken = (id: string): void => {\n        this.props.actions.disableUserAccessToken(id);\n    }\n\n    confirmRevokeToken = (id: string): void => {\n        this.setState({confirmingId: id});\n    }\n\n    revokeTokenConfirmed = (): void => {\n        this.props.actions.revokeUserAccessToken(this.state.confirmingId);\n        this.closeConfirm();\n    }\n\n    closeConfirm = (): void => {\n        this.setState({confirmingId: ''});\n    }\n\n    openCreateToken = (): void => {\n        this.setState({\n            creatingTokenState: 'OPEN',\n            token: {\n                description: '',\n            },\n        });\n    }\n\n    closeCreateToken = (): void => {\n        this.setState({\n            creatingTokenState: 'CLOSED',\n            token: {\n                description: '',\n            },\n        });\n    }\n\n    handleUpdateDescription = (e: ChangeEvent<HTMLInputElement>): void => {\n        const target = e.target as HTMLInputElement;\n        this.setState({\n            token: Object.assign({}, this.state.token, {description: target.value}),\n        });\n    }\n\n    handleCreateToken = async (e: SyntheticEvent): Promise<void> => {\n        e.preventDefault();\n\n        if (this.state.token.description === '') {\n            this.setState({error: (\n                <FormattedMessage\n                    id='bot.token.error.description'\n                    defaultMessage='Please enter a description.'\n                />\n            )});\n            return;\n        }\n\n        const {data, error} = await this.props.actions.createUserAccessToken(this.props.bot.user_id, this.state.token.description);\n        if (data) {\n            this.setState({creatingTokenState: 'CREATED', token: data});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    }\n\n    public render(): JSX.Element | null {\n        const username = this.props.bot.username || '';\n        const description = this.props.bot.description || '';\n        const displayName = this.props.bot.display_name || '';\n\n        let ownerUsername = 'plugin';\n        if (this.props.fromApp) {\n            ownerUsername = 'Apps Framework';\n        } else if (this.props.owner && this.props.owner.username) {\n            ownerUsername = this.props.owner.username;\n        }\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n        if (!matchesFilter(this.props.bot, filter, this.props.owner)) {\n            return null;\n        }\n\n        const tokenList = [];\n        Object.values(this.props.accessTokens).forEach((token) => {\n            let activeLink;\n            let disableClass = '';\n            let disabledText;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.disableUserAccessToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                disableClass = 'light';\n                disabledText = (\n                    <span className='mr-2 light'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.enableUserAccessToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='bot-list__item'\n                >\n                    <div className='item-details__row d-flex justify-content-between'>\n                        <div className={disableClass}>\n                            <div className='whitespace--nowrap overflow--ellipsis'>\n                                <b>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.tokenDesc'\n                                        defaultMessage='Token Description: '\n                                    />\n                                </b>\n                                {token.description}\n                            </div>\n                            <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                                <b>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.tokenId'\n                                        defaultMessage='Token ID: '\n                                    />\n                                </b>\n                                {token.id}\n                            </div>\n                        </div>\n                        <div>\n                            {disabledText}\n                            {activeLink}\n                            {' - '}\n                            <a\n                                id={token.id + '_delete'}\n                                href='#'\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    this.confirmRevokeToken(token.id);\n                                }}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.tokens.delete'\n                                    defaultMessage='Delete'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>,\n            );\n        });\n\n        let options;\n        if (ownerUsername !== 'plugin') {\n            options = (\n                <div className='item-actions'>\n                    <button\n                        id='createToken'\n                        className='style--none color--link'\n                        onClick={this.openCreateToken}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.create_token'\n                            defaultMessage='Create New Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/bots/edit?id=${this.props.bot.user_id}`}>\n                        <FormattedMessage\n                            id='bots.manage.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <button\n                        className='style--none color--link'\n                        onClick={this.disableBot}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.disable'\n                            defaultMessage='Disable'\n                        />\n                    </button>\n                </div>\n            );\n        }\n        if (this.props.bot.delete_at !== 0) {\n            options = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.enableBot}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.enable'\n                            defaultMessage='Enable'\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        if (this.state.creatingTokenState === 'OPEN') {\n            tokenList.push(\n                <div\n                    key={'create'}\n                    className='bot-list__item'\n                >\n                    <div key={'create'}>\n                        <form\n                            className='form-horizontal'\n                            onSubmit={this.handleCreateToken}\n                        >\n                            <div className='row'>\n                                <label className='col-sm-auto control-label'>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.name'\n                                        defaultMessage='Token Description: '\n                                    />\n                                </label>\n                                <div className='col-sm-4'>\n                                    <input\n                                        autoFocus={true}\n                                        className='form-control form-sm'\n                                        type='text'\n                                        maxLength={64}\n                                        value={this.state.token.description}\n                                        onChange={this.handleUpdateDescription}\n                                    />\n                                </div>\n                            </div>\n                            <div>\n                                <div className='pt-2 pb-2'>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.nameHelp'\n                                        defaultMessage='Enter a description for your token to remember what it does.'\n                                    />\n                                </div>\n                                <label\n                                    id='clientError'\n                                    className='has-error is-empty'\n                                >\n                                    {this.state.error}\n                                </label>\n                                <div className='mt-2'>\n                                    <SaveButton\n                                        btnClass='btn-sm btn-primary'\n                                        savingMessage={\n                                            <FormattedMessage\n                                                id='user.settings.tokens.save'\n                                                defaultMessage='Save'\n                                            />\n                                        }\n                                        saving={false}\n                                    />\n                                    <button\n                                        className='btn btn-sm btn-link'\n                                        onClick={this.closeCreateToken}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.tokens.cancel'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>,\n            );\n        } else if (this.state.creatingTokenState === 'CREATED') {\n            tokenList.push(\n                <div\n                    key={'created'}\n                    className='bot-list__item alert alert-warning'\n                >\n                    <div className='mb-2'>\n                        <WarningIcon additionalClassName='mr-2'/>\n                        <FormattedMessage\n                            id='user.settings.tokens.copy'\n                            defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                        />\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.token.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.token.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.token.token}\n                    </strong>\n                    <div className='mt-2'>\n                        <button\n                            className='btn btn-sm btn-primary'\n                            onClick={this.closeCreateToken}\n                        >\n                            <FormattedMessage\n                                id='bot.create_token.close'\n                                defaultMessage='Close'\n                            />\n                        </button>\n                    </div>\n                </div>,\n            );\n        }\n\n        const imageURL = Utils.imageURLForUser(this.props.user.id, this.props.user.last_picture_update);\n\n        return (\n            <div className='backstage-list__item'>\n                <div className={'bot-list-img-container'}>\n                    <img\n                        className={'bot-list-img'}\n                        alt={'bot image'}\n                        src={imageURL}\n                    />\n                </div>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {displayName + ' (@' + username + ')'}\n                        </strong>\n                        {options}\n                    </div>\n                    <div className='bot-details__description'>\n                        <Markdown message={description}/>\n                    </div>\n                    <div className='light small'>\n                        <FormattedMessage\n                            id='bots.managed_by'\n                            defaultMessage='Managed by '\n                        />\n                        {ownerUsername}\n                    </div>\n                    <div className='bot-list is-empty'>\n                        {tokenList}\n                    </div>\n                </div>\n                <ConfirmModal\n                    title={\n                        <FormattedMessage\n                            id='bots.token.delete'\n                            defaultMessage='Delete Token'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='bots.token.confirm_text'\n                            defaultMessage='Are you sure you want to delete the token?'\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='bots.token.confirm'\n                            defaultMessage='Delete'\n                        />\n                    }\n                    show={this.state.confirmingId !== ''}\n                    onConfirm={this.revokeTokenConfirmed}\n                    onCancel={this.closeConfirm}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Bot as BotType} from '@mattermost/types/bots';\nimport {RelationOneToOne} from '@mattermost/types/utilities';\nimport {UserProfile, UserAccessToken} from '@mattermost/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {Team} from '@mattermost/types/teams';\n\nimport {getSiteURL} from 'utils/url';\nimport * as Utils from 'utils/utils';\nimport Constants from 'utils/constants';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport Bot, {matchesFilter} from './bot';\n\ntype Props = {\n\n    /**\n    *  Map from botUserId to bot.\n    */\n    bots: Record<string, BotType>;\n\n    /**\n     * List of bot IDs managed by the app framework\n     */\n    appsBotIDs: string[];\n\n    /**\n     * Whether apps framework is enabled\n     */\n    appsEnabled: boolean;\n\n    /**\n    *  Map from botUserId to accessTokens.\n    */\n    accessTokens?: RelationOneToOne<UserProfile, Record<string, UserAccessToken>>;\n\n    /**\n    *  Map from botUserId to owner.\n    */\n    owners: Record<string, UserProfile>;\n\n    /**\n    *  Map from botUserId to user.\n    */\n    users: Record<string, UserProfile>;\n    createBots?: boolean;\n\n    actions: {\n\n        /**\n         * Ensure we have bot accounts\n         */\n        loadBots: (page?: number, perPage?: number) => Promise<{data: BotType[]; error?: Error}>;\n\n        /**\n        * Load access tokens for bot accounts\n        */\n        getUserAccessTokensForUser: (userId: string, page?: number, perPage?: number) => void;\n\n        /**\n        * Access token managment\n        */\n        createUserAccessToken: (userId: string, description: string) => Promise<{\n            data: {token: string; description: string; id: string; is_active: boolean} | null;\n            error?: Error;\n        }>;\n\n        revokeUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n        enableUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n        disableUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n\n        /**\n        * Load owner of bot account\n        */\n        getUser: (userId: string) => void;\n\n        /**\n        * Disable a bot\n        */\n        disableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n        * Enable a bot\n        */\n        enableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n         * Load bot IDs managed by the apps\n         */\n        fetchAppsBotIDs: () => Promise<ActionResult>;\n    };\n\n    /**\n    *  Only used for routing since backstage is team based.\n    */\n    team: Team;\n}\n\ntype State = {\n    loading: boolean;\n}\n\nexport default class Bots extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    public componentDidMount(): void {\n        this.props.actions.loadBots(\n            Constants.Integrations.START_PAGE_NUM,\n            parseInt(Constants.Integrations.PAGE_SIZE, 10),\n        ).then(\n            (result) => {\n                if (result.data) {\n                    const promises = [];\n\n                    for (const bot of result.data) {\n                        // We don't need to wait for this and we need to accept failure in the case where bot.owner_id is a plugin id\n                        this.props.actions.getUser(bot.owner_id);\n\n                        // We want to wait for these.\n                        promises.push(this.props.actions.getUser(bot.user_id));\n                        promises.push(this.props.actions.getUserAccessTokensForUser(bot.user_id));\n                    }\n\n                    Promise.all(promises).then(() => {\n                        this.setState({loading: false});\n                    });\n                }\n            },\n        );\n        if (this.props.appsEnabled) {\n            this.props.actions.fetchAppsBotIDs();\n        }\n    }\n\n    DisabledSection(props: {hasDisabled: boolean; disabledBots: JSX.Element[]; filter?: string}): JSX.Element | null {\n        if (!props.hasDisabled) {\n            return null;\n        }\n        const botsToDisplay = React.Children.map(props.disabledBots, (child) => {\n            return React.cloneElement(child, {filter: props.filter});\n        });\n        return (\n            <React.Fragment>\n                <div className='bot-disabled'>\n                    <FormattedMessage\n                        id='bots.disabled'\n                        defaultMessage='Disabled'\n                    />\n                </div>\n                <div className='bot-list__disabled'>\n                    {botsToDisplay}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    EnabledSection(props: {enabledBots: JSX.Element[]; filter?: string}): JSX.Element {\n        const botsToDisplay = React.Children.map(props.enabledBots, (child) => {\n            return React.cloneElement(child, {filter: props.filter});\n        });\n        return (\n            <div>\n                {botsToDisplay}\n            </div>\n        );\n    }\n\n    botToJSX = (bot: BotType): JSX.Element => {\n        return (\n            <Bot\n                key={bot.user_id}\n                bot={bot}\n                owner={this.props.owners[bot.user_id]}\n                user={this.props.users[bot.user_id]}\n                accessTokens={(this.props.accessTokens && this.props.accessTokens[bot.user_id]) || {}}\n                actions={this.props.actions}\n                team={this.props.team}\n                fromApp={this.props.appsBotIDs.includes(bot.user_id)}\n            />\n        );\n    };\n\n    bots = (filter?: string): Array<boolean | JSX.Element> => {\n        const bots = Object.values(this.props.bots).sort((a, b) => a.username.localeCompare(b.username));\n        const match = (bot: BotType) => matchesFilter(bot, filter, this.props.owners[bot.user_id]);\n        const enabledBots = bots.filter((bot) => bot.delete_at === 0).filter(match).map(this.botToJSX);\n        const disabledBots = bots.filter((bot) => bot.delete_at > 0).filter(match).map(this.botToJSX);\n        const sections = (\n            <div key='sections'>\n                <this.EnabledSection\n                    enabledBots={enabledBots}\n                />\n                <this.DisabledSection\n                    hasDisabled={disabledBots.length > 0}\n                    disabledBots={disabledBots}\n                />\n            </div>\n        );\n\n        return [sections, enabledBots.length > 0 || disabledBots.length > 0];\n    }\n\n    public render(): JSX.Element {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='bots.manage.header'\n                        defaultMessage='Bot Accounts'\n                    />\n                }\n                addText={this.props.createBots &&\n                    <FormattedMessage\n                        id='bots.manage.add'\n                        defaultMessage='Add Bot Account'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/bots/add'}\n                addButtonId='addBotAccount'\n                emptyText={\n                    <FormattedMessage\n                        id='bots.manage.empty'\n                        defaultMessage='No bot accounts found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='bots.manage.emptySearch'\n                        defaultMessage='No bot accounts match **{searchTerm}**'\n                    />\n                }\n                helpText={\n                    <React.Fragment>\n                        <FormattedMessage\n                            id='bots.manage.help1'\n                            defaultMessage='Use {botAccounts} to integrate with Mattermost through plugins or the API. Bot accounts are available to everyone on your server. '\n                            values={{\n                                botAccounts: (\n                                    <a\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://mattermost.com/pl/default-bot-accounts'\n                                    >\n                                        <FormattedMessage\n                                            id='bots.manage.bot_accounts'\n                                            defaultMessage='Bot Accounts'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                        <FormattedMarkdownMessage\n                            id='bots.manage.help2'\n                            defaultMessage={'Enable bot account creation in the [System Console]({siteURL}/admin_console/integrations/bot_accounts).'}\n                            values={{\n                                siteURL: getSiteURL(),\n                            }}\n                        />\n                    </React.Fragment>\n                }\n                searchPlaceholder={Utils.localizeMessage('bots.manage.search', 'Search Bot Accounts')}\n                loading={this.state.loading}\n            >\n                {this.bots}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getExternalBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {loadBots, disableBot, enableBot} from 'mattermost-redux/actions/bots';\nimport {getAppsBotIDs as fetchAppsBotIDs} from 'mattermost-redux/actions/integrations';\nimport {getAppsBotIDs} from 'mattermost-redux/selectors/entities/integrations';\nimport {createUserAccessToken, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken, getUserAccessTokensForUser, getUser} from 'mattermost-redux/actions/users';\nimport * as UserSelectors from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {GenericAction, ActionResult, ActionFunc} from 'mattermost-redux/types/actions';\nimport {Bot as BotType} from '@mattermost/types/bots';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport {appsEnabled} from 'mattermost-redux/selectors/entities/apps';\n\nimport Bots from './bots';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const createBots = config.EnableBotAccountCreation === 'true';\n    const bots = getExternalBotAccounts(state);\n    const botValues = Object.values(bots);\n    const owners = botValues.\n        reduce((result: Record<string, UserProfile>, bot: BotType) => {\n            result[bot.user_id] = UserSelectors.getUser(state, bot.owner_id);\n            return result;\n        }, {});\n    const users = botValues.\n        reduce((result: Record<string, UserProfile>, bot: BotType) => {\n            result[bot.user_id] = UserSelectors.getUser(state, bot.user_id);\n            return result;\n        }, {});\n\n    return {\n        createBots,\n        bots,\n        accessTokens: state.entities.admin.userAccessTokensByUser,\n        owners,\n        users,\n        appsBotIDs: getAppsBotIDs(state),\n        appsEnabled: appsEnabled(state),\n    };\n}\n\ntype Actions = {\n    fetchAppsBotIDs: () => Promise<{data: string[]}>;\n    loadBots: (page?: number, perPage?: number) => Promise<{data: BotType[]; error?: Error}>;\n    getUserAccessTokensForUser: (userId: string, page?: number, perPage?: number) => void;\n    createUserAccessToken: (userId: string, description: string) => Promise<{\n        data: {token: string; description: string; id: string; is_active: boolean} | null;\n        error?: Error;\n    }>;\n    revokeUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n    enableUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n    disableUserAccessToken: (tokenId: string) => Promise<{data: string; error?: Error}>;\n    getUser: (userId: string) => void;\n    disableBot: (userId: string) => Promise<ActionResult>;\n    enableBot: (userId: string) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            fetchAppsBotIDs,\n            loadBots,\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            getUser,\n            disableBot,\n            enableBot,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bots);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    children?: ReactNode;\n}\n\nconst BackstageHeader = ({children}: Props) => {\n    const childrenElements: ReactNode[] = [];\n\n    React.Children.forEach(children, (child, index) => {\n        if (index !== 0) {\n            childrenElements.push(\n                <span\n                    key={'divider' + index}\n                    className='backstage-header__divider'\n                >\n                    <LocalizedIcon\n                        className='fa fa-angle-right'\n                        title={{id: t('generic_icons.breadcrumb'), defaultMessage: 'Breadcrumb Icon'}}\n                    />\n                </span>,\n            );\n        }\n\n        childrenElements.push(child);\n    });\n\n    return (\n        <div className='backstage-header'>\n            <h1>\n                {childrenElements}\n            </h1>\n        </div>\n    );\n};\n\nexport default BackstageHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, FormEvent} from 'react';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as FileUtils from 'utils/file_utils';\n\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {General} from 'mattermost-redux/constants';\n\nimport BotDefaultIcon from 'images/bot_default_icon.png';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Tooltip from 'components/tooltip';\nimport SpinnerButton from 'components/spinner_button';\nimport FormError from 'components/form_error';\n\nimport {getHistory} from 'utils/browser_history';\nimport {AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport {Team} from '@mattermost/types/teams';\nimport {Bot, BotPatch} from '@mattermost/types/bots';\nimport {UserProfile} from '@mattermost/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nconst roleOptionSystemAdmin = 'System Admin';\nconst roleOptionMember = 'Member';\n\nexport type Props = {\n\n    /**\n     *  Only used for routing since backstage is team based.\n     */\n    team: Team;\n\n    /**\n     *  Bot to edit (if editing)\n     */\n    bot?: Bot;\n\n    /**\n     *  Bot user\n     */\n    user?: UserProfile;\n\n    /**\n     *  Roles of the bot to edit (if editing)\n     */\n    roles?: string;\n\n    /**\n     * Maximum upload file size (for bot account profile picture)\n     */\n    maxFileSize: number;\n\n    /**\n     * Editing user has the MANAGE_SYSTEM permission\n     */\n    editingUserHasManageSystem: boolean;\n\n    /**\n     * Bot to edit\n     */\n    actions: {\n\n        /**\n         * Creates a new bot account.\n         */\n        createBot: (bot: Partial<Bot>) => ActionResult;\n\n        /**\n         * Patches an existing bot account.\n         */\n        patchBot: (botUserId: string, botPatch: Partial<BotPatch>) => ActionResult;\n\n        /**\n         * Uploads a user profile image\n         */\n        uploadProfileImage: (userId: string, image: File | string) => ActionResult;\n\n        /**\n         * Set profile image to default\n         */\n        setDefaultProfileImage: (userId: string) => ActionResult;\n\n        /**\n         * For creating default access token\n         */\n        createUserAccessToken: (userId: string, description: string) => ActionResult;\n\n        /**\n         * For creating setting bot to system admin or special posting permissions\n         */\n        updateUserRoles: (userId: string, roles: string) => ActionResult;\n    };\n};\n\nexport type State = {\n    username: string;\n    displayName: string | undefined;\n    description: string | undefined;\n    role: string;\n    postAll: boolean;\n    postChannels: boolean;\n    error: JSX.Element | string;\n    adding: boolean;\n    image: string;\n    orientationStyles: {transform: string; transformOrigin: string};\n    pictureFile: File | null | string;\n};\n\nexport default class AddBot extends React.PureComponent<Props, State> {\n    previewBlob: string | null = null;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            error: '',\n            username: this.props.bot ? this.props.bot.username : '',\n            displayName: this.props.bot ? this.props.bot.display_name : '',\n            description: this.props.bot ? this.props.bot.description : '',\n            adding: false,\n            image: BotDefaultIcon,\n            role: UserUtils.isSystemAdmin(this.props.roles || '') ? roleOptionSystemAdmin : roleOptionMember,\n            postAll: this.props.bot ? UserUtils.hasPostAllRole(this.props.roles || '') : false,\n            postChannels: this.props.bot ? UserUtils.hasPostAllPublicRole(this.props.roles || '') : false,\n            orientationStyles: {transform: '', transformOrigin: ''},\n            pictureFile: null,\n        };\n    }\n\n    updateUsername = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateDisplayName = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateRole = (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({\n            role: e.target.value,\n        });\n    }\n\n    updatePostAll = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            postAll: e.target.checked,\n        });\n    }\n\n    updatePostChannels = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            postChannels: e.target.checked,\n        });\n    }\n\n    updatePicture = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            const pictureFile = e.target.files[0];\n            this.previewBlob = URL.createObjectURL(pictureFile);\n\n            const reader = new FileReader();\n            reader.onload = (e2) => {\n                const orientation = FileUtils.getExifOrientation(e2.target?.result as ArrayBuffer);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob || '',\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(pictureFile);\n            e.target.value = '';\n            this.setState({pictureFile});\n        } else {\n            this.setState({pictureFile: null, image: ''});\n        }\n    }\n\n    setDefault = () => {\n        this.setState({pictureFile: 'default', image: BotDefaultIcon});\n    }\n\n    isFile(file: File | string): file is File {\n        return (file as File).size !== undefined;\n    }\n\n    updateRoles = async (data: Bot) => {\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.role === roleOptionSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.postAll) {\n            roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n        } else if (this.state.postChannels) {\n            roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n        }\n\n        const rolesResult = await this.props.actions.updateUserRoles(data.user_id, roles);\n        if (rolesResult) {\n            return rolesResult.error;\n        }\n\n        return null;\n    }\n\n    handleSubmit = async (e: FormEvent<HTMLButtonElement | HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (this.state.adding) {\n            return;\n        }\n\n        if (!this.state.username || this.state.username.length < 3) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='bots.manage.add.invalid_username'\n                        defaultMessage='Usernames have to begin with a lowercase letter and be 3-22 characters long. You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (this.state.pictureFile && this.isFile(this.state.pictureFile)) {\n            if (!AcceptedProfileImageTypes.includes(this.state.pictureFile.type)) {\n                this.setState({\n                    error: (\n                        <FormattedMessage\n                            id='user.settings.general.validImage'\n                            defaultMessage='Only BMP, JPG or PNG images may be used for profile pictures'\n                        />\n                    ),\n                });\n            } else if (this.state.pictureFile.size > this.props.maxFileSize) {\n                this.setState({\n                    error: (\n                        <FormattedMessage\n                            id='user.settings.general.imageTooLarge'\n                            defaultMessage='Unable to upload profile image. File is too large.'\n                        />\n                    ),\n                });\n            }\n        }\n\n        this.setState({\n            adding: true,\n            error: '',\n        });\n\n        const bot = {\n            username: this.state.username.toLowerCase().trim(),\n            display_name: this.state.displayName,\n            description: this.state.description,\n        };\n\n        let data: Bot | undefined;\n        let error;\n        if (this.props.bot) {\n            const result = await this.props.actions.patchBot(this.props.bot.user_id, bot);\n            if (result) {\n                data = result.data;\n                error = result.error;\n            } else {\n                error = Utils.localizeMessage('bot.edit_failed', 'Failed to edit bot');\n            }\n\n            if (!error && data) {\n                if (this.state.pictureFile && this.state.pictureFile !== 'default') {\n                    const imageResult = await this.props.actions.uploadProfileImage(data.user_id, this.state.pictureFile);\n                    error = imageResult.error;\n                } else if (this.state.pictureFile && this.state.pictureFile === 'default') {\n                    await this.props.actions.setDefaultProfileImage(data.user_id);\n                }\n            }\n\n            if (!error && data) {\n                error = this.updateRoles(data);\n            }\n\n            if (data) {\n                getHistory().push(`/${this.props.team.name}/integrations/bots`);\n                return;\n            }\n        } else {\n            const usernameError = Utils.isValidBotUsername(bot.username);\n            if (usernameError) {\n                let errObj;\n                if (usernameError.id === ValidationErrors.INVALID_LAST_CHARACTER) {\n                    errObj = {\n                        adding: false,\n                        error: (\n                            <FormattedMessage\n                                id='bots.manage.add.invalid_last_char'\n                                defaultMessage='Bot usernames cannot have a period as the last character'\n                            />\n                        ),\n                    };\n                } else {\n                    errObj = {\n                        adding: false,\n                        error: (\n                            <FormattedMessage\n                                id='bots.manage.add.invalid_username'\n                                defaultMessage='Usernames must begin with a lowercase letter and be 3-22 characters long. You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                            />\n                        ),\n                    };\n                }\n                this.setState(errObj);\n                return;\n            }\n\n            const result = await this.props.actions.createBot(bot);\n            if (result) {\n                data = result.data;\n                error = result.error;\n            } else {\n                error = Utils.localizeMessage('bot.create_failed', 'Failed to create bot');\n            }\n\n            let token = '';\n            if (!error && data) {\n                if (this.state.pictureFile && this.state.pictureFile !== 'default') {\n                    await this.props.actions.uploadProfileImage(data.user_id, this.state.pictureFile);\n                } else {\n                    await this.props.actions.setDefaultProfileImage(data.user_id);\n                }\n                const tokenResult = await this.props.actions.createUserAccessToken(data.user_id,\n                    Utils.localizeMessage('bot.token.default.description', 'Default Token'),\n                );\n\n                // On error just skip the confirmation because we have a bot without a token.\n                if (!tokenResult || tokenResult.error) {\n                    getHistory().push(`/${this.props.team.name}/integrations/bots`);\n                    return;\n                }\n\n                token = tokenResult.data.token;\n            }\n\n            if (!error && data) {\n                error = this.updateRoles(data);\n            }\n\n            if (data) {\n                getHistory().push(`/${this.props.team.name}/integrations/confirm?type=bots&id=${data.user_id}&token=${token}`);\n                return;\n            }\n        }\n\n        this.setState({\n            adding: false,\n        });\n\n        if (error) {\n            this.setState({\n                error: error.message,\n            });\n        }\n    }\n\n    render() {\n        let subtitle = (\n            <FormattedMessage\n                id='bots.manage.add'\n                defaultMessage='Add'\n            />\n        );\n        let buttonText = (\n            <FormattedMessage\n                id='bots.manage.add.create'\n                defaultMessage='Create Bot Account'\n            />\n        );\n        let buttonActiveText = (\n            <FormattedMessage\n                id='bots.manage.add.creating'\n                defaultMessage='Creating...'\n            />\n        );\n\n        // If we are editing\n        if (this.props.bot) {\n            subtitle = (\n                <FormattedMessage\n                    id='bots.manage.edit'\n                    defaultMessage='Edit'\n                />\n            );\n            buttonText = (\n                <FormattedMessage\n                    id='bots.manage.edit.title'\n                    defaultMessage='Update'\n                />\n            );\n            buttonActiveText = (\n                <FormattedMessage\n                    id='bots.manage.edit.editing'\n                    defaultMessage='Updating...'\n                />\n            );\n        }\n\n        let imageURL = '';\n        let removeImageIcon: JSX.Element | null = (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='right'\n                overlay={(\n                    <Tooltip id='removeIcon'>\n                        <FormattedMessage\n                            id='bot.remove_profile_picture'\n                            defaultMessage='Remove Bot Icon'\n                        />\n                    </Tooltip>\n                )}\n            >\n                <a\n                    className={'bot-profile__remove'}\n                    onClick={this.setDefault}\n                >\n                    <span>{'×'}</span>\n                </a>\n            </OverlayTrigger>\n        );\n        let imageStyles;\n        if (this.props.bot && !this.state.pictureFile) {\n            if (this.props.user) {\n                imageURL = Utils.imageURLForUser(this.props.user.id, this.props.user.last_picture_update);\n            } else {\n                imageURL = Utils.imageURLForUser(this.props.bot.user_id);\n            }\n        } else {\n            imageURL = this.state.image;\n            imageStyles = this.state.orientationStyles;\n            if (this.state.image === BotDefaultIcon) {\n                removeImageIcon = null;\n            }\n        }\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/bots`}>\n                        <FormattedMessage\n                            id='bots.manage.header'\n                            defaultMessage='Bot Accounts'\n                        />\n                    </Link>\n                    {subtitle}\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='username'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.username'\n                                    defaultMessage='Username'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='username'\n                                    type='text'\n                                    maxLength={22}\n                                    className='form-control'\n                                    value={this.state.username}\n                                    onChange={this.updateUsername}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.username.help'\n                                        defaultMessage='You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='boticon'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.icon'\n                                    defaultMessage='Bot Icon'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <div className={'bot-img-container'}>\n                                    <img\n                                        className={'bot-img'}\n                                        alt={'bot image'}\n                                        src={imageURL}\n                                        style={imageStyles}\n                                    />\n                                    {removeImageIcon}\n                                </div>\n                                <div\n                                    className='btn btn-sm btn-primary btn-file sel-btn'\n                                >\n                                    <FormattedMessage\n                                        id='bots.image.upload'\n                                        defaultMessage='Upload Image'\n                                    />\n                                    <input\n                                        accept={Constants.ACCEPT_STATIC_IMAGE}\n                                        type='file'\n                                        onChange={this.updatePicture}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.displayName'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.display_name.help'\n                                        defaultMessage={'(Optional) You can choose to display your bot\\'s full name rather than its username.'}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength={1024}\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.description.help'\n                                        defaultMessage='(Optional) Let others know what this bot does.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='role'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.role'\n                                    defaultMessage='Role'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.role}\n                                    disabled={!this.props.editingUserHasManageSystem}\n                                    onChange={this.updateRole}\n                                >\n                                    <option\n                                        value={roleOptionMember}\n                                    >\n                                        {Utils.localizeMessage('bot.add.role.member', 'Member')}\n                                    </option>\n                                    <option\n                                        value={roleOptionSystemAdmin}\n                                    >\n                                        {Utils.localizeMessage('bot.add.role.admin', 'System Admin')}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.role.help'\n                                        defaultMessage='Choose what role the bot should have.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='row bot-profile__section'>\n                            <div className='col-md-5 col-sm-8 col-sm-offset-4'>\n                                <FormattedMessage\n                                    id='admin.manage_roles.additionalRoles'\n                                    defaultMessage='Select additional permissions for the account. <link>Read more about roles and permissions</link>.'\n                                    values={{\n                                        link: (msg: React.ReactNode) => (\n                                            <a\n                                                href='https://developers.mattermost.com/integrate/admin-guide/admin-personal-access-token/'\n                                                target='_blank'\n                                                rel='noreferrer'\n                                            >\n                                                {msg}\n                                            </a>\n                                        ),\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='postAll'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.post_all'\n                                    defaultMessage='post:all'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <div className='checkbox no-padding'>\n                                    <label htmlFor='postAll'>\n                                        <input\n                                            id='postAll'\n                                            type='checkbox'\n                                            checked={this.state.postAll || this.state.role === roleOptionSystemAdmin}\n                                            onChange={this.updatePostAll}\n                                            disabled={!this.props.editingUserHasManageSystem || this.state.role === roleOptionSystemAdmin}\n                                        />\n                                        <FormattedMessage\n                                            id='bot.add.post_all.enabled'\n                                            defaultMessage='Enabled'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.post_all.help'\n                                        defaultMessage='Bot will have access to post to all Mattermost channels including direct messages.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='postChannels'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.post_channels'\n                                    defaultMessage='post:channels'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <div className='checkbox no-padding'>\n                                    <label htmlFor='postChannels'>\n                                        <input\n                                            id='postChannels'\n                                            type='checkbox'\n                                            checked={this.state.postChannels || this.state.role === roleOptionSystemAdmin || this.state.postAll}\n                                            onChange={this.updatePostChannels}\n                                            disabled={!this.props.editingUserHasManageSystem || this.state.role === roleOptionSystemAdmin || this.state.postAll}\n                                        />\n                                        <FormattedMessage\n                                            id='bot.add.post_channels.enabled'\n                                            defaultMessage='Enabled'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.post_channels.help'\n                                        defaultMessage='Bot will have access to post to all Mattermost public channels.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.state.error]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/bots`}\n                            >\n                                <FormattedMessage\n                                    id='bots.manage.add.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.adding}\n                                spinningText={buttonActiveText}\n                                onClick={this.handleSubmit}\n                                id='saveBot'\n                            >\n                                {buttonText}\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {RouteComponentProps} from 'react-router-dom';\n\nimport {updateUserRoles, uploadProfileImage, setDefaultProfileImage, createUserAccessToken} from 'mattermost-redux/actions/users';\nimport {createBot, patchBot} from 'mattermost-redux/actions/bots';\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AddBot, {Props} from './add_bot';\n\ntype OwnProps = {\n\n    /**\n     * Search query for the bot\n     */\n    location: RouteComponentProps['location'];\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const config = getConfig(state);\n    const botId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const bots = getBotAccounts(state);\n    const bot = (bots && botId) ? bots[botId] : undefined;\n    const user = bot ? getUser(state, bot.user_id) : undefined;\n    const roles = user ? user.roles : undefined;\n    return {\n        maxFileSize: parseInt(config.MaxFileSize!, 10),\n        bot,\n        roles,\n        editingUserHasManageSystem: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n        user,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            createBot,\n            patchBot,\n            uploadProfileImage,\n            setDefaultProfileImage,\n            createUserAccessToken,\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddBot);\n","export default __webpack_public_path__ + \"files/357ed0208b2f0eab27a2b67d4b5f129c.jpg\";","export default __webpack_public_path__ + \"files/0f0faa0a9caad62f27d9befa05e2811c.png\";","export default __webpack_public_path__ + \"files/4651fd92bdc643485b9edc86e79e02e7.jpg\";","export default __webpack_public_path__ + \"files/8a9816ae9c0cd846ae780433ccb979f0.jpg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n    image: string;\n    title: JSX.Element;\n    description: JSX.Element;\n    link: string;\n}\n\nexport default class IntegrationOption extends React.PureComponent <Props> {\n    render() {\n        const {image, title, description, link} = this.props;\n\n        return (\n            <Link\n                to={link}\n                className='integration-option'\n            >\n                <img\n                    alt={'integration image'}\n                    className='integration-option__image'\n                    src={image}\n                />\n                <div className='integration-option__title'>\n                    {title}\n                </div>\n                <div className='integration-option__description'>\n                    {description}\n                </div>\n            </Link>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Team} from '@mattermost/types/teams.js';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport BotAccountsIcon from 'images/bot_default_icon.png';\n\nimport * as Utils from 'utils/utils';\nimport IncomingWebhookIcon from 'images/incoming_webhook.jpg';\nimport OAuthIcon from 'images/oauth_icon.png';\nimport OutgoingWebhookIcon from 'images/outgoing_webhook.jpg';\nimport SlashCommandIcon from 'images/slash_command_icon.jpg';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport IntegrationOption from './integration_option';\n\ntype Props = {\n    siteName: string | undefined;\n    enableIncomingWebhooks: boolean;\n    enableOutgoingWebhooks: boolean;\n    enableCommands: boolean;\n    enableOAuthServiceProvider: boolean;\n    team: Team;\n}\n\nexport default class Integrations extends React.PureComponent <Props> {\n    componentDidMount() {\n        this.updateTitle();\n    }\n\n    updateTitle = () => {\n        const currentSiteName = this.props.siteName || '';\n        document.title = Utils.localizeMessage('admin.sidebar.integrations', 'Integrations') + ' - ' + this.props.team.display_name + ' ' + currentSiteName;\n    }\n\n    render() {\n        const options = [];\n\n        if (this.props.enableIncomingWebhooks) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_INCOMING_WEBHOOKS]}\n                    key='incomingWebhookPermission'\n                >\n                    <IntegrationOption\n                        key='incomingWebhook'\n                        image={IncomingWebhookIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.incomingWebhook.title'\n                                defaultMessage='Incoming Webhooks'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.incomingWebhook.description'\n                                defaultMessage='Incoming webhooks allow external integrations to send messages'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/incoming_webhooks'}\n                    />\n                </TeamPermissionGate>,\n            );\n        }\n\n        if (this.props.enableOutgoingWebhooks) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    key='outgoingWebhookPermission'\n                >\n                    <IntegrationOption\n                        key='outgoingWebhook'\n                        image={OutgoingWebhookIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.outgoingWebhook.title'\n                                defaultMessage='Outgoing Webhooks'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.outgoingWebhook.description'\n                                defaultMessage='Outgoing webhooks allow external integrations to receive and respond to messages'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/outgoing_webhooks'}\n                    />\n                </TeamPermissionGate>,\n            );\n        }\n\n        if (this.props.enableCommands) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_SLASH_COMMANDS]}\n                    key='commandPermission'\n                >\n                    <IntegrationOption\n                        key='command'\n                        image={SlashCommandIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.command.title'\n                                defaultMessage='Slash Commands'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.command.description'\n                                defaultMessage='Slash commands send events to an external integration'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/commands'}\n                    />\n                </TeamPermissionGate>,\n            );\n        }\n\n        if (this.props.enableOAuthServiceProvider) {\n            options.push(\n                <SystemPermissionGate\n                    permissions={[Permissions.MANAGE_OAUTH]}\n                    key='oauth2AppsPermission'\n                >\n                    <IntegrationOption\n                        key='oauth2Apps'\n                        image={OAuthIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.oauthApps.title'\n                                defaultMessage='OAuth 2.0 Applications'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.oauthApps.description'\n                                defaultMessage='Auth 2.0 allows external applications to make authorized requests to the Mattermost API'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/oauth2-apps'}\n                    />\n                </SystemPermissionGate>,\n            );\n        }\n\n        options.push(\n            <SystemPermissionGate\n                permissions={['manage_bots']}\n                key='botsPermissions'\n            >\n                <IntegrationOption\n                    image={BotAccountsIcon}\n                    title={\n                        <FormattedMessage\n                            id='bots.manage.header'\n                            defaultMessage='Bot Accounts'\n                        />\n                    }\n                    description={\n                        <FormattedMessage\n                            id='bots.manage.description'\n                            defaultMessage='Use bot accounts to integrate with Mattermost through plugins or the API'\n                        />\n                    }\n                    link={'/' + this.props.team.name + '/integrations/bots'}\n                />\n            </SystemPermissionGate>,\n        );\n\n        return (\n            <div className='backstage-content row'>\n                <div className='backstage-header'>\n                    <h1>\n                        <FormattedMessage\n                            id='integrations.header'\n                            defaultMessage='Integrations'\n                        />\n                    </h1>\n                </div>\n                <div className='backstage-list__help'>\n                    <FormattedMessage\n                        id='integrations.help'\n                        defaultMessage='Visit the {appDirectory} to find self-hosted, third-party apps and integrations for Mattermost.'\n                        values={{\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://mattermost.com/marketplace'\n                                >\n                                    <FormattedMessage\n                                        id='integrations.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                </div>\n                <div className='integrations-list d-flex flex-wrap'>\n                    {options}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from 'types/store';\n\nimport Integrations from './integrations';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableCommands = config.EnableCommands === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        siteName,\n        enableIncomingWebhooks,\n        enableOutgoingWebhooks,\n        enableCommands,\n        enableOAuthServiceProvider,\n    };\n}\n\nexport default connect(mapStateToProps)(Integrations);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {openModal as openModalAction} from 'actions/views/modals';\n\nimport ConfirmModalRedux from 'components/confirm_modal_redux';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst ModalId = 'delete_integration_confirm';\n\ntype Props = {\n    confirmButtonText?: React.ReactNode;\n    linkText?: React.ReactNode;\n    modalMessage?: React.ReactNode;\n    modalTitle?: React.ReactNode;\n    onDelete: () => void;\n    openModal: typeof openModalAction;\n};\n\nexport default function DeleteIntegrationLink(props: Props) {\n    const {\n        confirmButtonText = (\n            <FormattedMessage\n                id='integrations.delete.confirm.button'\n                defaultMessage='Delete'\n            />\n        ),\n        linkText = (\n            <FormattedMessage\n                id='installed_integrations.delete'\n                defaultMessage='Delete'\n            />\n        ),\n        modalMessage,\n        modalTitle = (\n            <FormattedMessage\n                id='integrations.delete.confirm.title'\n                defaultMessage='Delete Integration'\n            />\n        ),\n        onDelete,\n        openModal,\n    } = props;\n\n    const onClick = useCallback(() => {\n        openModal({\n            modalId: ModalId,\n            dialogProps: {\n                confirmButtonText,\n                message: (\n                    <div className='alert alert-warning'>\n                        <WarningIcon additionalClassName='mr-1'/>\n                        {props.modalMessage}\n                    </div>\n                ),\n                onConfirm: onDelete,\n                title: modalTitle,\n            },\n            dialogType: ConfirmModalRedux,\n        });\n    }, [confirmButtonText, modalMessage, modalTitle, onDelete, openModal]);\n\n    return (\n        <button\n            className='color--link style--none'\n            onClick={onClick}\n        >\n            {linkText}\n        </button>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\nconst mapDispatchToProps = {\n    openModal,\n};\n\nexport default connect(null, mapDispatchToProps)(DeleteIntegrationLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport DeleteIntegrationLink from 'components/integrations/delete_integration_link';\n\ntype Props = {\n    onDelete: () => void;\n}\n\nexport default function DeleteEmojiButton(props: Props) {\n    return (\n        <DeleteIntegrationLink\n            confirmButtonText={\n                <FormattedMessage\n                    id='emoji_list.delete.confirm.button'\n                    defaultMessage='Delete'\n                />\n            }\n            linkText={\n                <FormattedMessage\n                    id='emoji_list.delete'\n                    defaultMessage='Delete'\n                />\n            }\n            modalMessage={\n                <FormattedMessage\n                    id='emoji_list.delete.confirm.msg'\n                    defaultMessage='This action permanently deletes the custom emoji. Are you sure you want to delete it?'\n                />\n            }\n            modalTitle={\n                <FormattedMessage\n                    id='emoji_list.delete.confirm.title'\n                    defaultMessage='Delete Custom Emoji'\n                />\n            }\n            onDelete={props.onDelete}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {Client4} from 'mattermost-redux/client';\nimport {CustomEmoji} from '@mattermost/types/emojis';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport AnyTeamPermissionGate from 'components/permissions_gates/any_team_permission_gate';\n\nimport DeleteEmojiButton from './delete_emoji_button';\n\nexport type Props = {\n    emoji: CustomEmoji;\n    emojiId?: string;\n    currentUserId: string;\n    creatorDisplayName: string;\n    creatorUsername?: string;\n    onDelete?: (emojiId: string) => void;\n    actions: {\n        deleteCustomEmoji: (emojiId: string) => ActionFunc;\n    };\n}\n\nexport default class EmojiListItem extends React.PureComponent<Props> {\n    static defaultProps = {\n        emoji: {} as CustomEmoji,\n        currentUserId: '',\n        creatorDisplayName: '',\n    }\n\n    handleDelete = (): void => {\n        if (this.props.onDelete) {\n            this.props.onDelete(this.props.emoji.id);\n        }\n\n        this.props.actions.deleteCustomEmoji(this.props.emoji.id);\n    }\n\n    render(): JSX.Element {\n        const emoji = this.props.emoji;\n        const creatorUsername = this.props.creatorUsername;\n        let creatorDisplayName = this.props.creatorDisplayName;\n\n        if (creatorUsername && creatorUsername !== creatorDisplayName) {\n            creatorDisplayName += ' (@' + creatorUsername + ')';\n        }\n\n        let deleteButton = <DeleteEmojiButton onDelete={this.handleDelete}/>;\n\n        if (emoji.creator_id === this.props.currentUserId) {\n            deleteButton = (\n                <AnyTeamPermissionGate permissions={[Permissions.DELETE_EMOJIS]}>\n                    {deleteButton}\n                </AnyTeamPermissionGate>\n            );\n        } else {\n            deleteButton = (\n                <AnyTeamPermissionGate permissions={[Permissions.DELETE_EMOJIS]}>\n                    <AnyTeamPermissionGate permissions={[Permissions.DELETE_OTHERS_EMOJIS]}>\n                        {deleteButton}\n                    </AnyTeamPermissionGate>\n                </AnyTeamPermissionGate>\n            );\n        }\n\n        return (\n            <tr className='backstage-list__item'>\n                <td className='emoji-list__name'>\n                    {':' + emoji.name + ':'}\n                </td>\n                <td className='emoji-list__image'>\n                    <span\n                        className='emoticon'\n                        style={{backgroundImage: 'url(' + Client4.getCustomEmojiImageUrl(emoji.id) + ')'}}\n                    />\n                </td>\n                <td className='emoji-list__creator'>\n                    {creatorDisplayName}\n                </td>\n                <td className='emoji-list-item_actions'>\n                    {deleteButton}\n                </td>\n            </tr>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUser, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {deleteCustomEmoji} from 'mattermost-redux/actions/emojis';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {getDisplayNameByUser} from 'utils/utils';\n\nimport {GlobalState} from '../../../types/store';\n\nimport EmojiListItem, {Props} from './emoji_list_item';\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const emoji = state.entities.emojis.customEmoji[ownProps.emojiId!];\n    const creator = getUser(state, emoji.creator_id);\n\n    return {\n        emoji,\n        creatorDisplayName: getDisplayNameByUser(state, creator),\n        creatorUsername: creator ? creator.username : '',\n        currentUserId: getCurrentUserId(state),\n        currentTeam: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            deleteCustomEmoji,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiListItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, ChangeEventHandler} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Emoji} from 'mattermost-redux/constants';\nimport {CustomEmoji} from '@mattermost/types/emojis';\nimport {ServerError} from '@mattermost/types/errors';\nimport {deleteCustomEmoji} from 'mattermost-redux/actions/emojis';\n\nimport LoadingScreen from 'components/loading_screen';\nimport SaveButton from 'components/save_button';\nimport EmojiListItem from 'components/emoji/emoji_list_item';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\nimport SearchIcon from 'components/widgets/icons/fa_search_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n';\n\nconst EMOJI_PER_PAGE = 50;\nconst EMOJI_SEARCH_DELAY_MILLISECONDS = 200;\n\ninterface Props {\n\n    /**\n     * Custom emojis on the system.\n     */\n    emojiIds: string[];\n\n    /**\n     * Function to scroll list to top.\n     */\n    scrollToTop: () => void;\n    actions: {\n\n        /**\n         * Get pages of custom emojis.\n         */\n        getCustomEmojis: (page?: number, perPage?: number, sort?: string, loadUsers?: boolean) => Promise<{ data: CustomEmoji[]; error: ServerError }>;\n\n        /**\n         * Search custom emojis.\n         */\n        searchCustomEmojis: (term: string, options: any, loadUsers: boolean) => Promise<{ data: CustomEmoji[]; error: ServerError }>;\n    };\n\n}\n\ninterface State {\n    loading: boolean;\n    page: number;\n    nextLoading: boolean;\n    searchEmojis: string[] | null;\n    missingPages: boolean;\n}\n\nexport default class EmojiList extends React.PureComponent<Props, State> {\n    private searchTimeout: NodeJS.Timeout | null;\n\n    constructor(props: Props) {\n        super(props);\n        this.searchTimeout = null;\n        this.state = {\n            loading: true,\n            page: 0,\n            nextLoading: false,\n            searchEmojis: null,\n            missingPages: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        this.props.actions.getCustomEmojis(0, EMOJI_PER_PAGE + 1, Emoji.SORT_BY_NAME, true).\n            then(({data}: { data: CustomEmoji[] }) => {\n                this.setState({loading: false});\n                if (data && data.length < EMOJI_PER_PAGE) {\n                    this.setState({missingPages: false});\n                }\n            });\n    }\n\n    nextPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const next = this.state.page + 1;\n        this.setState({nextLoading: true});\n        this.props.actions.getCustomEmojis(next, EMOJI_PER_PAGE, Emoji.SORT_BY_NAME, true).\n            then(({data}: { data: CustomEmoji[] }) => {\n                this.setState({page: next, nextLoading: false});\n                if (data && data.length < EMOJI_PER_PAGE) {\n                    this.setState({missingPages: false});\n                }\n\n                this.props.scrollToTop();\n            });\n    };\n    previousPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            page: this.state.page - 1,\n            nextLoading: false,\n            missingPages: true,\n        });\n\n        this.props.scrollToTop();\n    };\n\n    onSearchChange: ChangeEventHandler = (e: ChangeEvent): void => {\n        if (!e || !e.target) {\n            return;\n        }\n\n        const term = (e.target as HTMLInputElement).value || '';\n\n        clearTimeout(this.searchTimeout!);\n\n        this.searchTimeout = setTimeout(async () => {\n            if (term.trim() === '') {\n                this.setState({searchEmojis: null, page: 0});\n                return;\n            }\n\n            this.setState({loading: true});\n\n            const {data}: { data: CustomEmoji[] } = await this.props.actions.searchCustomEmojis(\n                term,\n                {},\n                true,\n            );\n\n            if (data) {\n                this.setState({\n                    searchEmojis: data.map((em: CustomEmoji) => em.id),\n                    loading: false,\n                });\n            } else {\n                this.setState({searchEmojis: [], loading: false});\n            }\n        }, EMOJI_SEARCH_DELAY_MILLISECONDS);\n    };\n\n    deleteFromSearch = (emojiId: string): void => {\n        if (!this.state.searchEmojis) {\n            return;\n        }\n\n        const index = this.state.searchEmojis.indexOf(emojiId);\n\n        if (index < 0) {\n            return;\n        }\n\n        const newSearchEmojis = [...this.state.searchEmojis];\n        newSearchEmojis.splice(index, 1);\n        this.setState({searchEmojis: newSearchEmojis});\n    };\n\n    render(): JSX.Element {\n        const searchEmojis = this.state.searchEmojis;\n        const emojis = [];\n        let nextButton;\n        let previousButton;\n\n        if (this.state.loading) {\n            emojis.push(\n                <tr\n                    key='loading'\n                    className='backstage-list__item backstage-list__empty'\n                >\n                    <td colSpan={4}>\n                        <LoadingScreen key='loading'/>\n                    </td>\n                </tr>,\n            );\n        } else if (\n            this.props.emojiIds.length === 0 ||\n            (searchEmojis && searchEmojis.length === 0)\n        ) {\n            emojis.push(\n                <tr\n                    key='empty'\n                    className='backstage-list__item backstage-list__empty'\n                >\n                    <td colSpan={4}>\n                        <FormattedMessage\n                            id='emoji_list.empty'\n                            defaultMessage='No custom emoji found'\n                        />\n                    </td>\n                </tr>,\n            );\n        } else if (searchEmojis) {\n            searchEmojis.forEach((emojiId: string) => {\n                emojis.push(\n                    <EmojiListItem\n                        key={'emoji_search_item' + emojiId}\n                        emojiId={emojiId}\n                        onDelete={this.deleteFromSearch}\n                        actions={{deleteCustomEmoji}}\n                    />,\n                );\n            });\n        } else {\n            const pageStart = this.state.page * EMOJI_PER_PAGE;\n            const pageEnd = pageStart + EMOJI_PER_PAGE;\n            const emojisToDisplay = this.props.emojiIds.slice(pageStart, pageEnd);\n\n            emojisToDisplay.forEach((emojiId: string) => {\n                emojis.push(\n                    <EmojiListItem\n                        key={'emoji_list_item' + emojiId}\n                        emojiId={emojiId}\n                        actions={{deleteCustomEmoji}}\n                    />,\n                );\n            });\n\n            if (this.state.missingPages) {\n                const buttonContents = (\n                    <span>\n                        <FormattedMessage\n                            id='filtered_user_list.next'\n                            defaultMessage='Next'\n                        />\n                        <NextIcon additionalClassName='ml-2'/>\n                    </span>\n                );\n\n                nextButton = (\n                    <SaveButton\n                        btnClass='btn-link'\n                        extraClasses='pull-right'\n                        onClick={this.nextPage}\n                        saving={this.state.nextLoading}\n                        disabled={this.state.nextLoading}\n                        defaultMessage={buttonContents}\n                        savingMessage={buttonContents}\n                    />\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-link'\n                        onClick={this.previousPage}\n                    >\n                        <PreviousIcon additionalClassName='mr-2'/>\n                        <FormattedMessage\n                            id='filtered_user_list.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        return (\n            <div>\n                <div className='backstage-filters'>\n                    <div className='backstage-filter__search'>\n                        <SearchIcon/>\n                        <LocalizedInput\n                            type='search'\n                            className='form-control'\n                            placeholder={{\n                                id: t('emoji_list.search'),\n                                defaultMessage: 'Search Custom Emoji',\n                            }}\n                            onChange={this.onSearchChange}\n                            style={style.search}\n                        />\n                    </div>\n                </div>\n                <span className='backstage-list__help'>\n                    <p>\n                        <FormattedMessage\n                            id='emoji_list.help'\n                            defaultMessage=\"Custom emoji are available to everyone on your server. Type ':' followed by two characters in a message box to bring up the emoji selection menu.\"\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='emoji_list.help2'\n                            defaultMessage=\"Tip: If you add #, ##, or ### as the first character on a new line containing emoji, you can use larger sized emoji. To try it out, send a message such as: '# :smile:'.\"\n                        />\n                    </p>\n                </span>\n                <div className='backstage-list'>\n                    <table className='emoji-list__table'>\n                        <thead>\n                            <tr className='backstage-list__item emoji-list__table-header'>\n                                <th className='emoji-list__name'>\n                                    <FormattedMessage\n                                        id='emoji_list.name'\n                                        defaultMessage='Name'\n                                    />\n                                </th>\n                                <th className='emoji-list__image'>\n                                    <FormattedMessage\n                                        id='emoji_list.image'\n                                        defaultMessage='Image'\n                                    />\n                                </th>\n                                <th className='emoji-list__creator'>\n                                    <FormattedMessage\n                                        id='emoji_list.creator'\n                                        defaultMessage='Creator'\n                                    />\n                                </th>\n                                <th className='emoji-list_actions'>\n                                    <FormattedMessage\n                                        id='emoji_list.actions'\n                                        defaultMessage='Actions'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>{emojis}</tbody>\n                    </table>\n                </div>\n                <div className='filter-controls pt-3'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    search: {flexGrow: 0, flexShrink: 0},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getCustomEmojiIdsSortedByName} from 'mattermost-redux/selectors/entities/emojis';\nimport {ActionFunc, GenericAction} from 'mattermost-redux/types/actions';\nimport {getCustomEmojis, searchCustomEmojis} from 'mattermost-redux/actions/emojis';\nimport {GlobalState} from '@mattermost/types/store';\nimport {CustomEmoji} from '@mattermost/types/emojis';\nimport {ServerError} from '@mattermost/types/errors';\n\nimport EmojiList from './emoji_list';\n\ntype Actions = {\n    getCustomEmojis: (page?: number, perPage?: number, sort?: string, loadUsers?: boolean) => Promise<{ data: CustomEmoji[]; error: ServerError }>;\n    searchCustomEmojis: (term: string, options: any, loadUsers: boolean) => Promise<{ data: CustomEmoji[]; error: ServerError }>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        emojiIds: getCustomEmojiIdsSortedByName(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getCustomEmojis,\n            searchCustomEmojis,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport * as Utils from 'utils/utils';\nimport AnyTeamPermissionGate from 'components/permissions_gates/any_team_permission_gate';\n\nimport EmojiList from './emoji_list';\n\ntype Props = {\n    teamId: string;\n    teamName?: string;\n    teamDisplayName?: string;\n    siteName?: string;\n    scrollToTop(): void;\n    actions: {\n        loadRolesIfNeeded(roles: Iterable<string>): void;\n    };\n}\n\nexport default class EmojiPage extends React.PureComponent<Props> {\n    static defaultProps = {\n        teamName: '',\n        teamDisplayName: '',\n        siteName: '',\n    }\n\n    componentDidMount() {\n        this.updateTitle();\n        this.props.actions.loadRolesIfNeeded(['system_admin', 'team_admin', 'system_user', 'team_user']);\n    }\n\n    updateTitle = () => {\n        document.title = Utils.localizeMessage('custom_emoji.header', 'Custom Emoji') + ' - ' + this.props.teamDisplayName + ' ' + this.props.siteName;\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.siteName !== prevProps.siteName) {\n            this.updateTitle();\n        }\n    }\n\n    render() {\n        return (\n            <div className='backstage-content emoji-list'>\n                <div className='backstage-header'>\n                    <h1>\n                        <FormattedMessage\n                            id='emoji_list.header'\n                            defaultMessage='Custom Emoji'\n                        />\n                    </h1>\n                    <AnyTeamPermissionGate permissions={[Permissions.CREATE_EMOJIS]}>\n                        <Link\n                            className='add-link'\n                            to={'/' + this.props.teamName + '/emoji/add'}\n                        >\n                            <button\n                                type='button'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='emoji_list.add'\n                                    defaultMessage='Add Custom Emoji'\n                                />\n                            </button>\n                        </Link>\n                    </AnyTeamPermissionGate>\n                </div>\n                <EmojiList scrollToTop={this.props.scrollToTop}/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {loadRolesIfNeeded} from 'mattermost-redux/actions/roles';\n\nimport {GlobalState} from 'types/store';\n\nimport EmojiPage from 'components/emoji/emoji_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const team = getCurrentTeam(state) || {};\n\n    return {\n        teamId: team.id,\n        teamName: team.name,\n        teamDisplayName: team.display_name,\n        siteName: state.entities.general.config.SiteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiPage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent, FormEvent, SyntheticEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport {CustomEmoji} from '@mattermost/types/emojis';\nimport {Team} from '@mattermost/types/teams';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\nimport {getHistory} from 'utils/browser_history';\nimport {localizeMessage} from 'utils/utils';\nimport {Constants} from 'utils/constants';\n\nimport EmojiMap from 'utils/emoji_map';\n\nexport interface AddEmojiProps {\n    actions: {\n        createCustomEmoji: (term: CustomEmoji, imageData: File) => Promise<ActionResult>;\n    };\n    emojiMap: EmojiMap;\n    user: UserProfile;\n    team: Team;\n}\n\ntype EmojiCreateArgs = {\n    creator_id: string;\n    name: string;\n};\n\ntype AddEmojiState = {\n    name: string;\n    image: File | null;\n    imageUrl: string | ArrayBuffer | null;\n    saving: boolean;\n    error: React.ReactNode;\n};\n\ninterface AddErrorResponse {\n    error: Error;\n}\n\ninterface AddEmojiResponse {\n    data: CustomEmoji;\n}\n\nexport default class AddEmoji extends React.PureComponent<AddEmojiProps, AddEmojiState> {\n    constructor(props: AddEmojiProps) {\n        super(props);\n\n        this.state = {\n            name: '',\n            image: null,\n            imageUrl: '',\n            saving: false,\n            error: null,\n        };\n    }\n\n    handleFormSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {\n        return this.handleSubmit(e);\n    }\n\n    handleSaveButtonClick = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): Promise<void> => {\n        return this.handleSubmit(e);\n    }\n\n    handleSubmit = async (e: SyntheticEvent<unknown>): Promise<void> => {\n        const {actions, emojiMap, user, team} = this.props;\n        const {image, name, saving} = this.state;\n\n        e.preventDefault();\n\n        if (saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            error: null,\n        });\n\n        const emoji: EmojiCreateArgs = {\n            creator_id: user.id,\n            name: name.trim().toLowerCase(),\n        };\n\n        // trim surrounding colons if the user accidentally included them in the name\n        if (emoji.name.startsWith(':') && emoji.name.endsWith(':')) {\n            emoji.name = emoji.name.substring(1, emoji.name.length - 1);\n        }\n\n        if (!emoji.name) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameRequired'\n                        defaultMessage='A name is required for the emoji'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if ((/[^a-z0-9+_-]/).test(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameInvalid'\n                        defaultMessage=\"An emoji's name can only contain lowercase letters, numbers, and the symbols '-', '+' and '_'.\"\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (emojiMap.hasSystemEmoji(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameTaken'\n                        defaultMessage='This name is already in use by a system emoji. Please choose another name.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (emojiMap.has(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.customNameTaken'\n                        defaultMessage='This name is already in use by a custom emoji. Please choose another name.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!image) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.imageRequired'\n                        defaultMessage='An image is required for the emoji'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const maxFileSizeBytes = 1024 * 1024;\n        if (image.size > maxFileSizeBytes) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.imageTooLarge'\n                        defaultMessage='Unable to create emoji. Image must be less than 1 MB in size.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const response = await actions.createCustomEmoji(emoji as CustomEmoji, image);\n\n        if ('data' in response) {\n            const savedEmoji = response as AddEmojiResponse;\n            if (savedEmoji && savedEmoji.data.name === emoji.name) {\n                getHistory().push('/' + team.name + '/emoji');\n                return;\n            }\n        }\n\n        if ('error' in response) {\n            const responseError = response as AddErrorResponse;\n            if (responseError) {\n                this.setState({\n                    saving: false,\n                    error: responseError.error.message,\n                });\n\n                return;\n            }\n        }\n\n        const genericError = (\n            <FormattedMessage\n                id='add_emoji.failedToAdd'\n                defaultMessage='Something when wrong when adding the custom emoji.'\n            />\n        );\n\n        this.setState({\n            saving: false,\n            error: (genericError),\n        });\n    };\n\n    updateName = (e: ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            name: e.target.value,\n        });\n    };\n\n    updateImage = (e: ChangeEvent<HTMLInputElement>): void => {\n        if (e.target.files == null || e.target.files.length === 0) {\n            this.setState({\n                image: null,\n                imageUrl: '',\n            });\n\n            return;\n        }\n\n        const image = e.target.files![0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            this.setState({\n                image,\n                imageUrl: reader.result,\n            });\n        };\n        reader.readAsDataURL(image);\n    };\n\n    render(): JSX.Element {\n        let filename = null;\n        if (this.state.image) {\n            filename = (\n                <span className='add-emoji__filename'>\n                    {this.state.image.name}\n                </span>\n            );\n        }\n\n        let preview = null;\n        if (this.state.imageUrl) {\n            preview = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='preview'\n                    >\n                        <FormattedMessage\n                            id='add_emoji.preview'\n                            defaultMessage='Preview'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8 add-emoji__preview'>\n                        <FormattedMessage\n                            id='add_emoji.preview.sentence'\n                            defaultMessage='This is a sentence with {image} in it.'\n                            values={{\n                                image: (\n                                    <span\n                                        className='emoticon'\n                                        style={{backgroundImage: 'url(' + this.state.imageUrl + ')'}}\n                                    />\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/emoji'}>\n                        <FormattedMessage\n                            id='emoji_list.header'\n                            defaultMessage='Custom Emoji'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id='add_emoji.header'\n                        defaultMessage='Add'\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleFormSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='name'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.name'\n                                    defaultMessage='Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='name'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.name}\n                                    onChange={this.updateName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_emoji.name.help'\n                                        defaultMessage=\"Name your emoji. The name can be up to 64 characters, and can contain lowercase letters, numbers, and the symbols '-' and '_'.\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='image'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.image'\n                                    defaultMessage='Image'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <div>\n                                    <div className='add-emoji__upload'>\n                                        <button className='btn btn-primary'>\n                                            <FormattedMessage\n                                                id='add_emoji.image.button'\n                                                defaultMessage='Select'\n                                            />\n                                        </button>\n                                        <input\n                                            id='select-emoji'\n                                            type='file'\n                                            accept={Constants.ACCEPT_EMOJI_IMAGE}\n                                            multiple={false}\n                                            onChange={this.updateImage}\n                                        />\n                                    </div>\n                                    {filename}\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_emoji.image.help'\n                                            defaultMessage='Specify a .gif, .png, or .jpg file of up to 64 KB for your emoji. The dimensions can be up to 128 pixels by 128 pixels.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {preview}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                error={this.state.error}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={'/' + this.props.team.name + '/emoji'}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage('add_emoji.saving', 'Saving...')}\n                                onClick={this.handleSaveButtonClick}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.save'\n                                    defaultMessage='Save'\n                                />\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {createCustomEmoji} from 'mattermost-redux/actions/emojis';\n\nimport {ActionFunc, ActionResult, GenericAction} from 'mattermost-redux/types/actions';\nimport {CustomEmoji} from '@mattermost/types/emojis';\n\nimport {getEmojiMap} from 'selectors/emojis';\n\nimport {GlobalState} from 'types/store';\n\nimport AddEmoji from './add_emoji';\n\ntype Actions = {\n    createCustomEmoji: (emoji: CustomEmoji, imageData: File) => Promise<ActionResult>;\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        emojiMap: getEmojiMap(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            createCustomEmoji,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmoji);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as IntegrationActions from 'mattermost-redux/actions/integrations';\nimport {getProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {appsEnabled} from 'mattermost-redux/selectors/entities/apps';\n\nconst DEFAULT_PAGE_SIZE = 100;\n\nexport function loadIncomingHooksAndProfilesForTeam(teamId, page = 0, perPage = DEFAULT_PAGE_SIZE) {\n    return async (dispatch) => {\n        const {data} = await dispatch(IntegrationActions.getIncomingHooks(teamId, page, perPage));\n        if (data) {\n            dispatch(loadProfilesForIncomingHooks(data));\n        }\n    };\n}\n\nexport function loadProfilesForIncomingHooks(hooks) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < hooks.length; i++) {\n            const hook = hooks[i];\n            if (!getUser(state, hook.user_id)) {\n                profilesToLoad[hook.user_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n\nexport function loadOutgoingHooksAndProfilesForTeam(teamId, page = 0, perPage = DEFAULT_PAGE_SIZE) {\n    return async (dispatch) => {\n        const {data} = await dispatch(IntegrationActions.getOutgoingHooks('', teamId, page, perPage));\n        if (data) {\n            dispatch(loadProfilesForOutgoingHooks(data));\n        }\n    };\n}\n\nexport function loadProfilesForOutgoingHooks(hooks) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < hooks.length; i++) {\n            const hook = hooks[i];\n            if (!getUser(state, hook.creator_id)) {\n                profilesToLoad[hook.creator_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n\nexport function loadCommandsAndProfilesForTeam(teamId) {\n    return async (dispatch) => {\n        const {data} = await dispatch(IntegrationActions.getCustomTeamCommands(teamId));\n        if (data) {\n            dispatch(loadProfilesForCommands(data));\n        }\n    };\n}\n\nexport function loadProfilesForCommands(commands) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < commands.length; i++) {\n            const command = commands[i];\n            if (!getUser(state, command.creator_id)) {\n                profilesToLoad[command.creator_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n\nexport function loadOAuthAppsAndProfiles(page = 0, perPage = DEFAULT_PAGE_SIZE) {\n    return async (dispatch, getState) => {\n        if (appsEnabled(getState())) {\n            dispatch(IntegrationActions.getAppsOAuthAppIDs());\n        }\n        const {data} = await dispatch(IntegrationActions.getOAuthApps(page, perPage));\n        if (data) {\n            dispatch(loadProfilesForOAuthApps(data));\n        }\n    };\n}\n\nexport function loadProfilesForOAuthApps(apps) {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const profilesToLoad = {};\n        for (let i = 0; i < apps.length; i++) {\n            const app = apps[i];\n            if (!getUser(state, app.creator_id)) {\n                profilesToLoad[app.creator_id] = true;\n            }\n        }\n\n        const list = Object.keys(profilesToLoad);\n        if (list.length === 0) {\n            return;\n        }\n\n        dispatch(getProfilesByIds(list));\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Tooltip from 'components/tooltip';\n\nimport Constants from 'utils/constants';\nimport {copyToClipboard} from 'utils/utils';\n\ntype Props = {\n    value: string;\n    defaultMessage: string;\n    idMessage: string;\n};\n\nexport default class CopyText extends React.PureComponent<Props> {\n    public static defaultProps = {\n        defaultMessage: 'Copy',\n        idMessage: 'integrations.copy',\n    };\n\n    private copyText = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>): void => {\n        e.preventDefault();\n        copyToClipboard(this.props.value);\n    };\n\n    public render() {\n        if (!document.queryCommandSupported('copy')) {\n            return null;\n        }\n\n        const tooltip = (\n            <Tooltip id='copy'>\n                <FormattedMessage\n                    id={this.props.idMessage}\n                    defaultMessage={this.props.defaultMessage}\n                />\n            </Tooltip>\n        );\n\n        return (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                overlay={tooltip}\n            >\n                <a\n                    href='#'\n                    data-testid='copyText'\n                    className='fa fa-copy ml-2'\n                    onClick={this.copyText}\n                />\n            </OverlayTrigger>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {getSiteURL} from 'utils/url';\n\nimport CopyText from 'components/copy_text';\n\nimport {IncomingWebhook} from '@mattermost/types/integrations';\nimport {Team} from '@mattermost/types/teams';\nimport {Channel} from '@mattermost/types/channels';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\nexport function matchesFilter(incomingWebhook: IncomingWebhook, channel: Channel, filter: string) {\n    if (!filter) {\n        return true;\n    }\n\n    if (incomingWebhook.display_name.toLowerCase().indexOf(filter) !== -1 ||\n        incomingWebhook.description.toLowerCase().indexOf(filter) !== -1) {\n        return true;\n    }\n\n    if (incomingWebhook.channel_id) {\n        if (channel && channel.name.toLowerCase().indexOf(filter) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\ntype Props = {\n\n    /**\n     * Data used for showing webhook details\n     */\n    incomingWebhook: IncomingWebhook;\n\n    /**\n     * Function to call when webhook delete button is pressed\n     */\n    onDelete: (incomingWebhook: IncomingWebhook) => void;\n\n    /**\n     * String used for filtering webhook item\n     */\n    filter?: string;\n\n    /**\n     * Data used for showing created by details\n     */\n    creator: {\n        username: string;\n    };\n\n    /**\n     *  Set to show available actions on webhook\n     */\n    canChange: boolean;\n\n    /**\n     *  Data used in routing of webhook for modifications\n     */\n    team: Team;\n\n    /**\n     *  Data used for filtering of webhook based on filter prop\n     */\n    channel: Channel;\n}\n\nexport default class InstalledIncomingWebhook extends React.PureComponent<Props> {\n    handleDelete = () => {\n        this.props.onDelete(this.props.incomingWebhook);\n    }\n\n    render() {\n        const incomingWebhook = this.props.incomingWebhook;\n        const channel = this.props.channel;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n\n        if (!matchesFilter(incomingWebhook, channel, filter)) {\n            return null;\n        }\n\n        let displayName;\n        if (incomingWebhook.display_name) {\n            displayName = incomingWebhook.display_name;\n        } else if (channel) {\n            displayName = channel.display_name;\n        } else {\n            displayName = (\n                <FormattedMessage\n                    id='installed_incoming_webhooks.unknown_channel'\n                    defaultMessage='A Private Webhook'\n                />\n            );\n        }\n\n        let description = null;\n        if (incomingWebhook.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {incomingWebhook.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <Link to={`/${this.props.team.name}/integrations/incoming_webhooks/edit?id=${incomingWebhook.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_incoming_webhooks.delete.confirm'\n                                defaultMessage='This action permanently deletes the incoming webhook and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        const incomingWebhookId = getSiteURL() + '/hooks/' + incomingWebhook.id;\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {displayName}\n                        </strong>\n                        {actions}\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__url word-break--all'>\n                            <FormattedMessage\n                                id='installed_integrations.url'\n                                defaultMessage='URL: {url}'\n                                values={{\n                                    url: incomingWebhookId,\n                                }}\n                            />\n                            <span>\n                                <CopyText\n                                    value={incomingWebhookId}\n                                />\n                            </span>\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: incomingWebhook.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport InstalledIncomingWebhook, {matchesFilter} from 'components/integrations/installed_incoming_webhook';\n\nimport {Team} from '@mattermost/types/teams';\nimport {Channel} from '@mattermost/types/channels';\nimport {IncomingWebhook} from '@mattermost/types/integrations';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from '@mattermost/types/users';\nimport {IDMappedObjects} from '@mattermost/types/utilities';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    team: Team;\n    user: UserProfile;\n    canManageOthersWebhooks: boolean;\n    incomingWebhooks: IncomingWebhook[];\n    channels: IDMappedObjects<Channel>;\n    users: IDMappedObjects<UserProfile>;\n    enableIncomingWebhooks: boolean;\n    actions: {\n        removeIncomingHook: (hookId: string) => Promise<ActionResult>;\n        loadIncomingHooksAndProfilesForTeam: (teamId: string, startPageNumber: number,\n            pageSize: string) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    loading: boolean;\n}\n\nexport default class InstalledIncomingWebhooks extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableIncomingWebhooks) {\n            this.props.actions.loadIncomingHooksAndProfilesForTeam(\n                this.props.team.id,\n                Constants.Integrations.START_PAGE_NUM,\n                Constants.Integrations.PAGE_SIZE,\n            ).then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    deleteIncomingWebhook = (incomingWebhook: IncomingWebhook) => {\n        this.props.actions.removeIncomingHook(incomingWebhook.id);\n    }\n\n    incomingWebhookCompare = (a: IncomingWebhook, b: IncomingWebhook) => {\n        let displayNameA = a.display_name;\n        if (!displayNameA) {\n            const channelA = this.props.channels[a.channel_id];\n            if (channelA) {\n                displayNameA = channelA.display_name;\n            } else {\n                displayNameA = Utils.localizeMessage('installed_incoming_webhooks.unknown_channel', 'A Private Webhook');\n            }\n        }\n\n        const displayNameB = b.display_name;\n\n        return displayNameA.localeCompare(displayNameB);\n    }\n\n    incomingWebhooks = (filter: string) => this.props.incomingWebhooks.\n        sort(this.incomingWebhookCompare).\n        filter((incomingWebhook: IncomingWebhook) => matchesFilter(incomingWebhook, this.props.channels[incomingWebhook.channel_id], filter)).\n        map((incomingWebhook: IncomingWebhook) => {\n            const canChange = this.props.canManageOthersWebhooks || this.props.user.id === incomingWebhook.user_id;\n            const channel = this.props.channels[incomingWebhook.channel_id];\n            return (\n                <InstalledIncomingWebhook\n                    key={incomingWebhook.id}\n                    incomingWebhook={incomingWebhook}\n                    onDelete={this.deleteIncomingWebhook}\n                    creator={this.props.users[incomingWebhook.user_id] || {}}\n                    canChange={canChange}\n                    team={this.props.team}\n                    channel={channel}\n                />\n            );\n        });\n\n    render() {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.header'\n                        defaultMessage='Installed Incoming Webhooks'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.add'\n                        defaultMessage='Add Incoming Webhook'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/incoming_webhooks/add'}\n                addButtonId='addIncomingWebhook'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.empty'\n                        defaultMessage='No incoming webhooks found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_incoming_webhooks.emptySearch'\n                        defaultMessage='No incoming webhooks match {searchTerm}'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.help'\n                        defaultMessage='Use incoming webhooks to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-webhooks-incoming/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_incoming_webhooks.help.buildYourOwn'\n                                        defaultMessage='Build Your Own'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://mattermost.com/marketplace'\n                                >\n                                    <FormattedMessage\n                                        id='installed_incoming_webhooks.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage('installed_incoming_webhooks.search', 'Search Incoming Webhooks')}\n                loading={this.state.loading}\n            >\n                {(filter: string) => {\n                    const children = this.incomingWebhooks(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {removeIncomingHook} from 'mattermost-redux/actions/integrations';\n\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getIncomingHooks} from 'mattermost-redux/selectors/entities/integrations';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from '@mattermost/types/store';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {ActionResult, GenericAction} from 'mattermost-redux/types/actions';\n\nimport {loadIncomingHooksAndProfilesForTeam} from 'actions/integration_actions.jsx';\n\nimport InstalledIncomingWebhooks from './installed_incoming_webhooks';\n\ntype Actions = {\n    removeIncomingHook: (hookId: string) => Promise<ActionResult>;\n    loadIncomingHooksAndProfilesForTeam: (teamId: string, startPageNumber: number, pageSize: string) => Promise<ActionResult>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const teamId = getCurrentTeamId(state);\n    const canManageOthersWebhooks = haveITeamPermission(state, teamId, Permissions.MANAGE_OTHERS_INCOMING_WEBHOOKS);\n    const incomingHooks = getIncomingHooks(state);\n    const incomingWebhooks = Object.keys(incomingHooks).\n        map((key) => incomingHooks[key]).\n        filter((incomingWebhook) => incomingWebhook.team_id === teamId);\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n\n    return {\n        incomingWebhooks,\n        channels: getAllChannels(state),\n        users: getUsers(state),\n        canManageOthersWebhooks,\n        enableIncomingWebhooks,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<any>, Actions>({\n            loadIncomingHooksAndProfilesForTeam,\n            removeIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledIncomingWebhooks);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Channel} from '@mattermost/types/channels';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    channels: Channel[];\n    onChange?: () => void;\n    value?: string;\n    selectOpen: boolean;\n    selectPrivate: boolean;\n    selectDm: boolean;\n};\n\nexport default class ChannelSelect extends React.PureComponent<Props> {\n    render(): JSX.Element {\n        const options = [\n            <option\n                key=''\n                value=''\n            >\n                {Utils.localizeMessage('channel_select.placeholder', '--- Select a channel ---')}\n            </option>,\n        ];\n\n        this.props.channels.forEach((channel: Channel) => {\n            const channelName = channel.display_name || channel.name;\n            if (channel.type === Constants.OPEN_CHANNEL && this.props.selectOpen) {\n                options.push(\n                    <option\n                        key={channel.id}\n                        value={channel.id}\n                    >\n                        {channelName}\n                    </option>,\n                );\n            } else if (channel.type === Constants.PRIVATE_CHANNEL && this.props.selectPrivate) {\n                options.push(\n                    <option\n                        key={channel.id}\n                        value={channel.id}\n                    >\n                        {channelName}\n                    </option>,\n                );\n            } else if (channel.type === Constants.DM_CHANNEL && this.props.selectDm) {\n                options.push(\n                    <option\n                        key={channel.id}\n                        value={channel.id}\n                    >\n                        {channelName}\n                    </option>,\n                );\n            }\n        });\n\n        return (\n            <select\n                className='form-control'\n                value={this.props.value}\n                onChange={this.props.onChange}\n                id='channelSelect'\n            >\n                {options}\n            </select>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {createSelector} from 'reselect';\n\nimport {getMyChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserLocale} from 'mattermost-redux/selectors/entities/i18n';\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\n\nimport {GlobalState} from '@mattermost/types/store';\n\nimport ChannelSelect from './channel_select';\n\nconst getMyChannelsSorted = createSelector(\n    'getMyChannelsSorted',\n    getMyChannels,\n    getCurrentUserLocale,\n    (channels, locale) => {\n        return [...channels].sort(sortChannelsByTypeAndDisplayName.bind(null, locale));\n    },\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        channels: getMyChannelsSorted(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelSelect);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport ChannelSelect from 'components/channel_select';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\nimport {localizeMessage} from 'utils/utils';\n\nexport default class AbstractIncomingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The header text to render, has id and defaultMessage\n        */\n        header: PropTypes.object.isRequired,\n\n        /**\n        * The footer text to render, has id and defaultMessage\n        */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n        * The server error text after a failed action\n        */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n        * The hook used to set the initial state\n        */\n        initialHook: PropTypes.object,\n\n        /**\n        * Whether to allow configuration of the default post username.\n        */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n        * Whether to allow configuration of the default post icon.\n        */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n\n        /**\n        * The async function to run when the action button is pressed\n        */\n        action: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromHook(this.props.initialHook || {});\n    }\n\n    getStateFromHook = (hook) => {\n        return {\n            displayName: hook.display_name || '',\n            description: hook.description || '',\n            channelId: hook.channel_id || '',\n            channelLocked: hook.channel_locked || false,\n            username: hook.username || '',\n            iconURL: hook.icon_url || '',\n            saving: false,\n            serverError: '',\n            clientError: null,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            serverError: '',\n            clientError: '',\n        });\n\n        if (!this.state.channelId) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_incoming_webhook.channelRequired'\n                        defaultMessage='A valid channel is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const hook = {\n            channel_id: this.state.channelId,\n            channel_locked: this.state.channelLocked,\n            display_name: this.state.displayName,\n            description: this.state.description,\n            username: this.state.username,\n            icon_url: this.state.iconURL,\n        };\n\n        this.props.action(hook).then(() => this.setState({saving: false}));\n    }\n\n    updateDisplayName = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateChannelId = (e) => {\n        this.setState({\n            channelId: e.target.value,\n        });\n    }\n\n    updateChannelLocked = (e) => {\n        this.setState({\n            channelLocked: e.target.checked,\n        });\n    }\n\n    updateUsername = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateIconURL = (e) => {\n        this.setState({\n            iconURL: e.target.value,\n        });\n    }\n\n    render() {\n        var headerToRender = this.props.header;\n        var footerToRender = this.props.footer;\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/incoming_webhooks`}>\n                        <FormattedMessage\n                            id='installed_incoming_webhooks.header'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.displayName.help'\n                                        defaultMessage='Specify a title, of up to 64 characters, for the webhook settings page.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='500'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.description.help'\n                                        defaultMessage='Describe your incoming webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelId'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.channel'\n                                    defaultMessage='Channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <ChannelSelect\n                                    id='channelId'\n                                    value={this.state.channelId}\n                                    onChange={this.updateChannelId}\n                                    selectOpen={true}\n                                    selectPrivate={true}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.channel.help'\n                                        defaultMessage='This is the default public or private channel that receives the webhook payloads. When setting up the webhook, you must belong to the private channel.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelLocked'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.channelLocked'\n                                    defaultMessage='Lock to this channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <input\n                                    id='channelLocked'\n                                    type='checkbox'\n                                    checked={this.state.channelLocked}\n                                    onChange={this.updateChannelLocked}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.channelLocked.help'\n                                        defaultMessage='If set, the incoming webhook can post only to the selected channel.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        { this.props.enablePostUsernameOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='username'\n                                >\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.username'\n                                        defaultMessage='Username'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='username'\n                                        type='text'\n                                        maxLength='22'\n                                        className='form-control'\n                                        value={this.state.username}\n                                        onChange={this.updateUsername}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_incoming_webhook.username.help'\n                                            defaultMessage='Specify the username this integration will post as. Usernames can be up to 22 characters, and can contain lowercase letters, numbers and the symbols \\\"-\\\", \\\"_\\\", and \\\".\\\". If left blank, the name specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        { this.props.enablePostIconOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='iconURL'\n                                >\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.icon_url'\n                                        defaultMessage='Profile Picture'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='iconURL'\n                                        type='text'\n                                        maxLength='1024'\n                                        className='form-control'\n                                        value={this.state.iconURL}\n                                        onChange={this.updateIconURL}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_incoming_webhook.icon_url.help'\n                                            defaultMessage='Enter the URL of a .png or .jpg file for the profile picture of this integration when posting. The file should be at least 128 pixels by 128 pixels. If left blank, the profile picture specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/incoming_webhooks`}\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveWebhook'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport AbstractIncomingWebhook from 'components/integrations/abstract_incoming_webhook';\nimport {Team} from '@mattermost/types/teams';\nimport {IncomingWebhook} from '@mattermost/types/integrations';\n\nconst HEADER = {id: t('integrations.add'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('add_incoming_webhook.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('add_incoming_webhook.saving'), defaultMessage: 'Saving...'};\n\ntype Props = {\n\n    /**\n    * The current team\n    */\n    team: Team;\n\n    /**\n    * Whether to allow configuration of the default post username.\n    */\n    enablePostUsernameOverride: boolean;\n\n    /**\n    * Whether to allow configuration of the default post icon.\n    */\n    enablePostIconOverride: boolean;\n\n    actions: {\n\n        /**\n        * The function to call to add a new incoming webhook\n        */\n        createIncomingHook: (hook: IncomingWebhook) => Promise<{ data?: IncomingWebhook; error?: Error }>;\n    };\n};\n\ntype State = {\n    serverError: string;\n};\n\nexport default class AddIncomingWebhook extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            serverError: '',\n        };\n    }\n\n    addIncomingHook = async (hook: IncomingWebhook) => {\n        this.setState({serverError: ''});\n\n        const {data, error} = await this.props.actions.createIncomingHook(hook);\n        if (data) {\n            getHistory().push(`/${this.props.team.name}/integrations/confirm?type=incoming_webhooks&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    render() {\n        return (\n            <AbstractIncomingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n                action={this.addIncomingHook}\n                serverError={this.state.serverError}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {createIncomingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from '@mattermost/types/store';\nimport {Action, GenericAction} from 'mattermost-redux/types/actions';\nimport {IncomingWebhook} from '@mattermost/types/integrations';\n\nimport AddIncomingWebhook from './add_incoming_webhook';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n\n    return {\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\ntype Actions = {\n    createIncomingHook: (hook: IncomingWebhook) => Promise<{ data?: IncomingWebhook; error?: Error }>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<Action>, Actions>({\n            createIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddIncomingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Team} from '@mattermost/types/teams';\nimport {IncomingWebhook} from '@mattermost/types/integrations';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport AbstractIncomingWebhook from 'components/integrations/abstract_incoming_webhook';\nimport LoadingScreen from 'components/loading_screen';\n\nconst HEADER = {id: t('integrations.edit'), defaultMessage: 'Edit'};\nconst FOOTER = {id: t('update_incoming_webhook.update'), defaultMessage: 'Update'};\nconst LOADING = {id: t('update_incoming_webhook.updating'), defaultMessage: 'Updating...'};\n\ntype Props = {\n\n    /**\n     * The current team\n     */\n    team: Team;\n\n    /**\n     * The incoming webhook to edit\n     */\n    hook?: IncomingWebhook;\n\n    /**\n     * The id of the incoming webhook to edit\n     */\n    hookId: string;\n\n    /**\n     * Whether or not incoming webhooks are enabled.\n     */\n    enableIncomingWebhooks: boolean;\n\n    /**\n     * Whether to allow configuration of the default post username.\n     */\n    enablePostUsernameOverride: boolean;\n\n    /**\n     * Whether to allow configuration of the default post icon.\n     */\n    enablePostIconOverride: boolean;\n\n    actions: {\n\n        /**\n         * The function to call to update an incoming webhook\n         */\n        updateIncomingHook: (hook: IncomingWebhook) => Promise<ActionResult>;\n\n        /**\n         * The function to call to get an incoming webhook\n         */\n        getIncomingHook: (hookId: string) => Promise<ActionResult>;\n    };\n};\n\ntype State = {\n    showConfirmModal: boolean;\n    serverError: string;\n};\n\nexport default class EditIncomingWebhook extends React.PureComponent<Props, State> {\n    private newHook?: IncomingWebhook;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableIncomingWebhooks) {\n            this.props.actions.getIncomingHook(this.props.hookId);\n        }\n    }\n\n    editIncomingHook = async (hook: IncomingWebhook) => {\n        this.newHook = hook;\n\n        if (this.props.hook?.id) {\n            hook.id = this.props.hook.id;\n        }\n\n        await this.submitHook();\n    };\n\n    submitHook = async () => {\n        this.setState({serverError: ''});\n\n        if (!this.newHook) {\n            return;\n        }\n\n        const result = await this.props.actions.updateIncomingHook(this.newHook);\n\n        if ('data' in result) {\n            getHistory().push(`/${this.props.team.name}/integrations/incoming_webhooks`);\n            return;\n        }\n\n        if ('error' in result) {\n            const {error} = result;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    render() {\n        if (!this.props.hook) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractIncomingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n                action={this.editIncomingHook}\n                serverError={this.state.serverError}\n                initialHook={this.props.hook}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getIncomingHook, updateIncomingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc, ActionResult, GenericAction} from 'mattermost-redux/types/actions';\nimport {IncomingWebhook} from '@mattermost/types/integrations';\n\nimport EditIncomingWebhook from './edit_incoming_webhook';\n\ntype Props = {\n    location: Location;\n}\n\ntype Actions = {\n    updateIncomingHook: (hook: IncomingWebhook) => Promise<ActionResult>;\n    getIncomingHook: (hookId: string) => Promise<ActionResult>;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n    const hookId = (new URLSearchParams(ownProps.location.search)).get('id') || '';\n\n    return {\n        hookId,\n        hook: state.entities.integrations.incomingHooks[hookId],\n        enableIncomingWebhooks,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateIncomingHook,\n            getIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditIncomingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport CopyText from 'components/copy_text';\n\nimport {OutgoingWebhook} from '@mattermost/types/integrations';\nimport {Team} from '@mattermost/types/teams';\nimport {UserProfile} from '@mattermost/types/users';\nimport {Channel} from '@mattermost/types/channels';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\nexport function matchesFilter(outgoingWebhook: OutgoingWebhook, channel: Channel, filter: string) {\n    if (!filter) {\n        return true;\n    }\n\n    const {\n        display_name: displayName,\n        description,\n        trigger_words: triggerWords,\n    } = outgoingWebhook;\n\n    if (\n        (displayName && displayName.toLowerCase().indexOf(filter) !== -1) ||\n        (description && description.toLowerCase().indexOf(filter) !== -1)\n    ) {\n        return true;\n    }\n\n    if (triggerWords) {\n        for (const triggerWord of triggerWords) {\n            if (triggerWord.toLowerCase().indexOf(filter) !== -1) {\n                return true;\n            }\n        }\n    }\n\n    if (channel && channel.name) {\n        if (channel.name.toLowerCase().indexOf(filter) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\ntype Props = {\n    outgoingWebhook: OutgoingWebhook;\n    onRegenToken: (outgoingWebhook: OutgoingWebhook) => void;\n    onDelete: (outgoingWebhook: OutgoingWebhook) => void;\n    team: Team;\n    creator: UserProfile;\n    channel: Channel;\n    canChange: boolean;\n    filter?: string;\n}\n\nexport default class InstalledOutgoingWebhook extends React.PureComponent<Props> {\n    handleRegenToken = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n\n        this.props.onRegenToken(this.props.outgoingWebhook);\n    }\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.outgoingWebhook);\n    }\n\n    makeDisplayName(outgoingWebhook: OutgoingWebhook, channel: Channel) {\n        if (outgoingWebhook.display_name) {\n            return outgoingWebhook.display_name;\n        } else if (channel) {\n            return channel.display_name;\n        }\n        return (\n            <FormattedMessage\n                id='installed_outgoing_webhooks.unknown_channel'\n                defaultMessage='A Private Webhook'\n            />\n        );\n    }\n\n    render() {\n        const outgoingWebhook = this.props.outgoingWebhook;\n        const channel = this.props.channel;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n        const triggerWordsFull = 0;\n        const triggerWordsStartsWith = 1;\n\n        if (outgoingWebhook && !matchesFilter(outgoingWebhook, channel, filter)) {\n            return null;\n        }\n\n        const displayName = this.makeDisplayName(outgoingWebhook, channel);\n\n        let description = null;\n        if (outgoingWebhook.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {outgoingWebhook.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let triggerWords = null;\n        if (outgoingWebhook.trigger_words && outgoingWebhook.trigger_words.length > 0) {\n            triggerWords = (\n                <div className='item-details__row'>\n                    <span className='item-details__trigger-words'>\n                        <FormattedMessage\n                            id='installed_integrations.triggerWords'\n                            defaultMessage='Trigger Words: {triggerWords}'\n                            values={{\n                                triggerWords: outgoingWebhook.trigger_words.join(', '),\n                            }}\n                        />\n                    </span>\n                </div>\n            );\n        }\n\n        const urls = (\n            <div className='item-details__row'>\n                <span className='item-details__url word-break--all'>\n                    <FormattedMessage\n                        id='installed_integrations.callback_urls'\n                        defaultMessage='Callback URLs: {urls}'\n                        values={{\n                            urls: outgoingWebhook.callback_urls.join(', '),\n                        }}\n                    />\n                </span>\n            </div>\n        );\n\n        let triggerWhen;\n        if (outgoingWebhook.trigger_when === triggerWordsFull) {\n            triggerWhen = (\n                <FormattedMessage\n                    id='add_outgoing_webhook.triggerWordsTriggerWhenFullWord'\n                    defaultMessage='First word matches a trigger word exactly'\n                />\n            );\n        } else if (outgoingWebhook.trigger_when === triggerWordsStartsWith) {\n            triggerWhen = (\n                <FormattedMessage\n                    id='add_outgoing_webhook.triggerWordsTriggerWhenStartsWith'\n                    defaultMessage='First word starts with a trigger word'\n                />\n            );\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleRegenToken}\n                    >\n                        <FormattedMessage\n                            id='installed_integrations.regenToken'\n                            defaultMessage='Regen Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/outgoing_webhooks/edit?id=${outgoingWebhook.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_outgoing_webhooks.delete.confirm'\n                                defaultMessage='This action permanently deletes the outgoing webhook and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {displayName}\n                        </strong>\n                        {actions}\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__content_type'>\n                            <FormattedMessage\n                                id='installed_integrations.content_type'\n                                defaultMessage='Content-Type: {contentType}'\n                                values={{\n                                    contentType: outgoingWebhook.content_type || 'application/x-www-form-urlencoded',\n                                }}\n                            />\n                        </span>\n                    </div>\n                    {triggerWords}\n                    <div className='item-details__row'>\n                        <span className='item-details__trigger-when'>\n                            <FormattedMessage\n                                id='installed_integrations.triggerWhen'\n                                defaultMessage='Trigger When: {triggerWhen}'\n                                values={{\n                                    triggerWhen,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_integrations.token'\n                                defaultMessage='Token: {token}'\n                                values={{\n                                    token: outgoingWebhook.token,\n                                }}\n                            />\n                            <CopyText\n                                value={outgoingWebhook.token}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: outgoingWebhook.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    {urls}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils';\nimport Constants from 'utils/constants';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport InstalledOutgoingWebhook, {matchesFilter} from 'components/integrations/installed_outgoing_webhook';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {UserProfile} from '@mattermost/types/users';\nimport {Team} from '@mattermost/types/teams';\nimport {OutgoingWebhook} from '@mattermost/types/integrations';\nimport {IDMappedObjects} from '@mattermost/types/utilities';\nimport {Channel} from '@mattermost/types/channels';\n\nexport type Props = {\n\n    /**\n    *  Data used in passing down as props for webhook modifications\n    */\n    team: Team;\n\n    /**\n    * Data used for checking if webhook is created by current user\n    */\n    user: UserProfile;\n\n    /**\n    *  Data used for checking modification privileges\n    */\n    canManageOthersWebhooks: boolean;\n\n    /**\n    * Data used in passing down as props for showing webhook details\n    */\n    outgoingWebhooks: OutgoingWebhook[];\n\n    /**\n    * Data used in sorting for displaying list and as props channel details\n    */\n    channels: IDMappedObjects<Channel>;\n\n    /**\n    *  Data used in passing down as props for webhook -created by label\n    */\n    users: IDMappedObjects<UserProfile>;\n\n    /**\n    *  Data used in passing as argument for loading webhooks\n    */\n    teamId: string;\n\n    actions: {\n\n        /**\n        * The function to call for removing outgoingWebhook\n        */\n        removeOutgoingHook: (hookId: string) => Promise<void>;\n\n        /**\n        * The function to call for outgoingWebhook List and for the status of api\n        */\n        loadOutgoingHooksAndProfilesForTeam: (teamId: string, page: number, perPage: number) => Promise<void>;\n\n        /**\n        * The function to call for regeneration of webhook token\n        */\n        regenOutgoingHookToken: (hookId: string) => Promise<void>;\n    };\n\n    /**\n    * Whether or not outgoing webhooks are enabled.\n    */\n    enableOutgoingWebhooks: boolean;\n}\n\ntype State = {\n    loading: boolean;\n};\n\nexport default class InstalledOutgoingWebhooks extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOutgoingWebhooks) {\n            this.props.actions.loadOutgoingHooksAndProfilesForTeam(\n                this.props.teamId,\n                Constants.Integrations.START_PAGE_NUM,\n                parseInt(Constants.Integrations.PAGE_SIZE, 10),\n            ).then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    regenOutgoingWebhookToken = (outgoingWebhook: OutgoingWebhook) => {\n        this.props.actions.regenOutgoingHookToken(outgoingWebhook.id);\n    }\n\n    removeOutgoingHook = (outgoingWebhook: OutgoingWebhook) => {\n        this.props.actions.removeOutgoingHook(outgoingWebhook.id);\n    }\n\n    outgoingWebhookCompare = (a: OutgoingWebhook, b: OutgoingWebhook) => {\n        let displayNameA = a.display_name;\n        if (!displayNameA) {\n            const channelA = this.props.channels[a.channel_id];\n            if (channelA) {\n                displayNameA = channelA.display_name;\n            } else {\n                displayNameA = localizeMessage('installed_outgoing_webhooks.unknown_channel', 'A Private Webhook');\n            }\n        }\n\n        let displayNameB = b.display_name;\n        if (!displayNameB) {\n            const channelB = this.props.channels[b.channel_id];\n            if (channelB) {\n                displayNameB = channelB.display_name;\n            } else {\n                displayNameB = localizeMessage('installed_outgoing_webhooks.unknown_channel', 'A Private Webhook');\n            }\n        }\n        return displayNameA.localeCompare(displayNameB);\n    }\n\n    outgoingWebhooks = (filter: string) => this.props.outgoingWebhooks.\n        sort(this.outgoingWebhookCompare).\n        filter((outgoingWebhook) => matchesFilter(outgoingWebhook, this.props.channels[outgoingWebhook.channel_id], filter)).\n        map((outgoingWebhook) => {\n            const canChange = this.props.canManageOthersWebhooks || this.props.user.id === outgoingWebhook.creator_id;\n            const channel = this.props.channels[outgoingWebhook.channel_id];\n            return (\n                <InstalledOutgoingWebhook\n                    key={outgoingWebhook.id}\n                    outgoingWebhook={outgoingWebhook}\n                    onRegenToken={this.regenOutgoingWebhookToken}\n                    onDelete={this.removeOutgoingHook}\n                    creator={this.props.users[outgoingWebhook.creator_id] || {}}\n                    canChange={canChange}\n                    team={this.props.team}\n                    channel={channel}\n                />\n            );\n        });\n\n    render() {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.header'\n                        defaultMessage='Installed Outgoing Webhooks'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.add'\n                        defaultMessage='Add Outgoing Webhook'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/outgoing_webhooks/add'}\n                addButtonId='addOutgoingWebhook'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.empty'\n                        defaultMessage='No outgoing webhooks found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_outgoing_webhooks.emptySearch'\n                        defaultMessage='No outgoing webhooks match {searchTerm}'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.help'\n                        defaultMessage='Use outgoing webhooks to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-webhooks-outgoing/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_outgoing_webhooks.help.buildYourOwn'\n                                        defaultMessage='Build your own'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://mattermost.com/marketplace'\n                                >\n                                    <FormattedMessage\n                                        id='installed_outgoing_webhooks.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={localizeMessage('installed_outgoing_webhooks.search', 'Search Outgoing Webhooks')}\n                loading={this.state.loading}\n            >\n                {(filter: string) => {\n                    const children = this.outgoingWebhooks(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport * as Actions from 'mattermost-redux/actions/integrations';\nimport {getOutgoingHooks} from 'mattermost-redux/selectors/entities/integrations';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {loadOutgoingHooksAndProfilesForTeam} from 'actions/integration_actions';\n\nimport {GlobalState} from 'types/store';\n\nimport InstalledOutgoingWebhook, {Props} from './installed_outgoing_webhooks';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const teamId = getCurrentTeamId(state);\n    const canManageOthersWebhooks = haveITeamPermission(state, teamId, Permissions.MANAGE_OTHERS_OUTGOING_WEBHOOKS);\n    const outgoingHooks = getOutgoingHooks(state);\n    const outgoingWebhooks = Object.keys(outgoingHooks).\n        map((key) => outgoingHooks[key]).\n        filter((outgoingWebhook) => outgoingWebhook.team_id === teamId);\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n\n    return {\n        outgoingWebhooks,\n        channels: getAllChannels(state),\n        users: getUsers(state),\n        teamId,\n        canManageOthersWebhooks,\n        enableOutgoingWebhooks,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<any>, Props['actions']>({\n            loadOutgoingHooksAndProfilesForTeam,\n            removeOutgoingHook: Actions.removeOutgoingHook,\n            regenOutgoingHookToken: Actions.regenOutgoingHookToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport ChannelSelect from 'components/channel_select';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\n\nexport default class AbstractOutgoingWebhook extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current team\n         */\n        team: PropTypes.object.isRequired,\n\n        /**\n         * The header text to render, has id and defaultMessage\n         */\n        header: PropTypes.object.isRequired,\n\n        /**\n         * The footer text to render, has id and defaultMessage\n         */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n         * Any extra component/node to render\n         */\n        renderExtra: PropTypes.node.isRequired,\n\n        /**\n         * The server error text after a failed action\n         */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n         * The hook used to set the initial state\n         */\n        initialHook: PropTypes.object,\n\n        /**\n         * The async function to run when the action button is pressed\n         */\n        action: PropTypes.func.isRequired,\n\n        /**\n         * Whether to allow configuration of the default post username.\n         */\n        enablePostUsernameOverride: PropTypes.bool.isRequired,\n\n        /**\n         * Whether to allow configuration of the default post icon.\n         */\n        enablePostIconOverride: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromHook(this.props.initialHook || {});\n    }\n\n    getStateFromHook = (hook) => {\n        let triggerWords = '';\n        if (hook.trigger_words) {\n            let i = 0;\n            for (i = 0; i < hook.trigger_words.length; i++) {\n                triggerWords += hook.trigger_words[i] + '\\n';\n            }\n        }\n\n        let callbackUrls = '';\n        if (hook.callback_urls) {\n            let i = 0;\n            for (i = 0; i < hook.callback_urls.length; i++) {\n                callbackUrls += hook.callback_urls[i] + '\\n';\n            }\n        }\n\n        return {\n            displayName: hook.display_name || '',\n            description: hook.description || '',\n            contentType: hook.content_type || 'application/x-www-form-urlencoded',\n            channelId: hook.channel_id || '',\n            triggerWords,\n            triggerWhen: hook.trigger_when || 0,\n            callbackUrls,\n            saving: false,\n            clientError: null,\n            username: hook.username || '',\n            iconURL: hook.icon_url || '',\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        const triggerWords = [];\n        if (this.state.triggerWords) {\n            for (let triggerWord of this.state.triggerWords.split('\\n')) {\n                triggerWord = triggerWord.trim();\n\n                if (triggerWord.length > 0) {\n                    triggerWords.push(triggerWord);\n                }\n            }\n        }\n\n        if (!this.state.channelId && triggerWords.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_outgoing_webhook.triggerWordsOrChannelRequired'\n                        defaultMessage='A valid channel or a list of trigger words is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const callbackUrls = [];\n        for (let callbackUrl of this.state.callbackUrls.split('\\n')) {\n            callbackUrl = callbackUrl.trim();\n\n            if (callbackUrl.length > 0) {\n                callbackUrls.push(callbackUrl);\n            }\n        }\n\n        if (callbackUrls.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_outgoing_webhook.callbackUrlsRequired'\n                        defaultMessage='One or more callback URLs are required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const hook = {\n            team_id: this.props.team.id,\n            channel_id: this.state.channelId,\n            trigger_words: triggerWords,\n            trigger_when: parseInt(this.state.triggerWhen, 10),\n            callback_urls: callbackUrls,\n            display_name: this.state.displayName,\n            content_type: this.state.contentType,\n            description: this.state.description,\n            username: this.state.username,\n            icon_url: this.state.iconURL,\n        };\n\n        this.props.action(hook).then(() => this.setState({saving: false}));\n    }\n\n    updateDisplayName = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateContentType = (e) => {\n        this.setState({\n            contentType: e.target.value,\n        });\n    }\n\n    updateChannelId = (e) => {\n        this.setState({\n            channelId: e.target.value,\n        });\n    }\n\n    updateTriggerWords = (e) => {\n        this.setState({\n            triggerWords: e.target.value,\n        });\n    }\n\n    updateTriggerWhen = (e) => {\n        this.setState({\n            triggerWhen: e.target.value,\n        });\n    }\n\n    updateCallbackUrls = (e) => {\n        this.setState({\n            callbackUrls: e.target.value,\n        });\n    }\n\n    updateUsername = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateIconURL = (e) => {\n        this.setState({\n            iconURL: e.target.value,\n        });\n    }\n\n    render() {\n        const contentTypeOption1 = 'application/x-www-form-urlencoded';\n        const contentTypeOption2 = 'application/json';\n\n        var headerToRender = this.props.header;\n        var footerToRender = this.props.footer;\n        var renderExtra = this.props.renderExtra;\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/outgoing_webhooks`}>\n                        <FormattedMessage\n                            id='installed_outgoing_webhooks.header'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.displayName.help'\n                                        defaultMessage='Specify a title, of up to 64 characters, for the webhook settings page.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='500'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.description.help'\n                                        defaultMessage='Describe your outgoing webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='contentType'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.content_Type'\n                                    defaultMessage='Content Type'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.contentType}\n                                    onChange={this.updateContentType}\n                                >\n                                    <option\n                                        value={contentTypeOption1}\n                                    >\n                                        {contentTypeOption1}\n                                    </option>\n                                    <option\n                                        value={contentTypeOption2}\n                                    >\n                                        {contentTypeOption2}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help1'\n                                        defaultMessage='Specify the content type by which to send the request.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help2'\n                                        defaultMessage='For the server to encode the parameters in a URL format in the request body, select application/x-www-form-urlencoded.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help3'\n                                        defaultMessage='For the server to format the request body as JSON, select application/json.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelId'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.channel'\n                                    defaultMessage='Channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <ChannelSelect\n                                    id='channelId'\n                                    value={this.state.channelId}\n                                    onChange={this.updateChannelId}\n                                    selectOpen={true}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.channel.help'\n                                        defaultMessage='This field is optional if you specify at least one trigger word. Specify the public channel that delivers the payload to the webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='triggerWords'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.triggerWords'\n                                    defaultMessage='Trigger Words (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='triggerWords'\n                                    rows='3'\n                                    maxLength='1000'\n                                    className='form-control'\n                                    value={this.state.triggerWords}\n                                    onChange={this.updateTriggerWords}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.triggerWords.help'\n                                        defaultMessage='Specify the trigger words that send an HTTP POST request to your application. The trigger can be for the channel, the outgoing webhook, or both. If you select only Channel, trigger words are optional. If you select both, the message must match both values.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='triggerWords'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.triggerWordsTriggerWhen'\n                                    defaultMessage='Trigger When'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.triggerWhen}\n                                    onChange={this.updateTriggerWhen}\n                                >\n                                    <option\n                                        value='0'\n                                    >\n                                        {localizeMessage('add_outgoing_webhook.triggerWordsTriggerWhenFullWord', 'First word matches a trigger word exactly')}\n                                    </option>\n                                    <option\n                                        value='1'\n                                    >\n                                        {localizeMessage('add_outgoing_webhook.triggerWordsTriggerWhenStartsWith', 'First word starts with a trigger word')}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.triggerWordsTriggerWhen.help'\n                                        defaultMessage='Specify when to trigger the outgoing webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='callbackUrls'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.callbackUrls'\n                                    defaultMessage='Callback URLs (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='callbackUrls'\n                                    rows='3'\n                                    maxLength='1000'\n                                    className='form-control'\n                                    value={this.state.callbackUrls}\n                                    onChange={this.updateCallbackUrls}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.callbackUrls.help'\n                                        defaultMessage='Specify the URL that the messages will be sent to. If the URL is private, add it as a {link}.'\n                                        values={{\n                                            link: (\n                                                <a\n                                                    href='https://docs.mattermost.com/configure/configuration-settings.html#session-lengths'\n                                                    target='_blank'\n                                                    rel='noopener noreferrer'\n                                                >\n                                                    <FormattedMessage\n                                                        id='add_outgoing_webhook.callbackUrls.helpLinkText'\n                                                        defaultMessage='trusted internal connection'\n                                                    />\n                                                </a>\n                                            ),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {this.props.enablePostUsernameOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='username'\n                                >\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.username'\n                                        defaultMessage='Username'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='username'\n                                        type='text'\n                                        maxLength='22'\n                                        className='form-control'\n                                        value={this.state.username}\n                                        onChange={this.updateUsername}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_outgoing_webhook.username.help'\n                                            defaultMessage='Specify the username this integration will post as. Usernames can be up to 22 characters, and contain lowercase letters, numbers and the symbols \\\"-\\\", \\\"_\\\", and \\\".\\\". If left blank, the name specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        {this.props.enablePostIconOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='iconURL'\n                                >\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.icon_url'\n                                        defaultMessage='Profile Picture'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='iconURL'\n                                        type='text'\n                                        maxLength='1024'\n                                        className='form-control'\n                                        value={this.state.iconURL}\n                                        onChange={this.updateIconURL}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_outgoing_webhook.icon_url.help'\n                                            defaultMessage='Enter the URL of a .png or .jpg file for this integration to use as the profile picture when posting. The file should be at least 128 pixels by 128 pixels. If left blank, the profile picture specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/outgoing_webhooks`}\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveWebhook'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {t} from 'utils/i18n';\n\nimport AbstractOutgoingWebhook from 'components/integrations/abstract_outgoing_webhook.jsx';\n\nimport {Team} from '@mattermost/types/teams';\nimport {OutgoingWebhook} from '@mattermost/types/integrations';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nconst HEADER = {id: t('integrations.add'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('add_outgoing_webhook.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('add_outgoing_webhook.saving'), defaultMessage: 'Saving...'};\n\nexport type Props = {\n\n    /**\n     * The current team\n     */\n    team: Team;\n\n    actions: {\n\n        /**\n        * The function to call to add a new outgoing webhook\n        */\n        createOutgoingHook: (hook: OutgoingWebhook) => Promise<ActionResult>;\n    };\n\n    /**\n     * Whether to allow configuration of the default post username.\n     */\n    enablePostUsernameOverride: boolean;\n\n    /**\n     * Whether to allow configuration of the default post icon.\n     */\n    enablePostIconOverride: boolean;\n};\n\nconst AddOutgoingWebhook = ({team, actions, enablePostUsernameOverride, enablePostIconOverride}: Props): JSX.Element => {\n    const history = useHistory();\n\n    const [serverError, setServerError] = useState('');\n\n    const addOutgoingHook = async (hook: OutgoingWebhook) => {\n        setServerError('');\n\n        const {data, error} = await actions.createOutgoingHook(hook);\n        if (data) {\n            history.push(`/${team.name}/integrations/confirm?type=outgoing_webhooks&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            setServerError(error.message);\n        }\n    };\n\n    return (\n        <AbstractOutgoingWebhook\n            team={team}\n            header={HEADER}\n            footer={FOOTER}\n            loading={LOADING}\n            renderExtra={''}\n            action={addOutgoingHook}\n            serverError={serverError}\n            enablePostUsernameOverride={enablePostUsernameOverride}\n            enablePostIconOverride={enablePostIconOverride}\n        />\n    );\n};\n\nexport default AddOutgoingWebhook;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {createOutgoingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AddOutgoingWebhook, {Props} from './add_outgoing_webhook';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n    return {\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            createOutgoingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Team} from '@mattermost/types/teams';\nimport {OutgoingWebhook} from '@mattermost/types/integrations';\nimport {ServerError} from '@mattermost/types/errors';\n\nimport {getHistory} from 'utils/browser_history';\nimport ConfirmModal from 'components/confirm_modal';\nimport AbstractOutgoingWebhook from 'components/integrations/abstract_outgoing_webhook.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nconst HEADER = {id: 'integrations.edit', defaultMessage: 'Edit'};\nconst FOOTER = {id: 'update_outgoing_webhook.update', defaultMessage: 'Update'};\nconst LOADING = {id: 'update_outgoing_webhook.updating', defaultMessage: 'Updating...'};\n\ninterface Props {\n\n    /**\n     * The current team\n     */\n    team: Team;\n\n    /**\n     * The outgoing webhook to edit\n     */\n    hook?: OutgoingWebhook;\n\n    /**\n     * The id of the outgoing webhook to edit\n     */\n    hookId: string;\n    actions: {\n\n        /**\n         * The function to call to update an outgoing webhook\n         */\n        updateOutgoingHook: (hook: OutgoingWebhook) => Promise<{ data: OutgoingWebhook; error: ServerError }>;\n\n        /**\n         * The function to call to get an outgoing webhook\n         */\n        getOutgoingHook: (hookId: string) => Promise<{ data: OutgoingWebhook; error: ServerError }>;\n    };\n\n    /**\n     * Whether or not outgoing webhooks are enabled.\n     */\n    enableOutgoingWebhooks?: boolean;\n\n    /**\n     * Whether to allow configuration of the default post username.\n     */\n    enablePostUsernameOverride: boolean;\n\n    /**\n     * Whether to allow configuration of the default post icon.\n     */\n    enablePostIconOverride: boolean;\n}\n\ninterface State {\n    showConfirmModal: boolean;\n    serverError: string;\n}\n\nexport default class EditOutgoingWebhook extends React.PureComponent<Props, State> {\n    private newHook: OutgoingWebhook | undefined;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    componentDidMount(): void {\n        if (this.props.enableOutgoingWebhooks) {\n            this.props.actions.getOutgoingHook(this.props.hookId);\n        }\n    }\n\n    editOutgoingHook = async (hook: OutgoingWebhook): Promise<void> => {\n        this.newHook = hook;\n\n        if (this.props.hook!.id) {\n            hook.id = this.props.hook!.id;\n        }\n\n        if (this.props.hook!.token) {\n            hook.token = this.props.hook!.token;\n        }\n\n        const triggerWordsSame = (this.props.hook!.trigger_words.length === hook!.trigger_words.length) &&\n            this.props.hook!.trigger_words.every((v, i) => v === hook.trigger_words[i]);\n\n        const callbackUrlsSame = (this.props.hook!.callback_urls.length === hook!.callback_urls.length) &&\n            this.props.hook!.callback_urls.every((v, i) => v === hook.callback_urls[i]);\n\n        if (this.props.hook!.content_type !== hook.content_type ||\n            !triggerWordsSame || !callbackUrlsSame) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitHook();\n        }\n    }\n\n    handleConfirmModal = (): void => {\n        this.setState({showConfirmModal: true});\n    }\n\n    confirmModalDismissed = (): void => {\n        this.setState({showConfirmModal: false});\n    }\n\n    submitHook = async (): Promise<void> => {\n        this.setState({serverError: ''});\n\n        const {data, error}: {data: OutgoingWebhook; error: ServerError} = await this.props.actions.updateOutgoingHook(this.newHook!);\n\n        if (data) {\n            getHistory().push(`/${this.props.team.name}/integrations/outgoing_webhooks`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    renderExtra = (): JSX.Element => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_outgoing_webhook.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_outgoing_webhook.confirm'\n                defaultMessage='Edit Outgoing Webhook'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_outgoing_webhook.question'\n                defaultMessage='Your changes may break the existing outgoing webhook. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitHook}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    }\n\n    render(): JSX.Element {\n        if (!this.props.hook) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractOutgoingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editOutgoingHook}\n                serverError={this.state.serverError}\n                initialHook={this.props.hook}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getOutgoingHook, updateOutgoingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc, GenericAction} from 'mattermost-redux/types/actions';\nimport {OutgoingWebhook} from '@mattermost/types/integrations';\nimport {ServerError} from '@mattermost/types/errors';\n\nimport EditOutgoingWebhook from './edit_outgoing_webhook';\n\ntype OwnProps = {\n    location: {\n        search: string | string[][] | Record<string, string> | URLSearchParams | undefined;\n    };\n}\n\ntype Actions = {\n    updateOutgoingHook: (hook: OutgoingWebhook) => Promise<{ data: OutgoingWebhook; error: ServerError }>;\n    getOutgoingHook: (hookId: string) => Promise<{ data: OutgoingWebhook; error: ServerError }>;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const config = getConfig(state);\n    const hookId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n\n    return {\n        hookId: hookId!,\n        hook: state.entities.integrations.outgoingHooks[hookId!],\n        enableOutgoingWebhooks,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateOutgoingHook,\n            getOutgoingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {OAuthApp} from '@mattermost/types/integrations';\nimport {Team} from '@mattermost/types/teams';\n\nimport * as Utils from 'utils/utils';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport CopyText from 'components/copy_text';\n\nimport DeleteIntegrationLink from '../delete_integration_link';\n\nconst FAKE_SECRET = '***************';\n\nexport function matchesFilter(oauthApp: OAuthApp, filter?: string | null): boolean {\n    if (!filter) {\n        return true;\n    }\n\n    return oauthApp.name.toLowerCase().includes(filter);\n}\n\nexport type InstalledOAuthAppProps = {\n\n    /**\n     * The team data\n     */\n    team: Partial<Team>;\n\n    /**\n     * The oauthApp data\n     */\n    oauthApp: OAuthApp;\n\n    /**\n     * Whether the oauth app is created by an App\n     */\n    fromApp: boolean;\n\n    creatorName: string;\n\n    /**\n     * The function to call when Regenerate Secret link is clicked\n     */\n    onRegenerateSecret: (oauthAppId: string) => Promise<{ error?: { message: string } }>;\n\n    /**\n     * The function to call when Delete link is clicked\n     */\n    onDelete: (oauthApp: OAuthApp) => void;\n\n    /**\n     * Set to filter OAuthApp\n     */\n    filter?: string | null;\n}\n\nexport type InstalleOAuthAppState = {\n    clientSecret: string;\n    error?: string | null;\n}\n\nexport default class InstalledOAuthApp extends React.PureComponent<InstalledOAuthAppProps, InstalleOAuthAppState> {\n    constructor(props: InstalledOAuthAppProps) {\n        super(props);\n\n        this.state = {\n            clientSecret: FAKE_SECRET,\n        };\n    }\n\n    handleShowClientSecret = (e?: React.MouseEvent): void => {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n        this.setState({clientSecret: this.props.oauthApp.client_secret});\n    }\n\n    handleHideClientSecret = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        this.setState({clientSecret: FAKE_SECRET});\n    }\n\n    handleRegenerate = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        this.props.onRegenerateSecret(this.props.oauthApp.id).then(\n            ({error}) => {\n                if (error) {\n                    this.setState({error: error.message});\n                } else {\n                    this.setState({error: null});\n                    this.handleShowClientSecret();\n                }\n            },\n        );\n    }\n\n    handleDelete = (): void => {\n        this.props.onDelete(this.props.oauthApp);\n    }\n\n    render(): React.ReactNode {\n        const {oauthApp, creatorName} = this.props;\n        let error;\n\n        if (this.state.error) {\n            error = (\n                <FormError\n                    error={this.state.error}\n                />\n            );\n        }\n\n        if (!matchesFilter(oauthApp, this.props.filter)) {\n            return null;\n        }\n\n        let name;\n        if (oauthApp.name) {\n            name = oauthApp.name;\n        } else {\n            name = (\n                <FormattedMessage\n                    id='installed_integrations.unnamed_oauth_app'\n                    defaultMessage='Unnamed OAuth 2.0 Application'\n                />\n            );\n        }\n\n        let description;\n        if (oauthApp.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {oauthApp.description}\n                    </span>\n                </div>\n            );\n        }\n\n        const urls = (\n            <div className='item-details__row'>\n                <span className='item-details__url word-break--all'>\n                    <FormattedMessage\n                        id='installed_integrations.callback_urls'\n                        defaultMessage='Callback URLs: {urls}'\n                        values={{\n                            urls: oauthApp.callback_urls.join(', '),\n                        }}\n                    />\n                </span>\n            </div>\n        );\n\n        let isTrusted;\n        if (oauthApp.is_trusted) {\n            isTrusted = Utils.localizeMessage('installed_oauth_apps.trusted.yes', 'Yes');\n        } else {\n            isTrusted = Utils.localizeMessage('installed_oauth_apps.trusted.no', 'No');\n        }\n\n        let showHide;\n        let clientSecret;\n        if (this.state.clientSecret === FAKE_SECRET) {\n            showHide = (\n                <button\n                    id='showSecretButton'\n                    className='style--none color--link'\n                    onClick={this.handleShowClientSecret}\n                >\n                    <FormattedMessage\n                        id='installed_integrations.showSecret'\n                        defaultMessage='Show Secret'\n                    />\n                </button>\n            );\n            clientSecret = (\n                <span className='item-details__token'>\n                    <FormattedMessage\n                        id='installed_integrations.client_secret'\n                        defaultMessage='Client Secret: **{clientSecret}**'\n                        values={{\n                            clientSecret: this.state.clientSecret,\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            showHide = (\n                <button\n                    id='hideSecretButton'\n                    className='style--none color--link'\n                    onClick={this.handleHideClientSecret}\n                >\n                    <FormattedMessage\n                        id='installed_integrations.hideSecret'\n                        defaultMessage='Hide Secret'\n                    />\n                </button>\n            );\n            clientSecret = (\n                <span className='item-details__token'>\n                    <FormattedMarkdownMessage\n                        id='installed_integrations.client_secret'\n                        defaultMessage='Client Secret: **{clientSecret}**'\n                        values={{\n                            clientSecret: this.state.clientSecret,\n                        }}\n                    />\n                    <CopyText\n                        idMessage='integrations.copy_client_secret'\n                        defaultMessage='Copy Client Secret'\n                        value={this.state.clientSecret}\n                    />\n                </span>\n            );\n        }\n\n        const regen = (\n            <button\n                id='regenerateSecretButton'\n                className='style--none color--link'\n                onClick={this.handleRegenerate}\n            >\n                <FormattedMessage\n                    id='installed_integrations.regenSecret'\n                    defaultMessage='Regenerate Secret'\n                />\n            </button>\n        );\n\n        let icon;\n        if (oauthApp.icon_url) {\n            icon = (\n                <div className='integration__icon integration-list__icon'>\n                    <img\n                        alt={'get app screenshot'}\n                        src={oauthApp.icon_url}\n                    />\n                </div>\n            );\n        }\n\n        let actions;\n        if (!this.props.fromApp) {\n            actions = (\n                <div className='item-actions'>\n                    {showHide}\n                    {' - '}\n                    {regen}\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/oauth2-apps/edit?id=${oauthApp.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_oauth_apps.delete.confirm'\n                                defaultMessage='This action permanently deletes the OAuth 2.0 application and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        let appInfo = (\n            <div className='item-details__row'>\n                <span className='item-details__creation'>\n                    <FormattedMessage\n                        id='installed_integrations.fromApp'\n                        defaultMessage='Managed by Apps Framework'\n                    />\n                </span>\n            </div>\n        );\n        if (!this.props.fromApp) {\n            appInfo = (\n                <>\n                    <div className='item-details__row'>\n                        <span className='item-details__url word-break--all'>\n                            <FormattedMarkdownMessage\n                                id='installed_oauth_apps.is_trusted'\n                                defaultMessage='Is Trusted: **{isTrusted}**'\n                                values={{\n                                    isTrusted,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMarkdownMessage\n                                id='installed_integrations.client_id'\n                                defaultMessage='Client ID: **{clientId}**'\n                                values={{\n                                    clientId: oauthApp.id,\n                                }}\n                            />\n                            <CopyText\n                                idMessage='integrations.copy_client_id'\n                                defaultMessage='Copy Client Id'\n                                value={oauthApp.id}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        {clientSecret}\n                    </div>\n                    {urls}\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: creatorName,\n                                    createAt: oauthApp.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </>\n            );\n        }\n\n        return (\n            <div className='backstage-list__item'>\n                {icon}\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {name}\n                        </strong>\n                        {actions}\n                    </div>\n                    {error}\n                    {description}\n                    {appInfo}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport {getDisplayNameByUser} from 'utils/utils';\n\nimport InstalledOAuthApp, {InstalledOAuthAppProps} from './installed_oauth_app';\n\nfunction mapStateToProps(state: GlobalState, ownProps: InstalledOAuthAppProps) {\n    const oauthApp = ownProps.oauthApp || {};\n    return {\n        creatorName: getDisplayNameByUser(state, getUser(state, oauthApp.creator_id)),\n    };\n}\n\nexport default connect(mapStateToProps)(InstalledOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {OAuthApp} from '@mattermost/types/integrations';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport InstalledOAuthApp from '../installed_oauth_app';\nimport {matchesFilter} from '../installed_oauth_app/installed_oauth_app';\n\ntype Props = {\n\n    /**\n    * The team data\n    */\n    team: {name: string};\n\n    /**\n    * The oauthApps data\n    */\n    oauthApps: {\n        [key: string]: OAuthApp;\n    };\n\n    /**\n     * List of IDs for apps managed by the App Framwork\n     */\n    appsOAuthAppIDs: string[];\n\n    /**\n    * Set if user can manage oath\n    */\n    canManageOauth: boolean;\n\n    /**\n    * Whether or not OAuth applications are enabled.\n    */\n    enableOAuthServiceProvider: boolean;\n\n    actions: ({\n\n        /**\n        * The function to call to fetch OAuth apps\n        */\n        loadOAuthAppsAndProfiles: (page?: number, perPage?: number) => Promise<void>;\n\n        /**\n        * The function to call when Regenerate Secret link is clicked\n        */\n        regenOAuthAppSecret: (appId: string) => Promise<{ error?: Error }>;\n\n        /**\n        * The function to call when Delete link is clicked\n        */\n        deleteOAuthApp: (appId: string) => Promise<void>;\n    });\n};\n\ntype State = {\n    loading: boolean;\n};\n\nexport default class InstalledOAuthApps extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount(): void {\n        if (this.props.enableOAuthServiceProvider) {\n            this.props.actions.loadOAuthAppsAndProfiles().then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    deleteOAuthApp = (app: OAuthApp): void => {\n        if (app && app.id) {\n            this.props.actions.deleteOAuthApp(app.id);\n        }\n    }\n\n    oauthAppCompare(a: OAuthApp, b: OAuthApp): number {\n        let nameA = a.name.toString();\n        if (!nameA) {\n            nameA = localizeMessage('installed_integrations.unnamed_oauth_app', 'Unnamed OAuth 2.0 Application');\n        }\n\n        let nameB = b.name.toString();\n        if (!nameB) {\n            nameB = localizeMessage('installed_integrations.unnamed_oauth_app', 'Unnamed OAuth 2.0 Application');\n        }\n\n        return nameA.localeCompare(nameB);\n    }\n\n    oauthApps = (filter?: string) => Object.values(this.props.oauthApps).\n        filter((app) => matchesFilter(app, filter)).\n        sort(this.oauthAppCompare).\n        map((app) => {\n            return (\n                <InstalledOAuthApp\n                    key={app.id}\n                    oauthApp={app}\n                    onRegenerateSecret={this.props.actions.regenOAuthAppSecret}\n                    onDelete={this.deleteOAuthApp}\n                    team={this.props.team}\n                    creatorName=''\n                    fromApp={this.props.appsOAuthAppIDs.includes(app.id)}\n                />\n            );\n        });\n\n    render(): JSX.Element {\n        const integrationsEnabled = this.props.enableOAuthServiceProvider && this.props.canManageOauth;\n        let props;\n        if (integrationsEnabled) {\n            props = {\n                addLink: '/' + this.props.team.name + '/integrations/oauth2-apps/add',\n                addText: localizeMessage('installed_oauth_apps.add', 'Add OAuth 2.0 Application'),\n                addButtonId: 'addOauthApp',\n            };\n        }\n\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_oauth_apps.header'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_oauth_apps.help'\n                        defaultMessage='Create {oauthApplications} to securely integrate bots and third-party apps with Mattermost. Visit the {appDirectory} to find available self-hosted apps.'\n                        values={{\n                            oauthApplications: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-oauth2/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_oauth_apps.help.oauthApplications'\n                                        defaultMessage='OAuth 2.0 applications'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://mattermost.com/marketplace/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_oauth_apps.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                emptyText={\n                    <FormattedMessage\n                        id='installed_oauth_apps.empty'\n                        defaultMessage='No OAuth 2.0 Applications found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_oauth_apps.emptySearch'\n                        defaultMessage='No OAuth 2.0 Applications match {searchTerm}'\n                    />\n                }\n                searchPlaceholder={localizeMessage('installed_oauth_apps.search', 'Search OAuth 2.0 Applications')}\n                loading={this.state.loading}\n                {...props}\n            >\n                {(filter: string) => {\n                    const children = this.oauthApps(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {regenOAuthAppSecret, deleteOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {getAppsOAuthAppIDs, getOAuthApps} from 'mattermost-redux/selectors/entities/integrations';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from '@mattermost/types/store';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {loadOAuthAppsAndProfiles} from 'actions/integration_actions';\n\nimport InstalledOAuthApps from './installed_oauth_apps';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        canManageOauth: haveISystemPermission(state, {permission: Permissions.MANAGE_OAUTH}),\n        oauthApps: getOAuthApps(state),\n        appsOAuthAppIDs: getAppsOAuthAppIDs(state),\n        enableOAuthServiceProvider,\n        team: getCurrentTeam(state),\n    };\n}\n\ntype Actions = {\n    loadOAuthAppsAndProfiles: (page?: number, perPage?: number) => Promise<void>;\n    regenOAuthAppSecret: (appId: string) => Promise<{ error?: Error }>;\n    deleteOAuthApp: (appId: string) => Promise<void>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject, Actions>({\n            loadOAuthAppsAndProfiles,\n            regenOAuthAppSecret,\n            deleteOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledOAuthApps);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\n\nexport default class AbstractOAuthApp extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The header text to render, has id and defaultMessage\n        */\n        header: PropTypes.object.isRequired,\n\n        /**\n        * The footer text to render, has id and defaultMessage\n        */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n         * Any extra component/node to render\n         */\n        renderExtra: PropTypes.node.isRequired,\n\n        /**\n        * The server error text after a failed action\n        */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n        * The OAuthApp used to set the initial state\n        */\n        initialApp: PropTypes.object,\n\n        /**\n        * The async function to run when the action button is pressed\n        */\n        action: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.image = new Image();\n        this.image.onload = this.imageLoaded;\n        this.icon_url = React.createRef();\n        this.state = this.getStateFromApp(this.props.initialApp || {});\n    }\n\n    getStateFromApp = (app) => {\n        return {\n            name: app.name || '',\n            description: app.description || '',\n            homepage: app.homepage || '',\n            icon_url: app.icon_url || '',\n            callbackUrls: app.callback_urls ? app.callback_urls.join('\\n') : '',\n            is_trusted: app.is_trusted || false,\n            has_icon: Boolean(app.icon_url),\n            saving: false,\n            clientError: null,\n        };\n    }\n\n    imageLoaded = () => {\n        this.setState({\n            has_icon: true,\n            icon_url: this.icon_url.current.value,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        if (!this.state.name) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.nameRequired'\n                        defaultMessage='Name for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!this.state.description) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.descriptionRequired'\n                        defaultMessage='Description for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!this.state.homepage) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.homepageRequired'\n                        defaultMessage='Homepage for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const callbackUrls = [];\n        for (let callbackUrl of this.state.callbackUrls.split('\\n')) {\n            callbackUrl = callbackUrl.trim();\n\n            if (callbackUrl.length > 0) {\n                callbackUrls.push(callbackUrl);\n            }\n        }\n\n        if (callbackUrls.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.callbackUrlsRequired'\n                        defaultMessage='One or more callback URLs are required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const app = {\n            name: this.state.name,\n            callback_urls: callbackUrls,\n            homepage: this.state.homepage,\n            description: this.state.description,\n            is_trusted: this.state.is_trusted,\n            icon_url: this.state.icon_url,\n        };\n\n        this.props.action(app).then(() => this.setState({saving: false}));\n    }\n\n    updateName = (e) => {\n        this.setState({\n            name: e.target.value,\n        });\n    }\n\n    updateTrusted = (e) => {\n        this.setState({\n            is_trusted: e.target.value === 'true',\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateHomepage = (e) => {\n        this.setState({\n            homepage: e.target.value,\n        });\n    }\n\n    updateIconUrl = (e) => {\n        this.setState({\n            has_icon: false,\n            icon_url: e.target.value,\n        });\n        this.image.src = e.target.value;\n    }\n\n    updateCallbackUrls = (e) => {\n        this.setState({\n            callbackUrls: e.target.value,\n        });\n    }\n\n    render() {\n        const headerToRender = this.props.header;\n        const footerToRender = this.props.footer;\n        const renderExtra = this.props.renderExtra;\n\n        let icon;\n        if (this.state.has_icon) {\n            icon = (\n                <div className='integration__icon'>\n                    <img\n                        alt={'integration icon'}\n                        src={this.state.icon_url}\n                    />\n                </div>\n            );\n        }\n\n        const trusted = (\n            <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='is_trusted'\n                    >\n                        <FormattedMessage\n                            id='installed_oauth_apps.trusted'\n                            defaultMessage='Is Trusted'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <label className='radio-inline'>\n                            <input\n                                type='radio'\n                                value='true'\n                                name='is_trusted'\n                                checked={this.state.is_trusted}\n                                onChange={this.updateTrusted}\n                            />\n                            <FormattedMessage\n                                id='installed_oauth_apps.trusted.yes'\n                                defaultMessage='Yes'\n                            />\n                        </label>\n                        <label className='radio-inline'>\n                            <input\n                                type='radio'\n                                value='false'\n                                name='is_trusted'\n                                checked={!this.state.is_trusted}\n                                onChange={this.updateTrusted}\n                            />\n                            <FormattedMessage\n                                id='installed_oauth_apps.trusted.no'\n                                defaultMessage='No'\n                            />\n                        </label>\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_oauth_app.trusted.help'\n                                defaultMessage='If true, the OAuth 2.0 application is considered trusted by the Mattermost server and does not require the user to accept authorization. If false, a window opens to ask the user to accept or deny the authorization.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            </SystemPermissionGate>\n        );\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/oauth2-apps`}>\n                        <FormattedMessage\n                            id='installed_oauth_apps.header'\n                            defaultMessage='Installed OAuth2 Apps'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    {icon}\n                    <form className='form-horizontal'>\n                        {trusted}\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='name'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.name'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='name'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.name}\n                                    onChange={this.updateName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.name.help'\n                                        defaultMessage='Specify the display name, of up to 64 characters, for your OAuth 2.0 application.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='512'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.description.help'\n                                        defaultMessage='Describe your OAuth 2.0 application.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='homepage'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.homepage'\n                                    defaultMessage='Homepage'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='homepage'\n                                    type='url'\n                                    maxLength='256'\n                                    className='form-control'\n                                    value={this.state.homepage}\n                                    onChange={this.updateHomepage}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.homepage.help'\n                                        defaultMessage='This is the URL for the homepage of the OAuth 2.0 application. Depending on your server configuration, use HTTP or HTTPS in the URL.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='icon_url'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.iconUrl'\n                                    defaultMessage='Icon URL'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='icon_url'\n                                    ref={this.icon_url}\n                                    type='url'\n                                    maxLength='512'\n                                    className='form-control'\n                                    value={this.state.icon_url}\n                                    onChange={this.updateIconUrl}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.icon.help'\n                                        defaultMessage='(Optional) The URL of the image used for your OAuth 2.0 application. Make sure you use HTTP or HTTPS in your URL.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='callbackUrls'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.callbackUrls'\n                                    defaultMessage='Callback URLs (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='callbackUrls'\n                                    rows='3'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.callbackUrls}\n                                    onChange={this.updateCallbackUrls}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.callbackUrls.help'\n                                        defaultMessage='The redirect URIs to which the service will redirect users after accepting or denying authorization of your application, and which will handle authorization codes or access tokens. Must be a valid URL and start with http:// or https://.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={`/${this.props.team.name}/integrations/oauth2-apps`}\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveOauthApp'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {OAuthApp} from '@mattermost/types/integrations.js';\nimport {Team} from '@mattermost/types/teams.js';\n\nimport {ActionResult} from 'mattermost-redux/types/actions.js';\n\nimport {t} from 'utils/i18n';\nimport AbstractOAuthApp from '../abstract_oauth_app.jsx';\n\nconst HEADER = {id: t('add_oauth_app.header'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('installed_oauth_apps.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('installed_oauth_apps.saving'), defaultMessage: 'Saving...'};\n\nexport type Props = {\n\n    /**\n    * The team data\n    */\n    team: Team;\n\n    actions: {\n\n        /**\n        * The function to call to add new OAuthApp\n        */\n        addOAuthApp: (app: OAuthApp) => Promise<ActionResult>;\n    };\n};\n\nconst AddOAuthApp = ({team, actions}: Props): JSX.Element => {\n    const history = useHistory();\n\n    const [serverError, setServerError] = useState('');\n\n    const addOAuthApp = async (app: OAuthApp) => {\n        setServerError('');\n\n        const {data, error} = await actions.addOAuthApp(app);\n        if (data) {\n            history.push(`/${team.name}/integrations/confirm?type=oauth2-apps&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            setServerError(error.message);\n        }\n    };\n\n    return (\n        <AbstractOAuthApp\n            team={team}\n            header={HEADER}\n            footer={FOOTER}\n            loading={LOADING}\n            renderExtra={''}\n            action={addOAuthApp}\n            serverError={serverError}\n        />\n    );\n};\n\nexport default AddOAuthApp;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {addOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport AddOAuthApp, {Props} from './add_oauth_app';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            addOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {OAuthApp} from '@mattermost/types/integrations';\nimport {Team} from '@mattermost/types/teams';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getHistory} from 'utils/browser_history';\nimport LoadingScreen from 'components/loading_screen';\nimport ConfirmModal from 'components/confirm_modal';\nimport AbstractOAuthApp from '../abstract_oauth_app.jsx';\n\nconst HEADER = {id: 'integrations.edit', defaultMessage: 'Edit'};\nconst FOOTER = {id: 'update_incoming_webhook.update', defaultMessage: 'Update'};\nconst LOADING = {id: 'update_incoming_webhook.updating', defaultMessage: 'Updating...'};\n\ntype Actions = {\n    getOAuthApp: (id: string) => OAuthApp;\n    editOAuthApp: (app: OAuthApp) => Promise<ActionResult>;\n};\n\ntype Props = {\n    team: Team;\n    oauthAppId: string;\n    oauthApp: OAuthApp;\n    actions: Actions;\n    enableOAuthServiceProvider: boolean;\n};\n\ntype State = {\n    showConfirmModal: boolean;\n    serverError: string;\n};\n\nexport default class EditOAuthApp extends React.PureComponent<Props, State> {\n    newApp: OAuthApp;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n        this.newApp = this.props.oauthApp;\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.props.actions.getOAuthApp(this.props.oauthAppId);\n        }\n    }\n\n    editOAuthApp = async (app: OAuthApp) => {\n        this.newApp = app;\n\n        if (this.props.oauthApp.id) {\n            app.id = this.props.oauthApp.id;\n        }\n\n        const callbackUrlsSame = (this.props.oauthApp.callback_urls.length === app.callback_urls.length) &&\n            this.props.oauthApp.callback_urls.every((v, i) => v === app.callback_urls[i]);\n\n        if (callbackUrlsSame === false) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitOAuthApp();\n        }\n    }\n\n    handleConfirmModal = () => {\n        this.setState({showConfirmModal: true});\n    }\n\n    confirmModalDismissed = () => {\n        this.setState({showConfirmModal: false});\n    }\n\n    submitOAuthApp = async () => {\n        this.setState({serverError: ''});\n\n        const res = await this.props.actions.editOAuthApp(this.newApp);\n\n        if ('data' in res && res.data) {\n            getHistory().push(`/${this.props.team.name}/integrations/oauth2-apps`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if ('error' in res) {\n            const {error: err} = res;\n            this.setState({serverError: err.message});\n        }\n    }\n\n    renderExtra = () => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_oauth_app.confirm'\n                defaultMessage='Edit OAuth 2.0 application'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_oauth_app.question'\n                defaultMessage='Your changes may break the existing OAuth 2.0 application. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitOAuthApp}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    }\n\n    render() {\n        if (!this.props.oauthApp) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractOAuthApp\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editOAuthApp}\n                serverError={this.state.serverError}\n                initialApp={this.props.oauthApp}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {GlobalState} from '@mattermost/types/store';\nimport {getOAuthApp, editOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {OAuthApp} from '@mattermost/types/integrations';\n\nimport EditOAuthApp from './edit_oauth_app';\n\ntype Actions = {\n    getOAuthApp: (id: string) => OAuthApp;\n    editOAuthApp: (app: OAuthApp) => Promise<ActionResult>;\n};\n\ntype Props = {\n    location: Location;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n    const oauthAppId: string = (new URLSearchParams(ownProps.location.search)).get('id') || '';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        oauthAppId,\n        oauthApp: state.entities.integrations.oauthApps[oauthAppId],\n        enableOAuthServiceProvider,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getOAuthApp,\n            editOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport CopyText from 'components/copy_text';\n\nimport {Command} from '@mattermost/types/integrations';\nimport {Team} from '@mattermost/types/teams';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\ntype Props = {\n\n    /**\n     * The team data\n     */\n    team: Team;\n\n    /**\n     * Installed slash command to display\n     */\n    command: Command;\n\n    /**\n     * The function to call when Regenerate Token link is clicked\n     */\n    onRegenToken: (command: Command) => void ;\n\n    /**\n     * The function to call when Delete link is clicked\n     */\n    onDelete: (command: Command) => void ;\n\n    /**\n     * Set to filter command, comes from BackstageList\n     */\n    filter?: string;\n\n    /**\n     * The creator user data\n     */\n    creator: UserProfile;\n\n    /**\n     * Set to show edit link\n     */\n    canChange: boolean;\n}\n\nexport function matchesFilter(command: Command, filter?: string) {\n    if (!filter) {\n        return true;\n    }\n\n    return command.display_name.toLowerCase().indexOf(filter) !== -1 ||\n        command.description.toLowerCase().indexOf(filter) !== -1 ||\n        command.trigger.toLowerCase().indexOf(filter) !== -1;\n}\n\nexport default class InstalledCommand extends React.PureComponent<Props> {\n    handleRegenToken = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        this.props.onRegenToken(this.props.command);\n    }\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.command);\n    }\n\n    render() {\n        const command = this.props.command;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n\n        if (!matchesFilter(command, filter)) {\n            return null;\n        }\n\n        let name;\n\n        if (command.display_name) {\n            name = command.display_name;\n        } else {\n            name = (\n                <FormattedMessage\n                    id='installed_commands.unnamed_command'\n                    defaultMessage='Unnamed Slash Command'\n                />\n            );\n        }\n\n        let description = null;\n        if (command.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {command.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let trigger = '- /' + command.trigger;\n        if (command.auto_complete && command.auto_complete_hint) {\n            trigger += ' ' + command.auto_complete_hint;\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleRegenToken}\n                    >\n                        <FormattedMessage\n                            id='installed_integrations.regenToken'\n                            defaultMessage='Regenerate Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/commands/edit?id=${command.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_commands.delete.confirm'\n                                defaultMessage='This action permanently deletes the slash command and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        const commandToken = command.token;\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <div>\n                            <strong className='item-details__name'>\n                                {name}\n                            </strong>\n                            <span className='item-details__trigger'>\n                                {trigger}\n                            </span>\n                        </div>\n                        {actions}\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_integrations.token'\n                                defaultMessage='Token: {token}'\n                                values={{\n                                    token: commandToken,\n                                }}\n                            />\n                            <CopyText\n                                value={commandToken}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: command.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport * as Utils from 'utils/utils';\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {Team} from '@mattermost/types/teams';\nimport {UserProfile} from '@mattermost/types/users';\nimport {RelationOneToOne} from '@mattermost/types/utilities';\nimport {Command} from '@mattermost/types/integrations';\nimport InstalledCommand, {matchesFilter} from '../installed_command';\n\ntype Props = {\n    team: Team;\n    user: UserProfile;\n    users: RelationOneToOne<UserProfile, UserProfile>;\n\n    // Installed slash commands to display\n    commands: Command[];\n    loading: boolean;\n\n    // Set to allow changes to installed slash commands\n    canManageOthersSlashCommands: boolean;\n    actions: {\n\n        // The function to call when Regenerate Token link is clicked\n        regenCommandToken: (id: string) => Promise<ActionResult>;\n\n        // The function to call when Delete link is clicked\n        deleteCommand: (id: string) => Promise<ActionResult>;\n    };\n}\n\nexport default class InstalledCommands extends React.PureComponent<Props> {\n    public regenCommandToken = (command: Command): void => {\n        this.props.actions.regenCommandToken(command.id);\n    }\n\n    public deleteCommand = (command: Command): void => {\n        this.props.actions.deleteCommand(command.id);\n    }\n\n    private commandCompare(a: Command, b: Command) {\n        let nameA = a.display_name;\n        if (!nameA) {\n            nameA = Utils.localizeMessage('installed_commands.unnamed_command', 'Unnamed Slash Command');\n        }\n\n        let nameB = b.display_name;\n        if (!nameB) {\n            nameB = Utils.localizeMessage('installed_commands.unnamed_command', 'Unnamed Slash Command');\n        }\n\n        return nameA.localeCompare(nameB);\n    }\n\n    public render(): JSX.Element {\n        const commands = (filter: string) => this.props.commands.\n            filter((command) => command.team_id === this.props.team.id).\n            filter((command) => matchesFilter(command, filter)).\n            sort(this.commandCompare).map((command) => {\n                const canChange = this.props.canManageOthersSlashCommands || this.props.user.id === command.creator_id;\n\n                return (\n                    <InstalledCommand\n                        key={command.id}\n                        team={this.props.team}\n                        command={command}\n                        onRegenToken={this.regenCommandToken}\n                        onDelete={this.deleteCommand}\n                        creator={this.props.users[command.creator_id] || {}}\n                        canChange={canChange}\n                    />\n                );\n            });\n\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_commands.header'\n                        defaultMessage='Installed Slash Commands'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_commands.add'\n                        defaultMessage='Add Slash Command'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/commands/add'}\n                addButtonId='addSlashCommand'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_commands.empty'\n                        defaultMessage='No slash commands found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMarkdownMessage\n                        id='installed_commands.emptySearch'\n                        defaultMessage='No slash commands match {searchTerm}'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_commands.help'\n                        defaultMessage='Use slash commands to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-slash-commands/'\n                                >\n                                    <FormattedMessage\n                                        id='installed_commands.help.buildYourOwn'\n                                        defaultMessage='Build Your Own'\n                                    />\n                                </a>\n                            ),\n                            appDirectory: (\n                                <a\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    href='https://mattermost.com/marketplace'\n                                >\n                                    <FormattedMessage\n                                        id='installed_commands.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </a>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage('installed_commands.search', 'Search Slash Commands')}\n                loading={this.props.loading}\n            >\n                {(filter: string) => {\n                    const children = commands(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {deleteCommand, regenCommandToken} from 'mattermost-redux/actions/integrations';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {GenericAction, ActionResult, ActionFunc} from 'mattermost-redux/types/actions';\nimport {GlobalState} from '@mattermost/types/store';\n\nimport InstalledCommands from './installed_commands';\n\ntype Props = {\n    team: {\n        id: string;\n    };\n}\n\ntype Actions = {\n    regenCommandToken: (id: string) => Promise<ActionResult>;\n    deleteCommand: (id: string) => Promise<ActionResult>;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const canManageOthersSlashCommands = haveITeamPermission(state, ownProps.team.id, Permissions.MANAGE_OTHERS_SLASH_COMMANDS);\n\n    return {\n        canManageOthersSlashCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            regenCommandToken,\n            deleteCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledCommands);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n';\n\nconst REQUEST_POST = 'P';\nconst REQUEST_GET = 'G';\n\nexport default class AbstractCommand extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * The current team\n        */\n        team: PropTypes.object.isRequired,\n\n        /**\n        * The header text to render, has id and defaultMessage\n        */\n        header: PropTypes.object.isRequired,\n\n        /**\n        * The footer text to render, has id and defaultMessage\n        */\n        footer: PropTypes.object.isRequired,\n\n        /**\n        * The spinner loading text to render, has id and defaultMessage\n        */\n        loading: PropTypes.object.isRequired,\n\n        /**\n         * Any extra component/node to render\n         */\n        renderExtra: PropTypes.node.isRequired,\n\n        /**\n        * The server error text after a failed action\n        */\n        serverError: PropTypes.string.isRequired,\n\n        /**\n        * The Command used to set the initial state\n        */\n        initialCommand: PropTypes.object,\n\n        /**\n        * The async function to run when the action button is pressed\n        */\n        action: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromCommand(this.props.initialCommand || {});\n    }\n\n    getStateFromCommand = (command) => {\n        return {\n            displayName: command.display_name || '',\n            description: command.description || '',\n            trigger: command.trigger || '',\n            url: command.url || '',\n            method: command.method || REQUEST_POST,\n            username: command.username || '',\n            iconUrl: command.icon_url || '',\n            autocomplete: command.auto_complete || false,\n            autocompleteHint: command.auto_complete_hint || '',\n            autocompleteDescription: command.auto_complete_desc || '',\n            saving: false,\n            clientError: null,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        let triggerWord = this.state.trigger.trim().toLowerCase();\n        if (triggerWord.indexOf('/') === 0) {\n            triggerWord = triggerWord.substr(1);\n        }\n\n        const command = {\n            display_name: this.state.displayName,\n            description: this.state.description,\n            trigger: triggerWord,\n            url: this.state.url.trim(),\n            method: this.state.method,\n            username: this.state.username,\n            icon_url: this.state.iconUrl,\n            auto_complete: this.state.autocomplete,\n            team_id: this.props.team.id,\n        };\n\n        if (command.auto_complete) {\n            command.auto_complete_desc = this.state.autocompleteDescription;\n            command.auto_complete_hint = this.state.autocompleteHint;\n        }\n\n        if (!command.trigger) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerRequired'\n                        defaultMessage='A trigger word is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf('/') === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSlash'\n                        defaultMessage='A trigger word cannot begin with a /'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf(' ') !== -1) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSpace'\n                        defaultMessage='A trigger word must not contain spaces'\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (command.trigger.length < Constants.MIN_TRIGGER_LENGTH ||\n            command.trigger.length > Constants.MAX_TRIGGER_LENGTH) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidLength'\n                        defaultMessage='A trigger word must contain between {min} and {max} characters'\n                        values={{\n                            min: Constants.MIN_TRIGGER_LENGTH,\n                            max: Constants.MAX_TRIGGER_LENGTH,\n                        }}\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!command.url) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.urlRequired'\n                        defaultMessage='A request URL is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        this.props.action(command).then(() => this.setState({saving: false}));\n    }\n\n    updateDisplayName = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    }\n\n    updateDescription = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    updateTrigger = (e) => {\n        this.setState({\n            trigger: e.target.value,\n        });\n    }\n\n    updateUrl = (e) => {\n        this.setState({\n            url: e.target.value,\n        });\n    }\n\n    updateMethod = (e) => {\n        this.setState({\n            method: e.target.value,\n        });\n    }\n\n    updateUsername = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    updateIconUrl = (e) => {\n        this.setState({\n            iconUrl: e.target.value,\n        });\n    }\n\n    updateAutocomplete = (e) => {\n        this.setState({\n            autocomplete: e.target.checked,\n        });\n    }\n\n    updateAutocompleteHint = (e) => {\n        this.setState({\n            autocompleteHint: e.target.value,\n        });\n    }\n\n    updateAutocompleteDescription = (e) => {\n        this.setState({\n            autocompleteDescription: e.target.value,\n        });\n    }\n\n    render() {\n        let autocompleteHint = null;\n        let autocompleteDescription = null;\n\n        if (this.state.autocomplete) {\n            autocompleteHint = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteHint'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteHint'\n                            defaultMessage='Autocomplete Hint'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <LocalizedInput\n                            id='autocompleteHint'\n                            type='text'\n                            maxLength='1024'\n                            className='form-control'\n                            value={this.state.autocompleteHint}\n                            onChange={this.updateAutocompleteHint}\n                            placeholder={{id: t('add_command.autocompleteHint.placeholder'), defaultMessage: 'Example: [Patient Name]'}}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteHint.help'\n                                defaultMessage='(Optional) Specify the arguments associated with your slash command. These are displayed as help on the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n\n            autocompleteDescription = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteDescription'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteDescription'\n                            defaultMessage='Autocomplete Description'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <LocalizedInput\n                            id='description'\n                            type='text'\n                            maxLength='128'\n                            className='form-control'\n                            value={this.state.autocompleteDescription}\n                            onChange={this.updateAutocompleteDescription}\n                            placeholder={{id: t('add_command.autocompleteDescription.placeholder'), defaultMessage: 'Example: \"Returns search results for patient records\"'}}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteDescription.help'\n                                defaultMessage='(Optional) Describe your slash command for the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/integrations/commands'}>\n                        <FormattedMessage\n                            id='installed_command.header'\n                            defaultMessage='Slash Commands'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={this.props.header.id}\n                        defaultMessage={this.props.header.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_command.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.displayName.help'\n                                        defaultMessage='Specify a title, of up to 64 characters, for the slash command settings page.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_command.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength='128'\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.description.help'\n                                        defaultMessage='Describe your slash command.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='trigger'\n                            >\n                                <FormattedMessage\n                                    id='add_command.trigger'\n                                    defaultMessage='Command Trigger Word'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='trigger'\n                                    type='text'\n                                    maxLength={Constants.MAX_TRIGGER_LENGTH}\n                                    className='form-control'\n                                    value={this.state.trigger}\n                                    onChange={this.updateTrigger}\n                                    placeholder={{id: t('add_command.trigger.placeholder'), defaultMessage: 'Command trigger e.g. \"hello\" not including the slash'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.help'\n                                        defaultMessage='Specify a trigger word that is not a built-in command, does not contain spaces, and does not begin with the slash character.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpExamples'\n                                        defaultMessage='Examples: client, employee, patient, weather'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpReserved'\n                                        defaultMessage='Reserved: {link}'\n                                        values={{\n                                            link: (\n                                                <a\n                                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-slash-commands/#built-in-commands'\n                                                    target='_blank'\n                                                    rel='noopener noreferrer'\n                                                >\n                                                    <FormattedMessage\n                                                        id='add_command.trigger.helpReservedLinkText'\n                                                        defaultMessage='See built-in slash commands'\n                                                    />\n                                                </a>\n                                            ),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='url'\n                            >\n                                <FormattedMessage\n                                    id='add_command.url'\n                                    defaultMessage='Request URL'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='url'\n                                    type='text'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.url}\n                                    onChange={this.updateUrl}\n                                    placeholder={{id: t('add_command.url.placeholder'), defaultMessage: 'Must start with http:// or https://'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.url.help'\n                                        defaultMessage='Specify the callback URL to receive the HTTP POST or GET event request when the slash command is run.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='method'\n                            >\n                                <FormattedMessage\n                                    id='add_command.method'\n                                    defaultMessage='Request Method'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    id='method'\n                                    className='form-control'\n                                    value={this.state.method}\n                                    onChange={this.updateMethod}\n                                >\n                                    <option value={REQUEST_POST}>\n                                        {Utils.localizeMessage('add_command.method.post', 'POST')}\n                                    </option>\n                                    <option value={REQUEST_GET}>\n                                        {Utils.localizeMessage('add_command.method.get', 'GET')}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.method.help'\n                                        defaultMessage='Specify the type of request, either POST or GET, sent to the endpoint that Mattermost hits to reach your application.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='username'\n                            >\n                                <FormattedMessage\n                                    id='add_command.username'\n                                    defaultMessage='Response Username'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='username'\n                                    type='text'\n                                    maxLength='64'\n                                    className='form-control'\n                                    value={this.state.username}\n                                    onChange={this.updateUsername}\n                                    placeholder={{id: t('add_command.username.placeholder'), defaultMessage: 'Username'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.username.help'\n                                        defaultMessage='(Optional) Specify the name to use when posting responses for this slash command. Usernames can be up to 22 characters, and contain lowercase letters, numbers, and the symbols \\\"-\\\", \\\"_\\\", and \\\".\\\". If left blank, your Mattermost username is used.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='iconUrl'\n                            >\n                                <FormattedMessage\n                                    id='add_command.iconUrl'\n                                    defaultMessage='Response Icon'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedInput\n                                    id='iconUrl'\n                                    type='text'\n                                    maxLength='1024'\n                                    className='form-control'\n                                    value={this.state.iconUrl}\n                                    onChange={this.updateIconUrl}\n                                    placeholder={{id: t('add_command.iconUrl.placeholder'), defaultMessage: 'https://www.example.com/myicon.png'}}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.iconUrl.help'\n                                        defaultMessage='(Optional) Enter the URL of a .png or .jpg file to use as the icon when posting responses to this slash command. The file must be at least 128 pixels by 128 pixels. If left blank, your profile picture is used.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='autocomplete'\n                            >\n                                <FormattedMessage\n                                    id='add_command.autocomplete'\n                                    defaultMessage='Autocomplete'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <input\n                                    id='autocomplete'\n                                    type='checkbox'\n                                    checked={this.state.autocomplete}\n                                    onChange={this.updateAutocomplete}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.autocomplete.help'\n                                        defaultMessage='(Optional) Show your slash command on the autocomplete list when someone types \"/\" in the input box.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {autocompleteHint}\n                        {autocompleteDescription}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-link btn-sm'\n                                to={'/' + this.props.team.name + '/integrations/commands'}\n                            >\n                                <FormattedMessage\n                                    id='add_command.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={Utils.localizeMessage(this.props.loading.id, this.props.loading.defaultMessage)}\n                                onClick={this.handleSubmit}\n                                id='saveCommand'\n                            >\n                                <FormattedMessage\n                                    id={this.props.footer.id}\n                                    defaultMessage={this.props.footer.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {this.props.renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {Command} from '@mattermost/types/integrations.js';\nimport {Team} from '@mattermost/types/teams.js';\n\nimport {ActionResult} from 'mattermost-redux/types/actions.js';\n\nimport {t} from 'utils/i18n';\n\nimport AbstractCommand from '../abstract_command.jsx';\n\nconst HEADER = {id: t('integrations.add'), defaultMessage: 'Add'};\nconst FOOTER = {id: t('add_command.save'), defaultMessage: 'Save'};\nconst LOADING = {id: t('add_command.saving'), defaultMessage: 'Saving...'};\n\nexport type Props = {\n\n    /**\n    * The team data\n    */\n    team: Team;\n\n    actions: {\n\n        /**\n        * The function to call to add new command\n        */\n        addCommand: (command: Command) => Promise<ActionResult>;\n    };\n};\n\nconst AddCommand = ({team, actions}: Props) => {\n    const history = useHistory();\n\n    const [serverError, setServerError] = useState('');\n\n    const addCommand = async (command: Command) => {\n        setServerError('');\n\n        const {data, error} = await actions.addCommand(command);\n        if (data) {\n            history.push(`/${team.name}/integrations/commands/confirm?type=commands&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            setServerError(error.message);\n        }\n    };\n\n    return (\n        <AbstractCommand\n            team={team}\n            header={HEADER}\n            footer={FOOTER}\n            loading={LOADING}\n            renderExtra={''}\n            action={addCommand}\n            serverError={serverError}\n        />\n    );\n};\n\nexport default AddCommand;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, ActionCreatorsMapObject, Dispatch} from 'redux';\n\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {addCommand} from 'mattermost-redux/actions/integrations';\n\nimport AddCommand, {Props} from './add_command';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            addCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddCommand);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Team} from '@mattermost/types/teams';\nimport {Command} from '@mattermost/types/integrations';\nimport {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {getHistory} from 'utils/browser_history';\nimport {t} from 'utils/i18n';\nimport LoadingScreen from 'components/loading_screen';\nimport ConfirmModal from 'components/confirm_modal';\nimport AbstractCommand from '../abstract_command.jsx';\n\nconst HEADER = {id: t('integrations.edit'), defaultMessage: 'Edit'};\nconst FOOTER = {id: t('edit_command.update'), defaultMessage: 'Update'};\nconst LOADING = {id: t('edit_command.updating'), defaultMessage: 'Updating...'};\n\ntype Props = {\n\n    /**\n    * The current team\n    */\n    team: Team;\n\n    /**\n    * The id of the command to edit\n    */\n    commandId: string | null;\n\n    /**\n    * Installed slash commands to display\n    */\n    commands: RelationOneToOne<Command, Command>;\n    actions: {\n\n        /**\n        * The function to call to fetch team commands\n        */\n        getCustomTeamCommands: (teamId: string) => Promise<Command[]>;\n\n        /**\n        * The function to call to edit command\n        */\n        editCommand: (command?: Command) => Promise<{data?: Command; error?: Error}>;\n    };\n\n    /**\n    * Whether or not commands are enabled.\n    */\n    enableCommands: boolean;\n}\n\ntype State = {\n    originalCommand: Command | null;\n    showConfirmModal: boolean;\n    serverError: string;\n\n}\n\nexport default class EditCommand extends React.PureComponent<Props, State> {\n    private newCommand?: Command;\n\n    public constructor(props: Props) {\n        super(props);\n        this.newCommand = undefined;\n\n        this.state = {\n            originalCommand: null,\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    public componentDidMount(): void {\n        if (this.props.enableCommands) {\n            this.props.actions.getCustomTeamCommands(this.props.team.id).then(\n                () => {\n                    this.setState({\n                        originalCommand: Object.values(this.props.commands).filter((command) => command.id === this.props.commandId)[0],\n                    });\n                },\n            );\n        }\n    }\n\n    public editCommand = async (command: Command): Promise<void> => {\n        this.newCommand = command;\n\n        if (this.state.originalCommand?.id) {\n            command.id = this.state.originalCommand.id;\n        }\n\n        if (this.state.originalCommand?.url !== this.newCommand.url ||\n            this.state.originalCommand?.trigger !== this.newCommand.trigger ||\n            this.state.originalCommand?.method !== this.newCommand.method) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitCommand();\n        }\n    }\n\n    public handleConfirmModal = (): void => {\n        this.setState({showConfirmModal: true});\n    }\n\n    public confirmModalDismissed = (): void => {\n        this.setState({showConfirmModal: false});\n    }\n\n    public submitCommand = async (): Promise<void> => {\n        this.setState({serverError: ''});\n\n        const {data, error} = await this.props.actions.editCommand(this.newCommand);\n\n        if (data) {\n            getHistory().push(`/${this.props.team.name}/integrations/commands`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    public renderExtra = (): JSX.Element => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_command.confirm'\n                defaultMessage='Edit Slash Command'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_command.question'\n                defaultMessage='Your changes may break the existing slash command. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitCommand}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    }\n\n    public render(): JSX.Element {\n        if (!this.state.originalCommand) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractCommand\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editCommand}\n                serverError={this.state.serverError}\n                initialCommand={this.state.originalCommand}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {editCommand, getCustomTeamCommands} from 'mattermost-redux/actions/integrations';\nimport {getCommands} from 'mattermost-redux/selectors/entities/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {GlobalState} from '@mattermost/types/store';\nimport {GenericAction, ActionFunc} from 'mattermost-redux/types/actions';\nimport {Command} from '@mattermost/types/integrations';\n\nimport EditCommand from './edit_command';\n\ntype Props = {\n    location: Location;\n}\n\ntype Actions = {\n    getCustomTeamCommands: (teamId: string) => Promise<Command[]>;\n    editCommand: (command?: Command) => Promise<{data?: Command; error?: Error}>;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n    const commandId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const enableCommands = config.EnableCommands === 'true';\n\n    return {\n        commandId,\n        commands: getCommands(state),\n        enableCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getCustomTeamCommands,\n            editCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditCommand);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link, useHistory} from 'react-router-dom';\n\nimport {Constants, ErrorPageTypes} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\n\nimport {Team} from '@mattermost/types/teams';\nimport {Command, IncomingWebhook, OAuthApp, OutgoingWebhook} from '@mattermost/types/integrations';\nimport {IDMappedObjects} from '@mattermost/types/utilities';\n\nimport CopyText from 'components/copy_text';\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport {Bot} from '@mattermost/types/bots';\n\ntype Props = {\n    team: Team;\n    location: {search: string};\n    commands: IDMappedObjects<Command>;\n    oauthApps: IDMappedObjects<OAuthApp>;\n    incomingHooks: IDMappedObjects<IncomingWebhook>;\n    outgoingHooks: IDMappedObjects<OutgoingWebhook>;\n    bots: Record<string, Bot>;\n}\n\nconst ConfirmIntegration = ({team, location, commands, oauthApps, incomingHooks, outgoingHooks, bots}: Props): JSX.Element | null => {\n    const history = useHistory();\n\n    const type = (new URLSearchParams(location.search)).get('type') || '';\n    const id = (new URLSearchParams(location.search)).get('id') || '';\n\n    useEffect(() => {\n        window.addEventListener('keypress', handleKeyPress);\n\n        return () => {\n            window.removeEventListener('keypress', handleKeyPress);\n        };\n    });\n\n    const handleKeyPress = (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            history.push('/' + team.name + '/integrations/' + type);\n        }\n    };\n\n    let headerText: JSX.Element;\n    let helpText: JSX.Element | JSX.Element[];\n    let tokenText: JSX.Element;\n\n    const command = commands[id];\n    const incomingHook = incomingHooks[id];\n    const outgoingHook = outgoingHooks[id];\n    const oauthApp = oauthApps[id];\n    const bot = bots[id];\n\n    if (type === Constants.Integrations.COMMAND && command) {\n        const commandToken = command.token;\n\n        headerText = (\n            <FormattedMessage\n                id={'installed_commands.header'}\n                defaultMessage='Slash Commands'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='add_command.doneHelp'\n                    defaultMessage='Your slash command is set up. The following token will be sent in the outgoing payload. Please use it to verify the request came from your Mattermost team (details at <link>Slash Commands</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <a\n                                href='https://developers.mattermost.com/integrate/admin-guide/admin-slash-commands/'\n                                target='_blank'\n                                rel='noreferrer'\n                            >\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMarkdownMessage\n                    id='add_command.token'\n                    defaultMessage='**Token**: {token}'\n                    values={{token: commandToken}}\n                />\n                <CopyText value={commandToken}/>\n            </p>\n        );\n    } else if (type === Constants.Integrations.INCOMING_WEBHOOK && incomingHook) {\n        const incomingHookToken = getSiteURL() + '/hooks/' + incomingHook.id;\n\n        headerText = (\n            <FormattedMessage\n                id={'installed_incoming_webhooks.header'}\n                defaultMessage='Incoming Webhooks'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='add_incoming_webhook.doneHelp'\n                    defaultMessage='Your incoming webhook is set up. Please send data to the following URL (details at <link>Incoming Webhooks</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <a\n                                href='https://developers.mattermost.com/integrate/admin-guide/admin-webhooks-incoming/'\n                                target='_blank'\n                                rel='noreferrer'\n                            >\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMarkdownMessage\n                    id='add_incoming_webhook.url'\n                    defaultMessage='**URL**: {url}'\n                    values={{url: '`' + incomingHookToken + '`'}}\n                />\n                <CopyText value={incomingHookToken}/>\n            </p>\n        );\n    } else if (type === Constants.Integrations.OUTGOING_WEBHOOK && outgoingHook) {\n        const outgoingHookToken = outgoingHook.token;\n\n        headerText = (\n            <FormattedMessage\n                id={'installed_outgoing_webhooks.header'}\n                defaultMessage='Outgoing Webhooks'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='add_outgoing_webhook.doneHelp'\n                    defaultMessage='Your outgoing webhook is set up. The following token will be sent in the outgoing payload. Please use it to verify that the request came from your Mattermost team (details at <link>Outgoing Webhooks</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <a\n                                href='https://developers.mattermost.com/integrate/admin-guide/admin-webhooks-outgoing/'\n                                target='_blank'\n                                rel='noreferrer'\n                            >\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMarkdownMessage\n                    id='add_outgoing_webhook.token'\n                    defaultMessage='**Token**: {token}'\n                    values={{token: outgoingHookToken}}\n                />\n                <CopyText value={outgoingHookToken}/>\n            </p>\n        );\n    } else if (type === Constants.Integrations.OAUTH_APP && oauthApp) {\n        const oauthAppToken = oauthApp.id;\n        const oauthAppSecret = oauthApp.client_secret;\n\n        headerText = (\n            <FormattedMessage\n                id={'installed_oauth_apps.header'}\n                defaultMessage='OAuth 2.0 Applications'\n            />\n        );\n\n        helpText = [];\n        helpText.push(\n            <p key='add_oauth_app.doneHelp'>\n                <FormattedMessage\n                    id='add_oauth_app.doneHelp'\n                    defaultMessage='Your OAuth 2.0 application is set up. Please use the following Client ID and Client Secret when requesting authorization for your application (details at <link>oAuth 2 Applications</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <a\n                                href='https://developers.mattermost.com/integrate/admin-guide/admin-oauth2/'\n                                target='_blank'\n                                rel='noreferrer'\n                            >\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </p>,\n        );\n        helpText.push(\n            <p key='add_oauth_app.clientId'>\n                <FormattedMarkdownMessage\n                    id='add_oauth_app.clientId'\n                    defaultMessage='**Client ID**: {id}'\n                    values={{id: oauthAppToken}}\n                />\n                <CopyText\n                    idMessage='integrations.copy_client_id'\n                    defaultMessage='Copy Client Id'\n                    value={oauthAppToken}\n                />\n                <br/>\n                <FormattedMarkdownMessage\n                    id='add_oauth_app.clientSecret'\n                    defaultMessage='**Client Secret**: {secret}'\n                    values={{secret: oauthAppSecret}}\n                />\n                <CopyText\n                    idMessage='integrations.copy_client_secret'\n                    defaultMessage='Copy Client Secret'\n                    value={oauthAppSecret}\n                />\n            </p>,\n        );\n\n        helpText.push(\n            <p key='add_oauth_app.doneUrlHelp'>\n                <FormattedMessage\n                    id='add_oauth_app.doneUrlHelp'\n                    defaultMessage='Here are your authorized redirect URLs.'\n                />\n            </p>,\n        );\n\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMarkdownMessage\n                    id='add_oauth_app.url'\n                    defaultMessage='**URL(s)**: {url}'\n                    values={{url: oauthApp.callback_urls.join(', ')}}\n                />\n            </p>\n        );\n    } else if (type === Constants.Integrations.BOT && bot) {\n        const botToken = (new URLSearchParams(location.search)).get('token') || '';\n\n        headerText = (\n            <FormattedMessage\n                id='bots.manage.header'\n                defaultMessage='Bot Accounts'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='bots.manage.created.text'\n                    defaultMessage='Your bot account **{botname}** has been created successfully. Please use the following access token to connect to the bot (see [documentation](https://mattermost.com/pl/default-bot-accounts) for further details).'\n                    values={{\n                        botname: bot.display_name || bot.username,\n                        strong: (msg: string) => <strong>{msg}</strong>,\n                        link: (msg: string) => (\n                            <a\n                                href='https://mattermost.com/pl/default-bot-accounts'\n                                target='_blank'\n                                rel='noreferrer'\n                            >\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMarkdownMessage\n                    id='add_outgoing_webhook.token'\n                    defaultMessage='**Token**: {token}'\n                    values={{token: botToken}}\n                />\n                <CopyText value={botToken}/>\n                <br/>\n                <br/>\n                <FormattedMessage\n                    id='add_outgoing_webhook.token.message'\n                    defaultMessage='Make sure to add this bot account to teams and channels you want it to interact in. See <link>documentation</link> to learn more.'\n                    values={{\n                        link: (msg: string) => (\n                            <a\n                                href='https://mattermost.com/pl/default-bot-accounts'\n                                target='_blank'\n                                rel='noreferrer'\n                            >\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </p>\n        );\n    } else {\n        history.replace(`/error?type=${ErrorPageTypes.PAGE_NOT_FOUND}`);\n        return null;\n    }\n\n    return (\n        <div className='backstage-content row'>\n            <BackstageHeader>\n                <Link to={'/' + team.name + '/integrations/' + type}>\n                    {headerText}\n                </Link>\n                <FormattedMessage\n                    id='integrations.add'\n                    defaultMessage='Add'\n                />\n            </BackstageHeader>\n            <div className='backstage-form backstage-form__confirmation'>\n                <h4\n                    className='backstage-form__title'\n                    id='formTitle'\n                >\n                    <FormattedMessage\n                        id='integrations.successful'\n                        defaultMessage='Setup Successful'\n                    />\n                </h4>\n                {helpText}\n                {tokenText}\n                <div className='backstage-form__footer'>\n                    <Link\n                        className='btn btn-primary'\n                        type='submit'\n                        to={'/' + team.name + '/integrations/' + type}\n                        id='doneButton'\n                    >\n                        <FormattedMessage\n                            id='integrations.done'\n                            defaultMessage='Done'\n                        />\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ConfirmIntegration;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCommands, getOAuthApps, getIncomingHooks, getOutgoingHooks} from 'mattermost-redux/selectors/entities/integrations';\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\n\nimport {GlobalState} from 'types/store';\n\nimport ConfirmIntegration from './confirm_integration';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        commands: getCommands(state),\n        oauthApps: getOAuthApps(state),\n        incomingHooks: getIncomingHooks(state),\n        outgoingHooks: getOutgoingHooks(state),\n        bots: getBotAccounts(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ConfirmIntegration);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport {Team} from '@mattermost/types/teams';\n\nimport {UserProfile} from '@mattermost/types/users';\n\nimport {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {Command} from '@mattermost/types/integrations';\n\nimport InstalledCommands from 'components/integrations/installed_commands';\nimport AddCommand from 'components/integrations/add_command';\nimport EditCommand from 'components/integrations/edit_command';\nimport ConfirmIntegration from 'components/integrations/confirm_integration';\n\ninterface IProps {\n    component: any;\n    extraProps: {\n        loading: boolean;\n        commands: Command[];\n        users?: RelationOneToOne<UserProfile, UserProfile>;\n        team?: Team;\n        user?: UserProfile;\n    };\n    path: string;\n}\n\nconst CommandRoute = ({component: Component, extraProps, ...rest}: IProps) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\ntype Props = {\n\n    /**\n     * The team data needed to pass into child components\n     */\n    team?: Team;\n\n    /**\n     * The user data needed to pass into child components\n     */\n    user?: UserProfile;\n\n    /**\n     * The users collection\n     */\n    users?: RelationOneToOne<UserProfile, UserProfile>;\n\n    /**\n     * Installed slash commands to display\n     */\n    commands: Command[];\n\n    /**\n     * Object from react-router\n     */\n    match: {\n        url: string;\n    };\n\n    actions: {\n\n        /**\n         * The function to call to fetch team commands\n         */\n        loadCommandsAndProfilesForTeam: (teamId?: string) => any; // TechDebt-TODO: This needs to be changed to 'Promise<void>'\n    };\n\n    /**\n     * Whether or not commands are enabled.\n     */\n    enableCommands?: boolean;\n};\n\ntype State = {\n    loading: boolean;\n};\n\nexport default class CommandsContainer extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableCommands) {\n            this.props.actions.loadCommandsAndProfilesForTeam(this.props.team?.id).then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    render() {\n        const extraProps = {\n            loading: this.state.loading,\n            commands: this.props.commands || [],\n            users: this.props.users,\n            team: this.props.team,\n            user: this.props.user,\n        };\n        return (\n            <div>\n                <Switch>\n                    <Route\n                        exact={true}\n                        path={`${this.props.match.url}/`}\n                        render={() => (<Redirect to={`${this.props.match.url}/installed`}/>)}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/installed`}\n                        component={InstalledCommands}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/add`}\n                        component={AddCommand}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/edit`}\n                        component={EditCommand}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/confirm`}\n                        component={ConfirmIntegration}\n                    />\n                </Switch>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {AnyAction, bindActionCreators, Dispatch} from 'redux';\n\nimport {getCommands} from 'mattermost-redux/selectors/entities/integrations';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from '@mattermost/types/store';\n\nimport {loadCommandsAndProfilesForTeam} from 'actions/integration_actions';\n\nimport CommandsContainer from './commands_container';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enableCommands = config.EnableCommands === 'true';\n\n    return {\n        commands: Object.values(getCommands(state)),\n        users: getUsers(state),\n        enableCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            loadCommandsAndProfilesForTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommandsContainer);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\nimport {Route, NavLink} from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n    name: string;\n    title: ReactNode;\n    icon: string;\n    parentLink?: string;\n    children?: ReactNode[];\n}\n\nconst BackstageCategory = ({name, title, icon, parentLink, children = []}: Props) => {\n    const link = parentLink + '/' + name;\n\n    return (\n        <li className='backstage-sidebar__category'>\n            <NavLink\n                to={link}\n                className='category-title'\n                activeClassName='category-title--active'\n            >\n                <i className={classNames('fa ', icon)}/>\n                <span className='category-title__text'>\n                    {title}\n                </span>\n            </NavLink>\n            {\n                children && children.length > 0 &&\n                    <Route\n                        path={link}\n                        render={() => (\n                            <ul className='sections'>\n                                {\n                                    React.Children.map(children, (child) => {\n                                        if (!child) {\n                                            return child;\n                                        }\n\n                                        return React.cloneElement(child as JSX.Element, {\n                                            parentLink: link,\n                                        });\n                                    })\n                                }\n                            </ul>\n                        )}\n                    />\n            }\n        </li>\n    );\n};\n\nexport default BackstageCategory;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\nimport {NavLink} from 'react-router-dom';\n\ntype Props = {\n    name: string;\n    title: ReactNode;\n    subsection?: boolean;\n    parentLink?: string;\n    children?: JSX.Element[];\n    id?: string;\n}\n\nconst BackstageSection = ({name, title, subsection = false, parentLink = '', children = [], id}: Props) => {\n    const link = parentLink + '/' + name;\n\n    let clonedChildren = null;\n    if (children.length > 0) {\n        clonedChildren = (\n            <ul className='subsections'>\n                {\n                    React.Children.map(children, (child) => {\n                        return React.cloneElement(child, {\n                            parentLink: link,\n                            subsection: true,\n                        });\n                    })\n                }\n            </ul>\n        );\n    }\n\n    const className = subsection ? 'subsection' : 'section';\n\n    return (\n        <li\n            className={className}\n            id={id}\n        >\n            <NavLink\n                className={`${className}-title`}\n                activeClassName={`${className}-title--active`}\n                to={link}\n            >\n                <span className={`${className}-title__text`}>\n                    {title}\n                </span>\n            </NavLink>\n            {clonedChildren}\n        </li>\n    );\n};\n\nexport default BackstageSection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {Team} from '@mattermost/types/teams';\nimport {UserProfile} from '@mattermost/types/users';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport BackstageCategory from './backstage_category';\nimport BackstageSection from './backstage_section';\n\ntype Props = {\n    team: Team;\n    user: UserProfile;\n    enableCustomEmoji: boolean;\n    enableIncomingWebhooks: boolean;\n    enableOutgoingWebhooks: boolean;\n    enableCommands: boolean;\n    enableOAuthServiceProvider: boolean;\n    canCreateOrDeleteCustomEmoji: boolean;\n    canManageIntegrations: boolean;\n}\n\nexport default class BackstageSidebar extends React.PureComponent<Props> {\n    renderCustomEmoji() {\n        if (!this.props.enableCustomEmoji || !this.props.canCreateOrDeleteCustomEmoji) {\n            return null;\n        }\n\n        return (\n            <BackstageCategory\n                name='emoji'\n                parentLink={'/' + this.props.team.name}\n                icon='fa-smile-o'\n                title={\n                    <FormattedMessage\n                        id='backstage_sidebar.emoji'\n                        defaultMessage='Custom Emoji'\n                    />\n                }\n            />\n        );\n    }\n\n    renderIntegrations() {\n        if (!this.props.canManageIntegrations) {\n            return null;\n        }\n\n        let incomingWebhooks;\n        if (this.props.enableIncomingWebhooks) {\n            incomingWebhooks = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_INCOMING_WEBHOOKS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='incoming_webhooks'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.incoming_webhooks'\n                                defaultMessage='Incoming Webhooks'\n                            />\n                        )}\n                        id='incomingWebhooks'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let outgoingWebhooks: JSX.Element | null = null;\n        if (this.props.enableOutgoingWebhooks) {\n            outgoingWebhooks = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='outgoing_webhooks'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.outgoing_webhooks'\n                                defaultMessage='Outgoing Webhooks'\n                            />\n                        )}\n                        id='outgoingWebhooks'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let commands: JSX.Element | null = null;\n        if (this.props.enableCommands) {\n            commands = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_SLASH_COMMANDS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='commands'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.commands'\n                                defaultMessage='Slash Commands'\n                            />\n                        )}\n                        id='slashCommands'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let oauthApps: JSX.Element | null = null;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthApps = (\n                <SystemPermissionGate permissions={[Permissions.MANAGE_OAUTH]}>\n                    <BackstageSection\n                        name='oauth2-apps'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.oauthApps'\n                                defaultMessage='OAuth 2.0 Applications'\n                            />\n                        }\n                        id='oauthApps'\n                    />\n                </SystemPermissionGate>\n            );\n        }\n\n        // Note that we allow managing bot accounts even if bot account creation is disabled: only\n        // a permissions check is required.\n        const botAccounts = (\n            <SystemPermissionGate permissions={['manage_bots', 'manage_others_bots']}>\n                <BackstageSection\n                    name='bots'\n                    parentLink={'/' + this.props.team.name + '/integrations'}\n                    title={\n                        <FormattedMessage\n                            id='backstage_sidebar.bots'\n                            defaultMessage='Bot Accounts'\n                        />\n                    }\n                    id='botAccounts'\n                />\n            </SystemPermissionGate>\n        );\n\n        return (\n            <BackstageCategory\n                name='integrations'\n                icon='fa-link'\n                parentLink={'/' + this.props.team.name}\n                title={\n                    <FormattedMessage\n                        id='backstage_sidebar.integrations'\n                        defaultMessage='Integrations'\n                    />\n                }\n            >\n                {incomingWebhooks}\n                {outgoingWebhooks}\n                {commands}\n                {oauthApps}\n                {botAccounts}\n            </BackstageCategory>\n        );\n    }\n\n    render() {\n        return (\n            <div className='backstage-sidebar'>\n                <ul>\n                    {this.renderCustomEmoji()}\n                    {this.renderIntegrations()}\n                </ul>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ComponentType, useRef} from 'react';\nimport {match, Route, Switch} from 'react-router-dom';\nimport {createGlobalStyle} from 'styled-components';\n\nimport {UserProfile} from '@mattermost/types/users.js';\n\nimport {Team} from '@mattermost/types/teams.js';\n\nimport Bots from 'components/integrations/bots';\nimport AddBot from 'components/integrations/bots/add_bot';\nimport Integrations from 'components/integrations';\nimport Emoji from 'components/emoji';\nimport AddEmoji from 'components/emoji/add_emoji';\nimport InstalledIncomingWebhooks from 'components/integrations/installed_incoming_webhooks';\nimport AddIncomingWehook from 'components/integrations/add_incoming_webhook';\nimport EditIncomingWebhook from 'components/integrations/edit_incoming_webhook';\nimport InstalledOutgoingWebhooks from 'components/integrations/installed_outgoing_webhooks';\nimport AddOutgoingWebhook from 'components/integrations/add_outgoing_webhook';\nimport EditOutgoingWebhook from 'components/integrations/edit_outgoing_webhook';\nimport InstalledOauthApps from 'components/integrations/installed_oauth_apps';\nimport AddOauthApp from 'components/integrations/add_oauth_app';\nimport EditOauthApp from 'components/integrations/edit_oauth_app';\nimport CommandsContainer from 'components/integrations/commands_container';\nimport ConfirmIntegration from 'components/integrations/confirm_integration';\n\nimport Pluggable from 'plugins/pluggable';\n\nimport BackstageSidebar from './components/backstage_sidebar';\nimport BackstageNavbar from './components/backstage_navbar';\n\ntype ExtraProps = Pick<Props, 'user' | 'team'> & {scrollToTop: () => void}\n\ntype BackstageRouteProps = {\n    component: ComponentType<any>;\n    extraProps: ExtraProps;\n    path: string;\n    exact?: boolean;\n}\n\nconst BackstageRoute = ({component: Component, extraProps, ...rest}: BackstageRouteProps) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\ntype Props = {\n\n    /**\n     * Current user.\n     */\n    user: UserProfile;\n\n    /**\n     * Current team.\n     */\n    team: Team;\n\n    /**\n     * Object from react-router\n     */\n    match: match<{url: string}>;\n\n    siteName?: string;\n    enableCustomEmoji: boolean;\n    enableIncomingWebhooks: boolean;\n    enableOutgoingWebhooks: boolean;\n    enableCommands: boolean;\n    enableOAuthServiceProvider: boolean;\n    canCreateOrDeleteCustomEmoji: boolean;\n    canManageIntegrations: boolean;\n}\n\nconst BackstageController = (props: Props) => {\n    const listRef = useRef<HTMLDivElement>(null);\n\n    const scrollToTop = () => {\n        if (listRef.current) {\n            listRef.current.scrollTop = 0;\n        }\n    };\n\n    if (!props.team || !props.user) {\n        return null;\n    }\n    const extraProps = {\n        team: props.team,\n        user: props.user,\n        scrollToTop,\n    };\n    return (\n        <>\n            <BackstageNavbar\n                team={props.team}\n                siteName={props.siteName}\n            />\n            <div\n                className='backstage-body'\n                ref={listRef}\n            >\n                <Pluggable pluggableName='Root'/>\n                <BackstageSidebar\n                    team={props.team}\n                    user={props.user}\n                    enableCustomEmoji={props.enableCustomEmoji}\n                    enableIncomingWebhooks={props.enableIncomingWebhooks}\n                    enableOutgoingWebhooks={props.enableOutgoingWebhooks}\n                    enableCommands={props.enableCommands}\n                    enableOAuthServiceProvider={props.enableOAuthServiceProvider}\n                    canCreateOrDeleteCustomEmoji={props.canCreateOrDeleteCustomEmoji}\n                    canManageIntegrations={props.canManageIntegrations}\n                />\n                <Switch>\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={'/:team/integrations'}\n                        component={Integrations}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/incoming_webhooks`}\n                        component={InstalledIncomingWebhooks}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/incoming_webhooks/add`}\n                        component={AddIncomingWehook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/incoming_webhooks/edit`}\n                        component={EditIncomingWebhook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/outgoing_webhooks`}\n                        component={InstalledOutgoingWebhooks}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/outgoing_webhooks/add`}\n                        component={AddOutgoingWebhook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/outgoing_webhooks/edit`}\n                        component={EditOutgoingWebhook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/commands`}\n                        component={CommandsContainer}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/oauth2-apps`}\n                        component={InstalledOauthApps}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/oauth2-apps/add`}\n                        component={AddOauthApp}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/oauth2-apps/edit`}\n                        component={EditOauthApp}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/confirm`}\n                        component={ConfirmIntegration}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={'/:team/emoji'}\n                        component={Emoji}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/add`}\n                        component={AddEmoji}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/bots/add`}\n                        component={AddBot}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/bots/edit`}\n                        component={AddBot}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/bots`}\n                        component={Bots}\n                    />\n                </Switch>\n            </div>\n            <BackstageGlobalStyle/>\n        </>\n    );\n};\n\nexport default BackstageController;\n\nconst BackstageGlobalStyle = createGlobalStyle`\n    #root {\n        > #global-header,\n        > .team-sidebar,\n        > .sidebar--right,\n        > .app-bar {\n            display: none;\n        }\n    }\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getMyTeams, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveITeamPermission, haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {GlobalState} from 'types/store';\n\nimport BackstageController from './backstage_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const user = getCurrentUser(state);\n    const team = getCurrentTeam(state);\n\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enableCustomEmoji = config.EnableCustomEmoji === 'true';\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableCommands = config.EnableCommands === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    let canCreateOrDeleteCustomEmoji = (haveISystemPermission(state, {permission: Permissions.CREATE_EMOJIS}) || haveISystemPermission(state, {permission: Permissions.DELETE_EMOJIS}));\n    if (!canCreateOrDeleteCustomEmoji) {\n        for (const t of getMyTeams(state)) {\n            if (haveITeamPermission(state, t.id, Permissions.CREATE_EMOJIS) || haveITeamPermission(state, t.id, Permissions.DELETE_EMOJIS)) {\n                canCreateOrDeleteCustomEmoji = true;\n                break;\n            }\n        }\n    }\n\n    const canManageTeamIntegrations = (haveITeamPermission(state, '', Permissions.MANAGE_SLASH_COMMANDS) || haveITeamPermission(state, '', Permissions.MANAGE_OAUTH) || haveITeamPermission(state, '', Permissions.MANAGE_INCOMING_WEBHOOKS) || haveITeamPermission(state, '', Permissions.MANAGE_OUTGOING_WEBHOOKS));\n    const canManageSystemBots = (haveISystemPermission(state, {permission: Permissions.MANAGE_BOTS}) || haveISystemPermission(state, {permission: Permissions.MANAGE_OTHERS_BOTS}));\n    const canManageIntegrations = canManageTeamIntegrations || canManageSystemBots;\n\n    return {\n        user,\n        team,\n        siteName,\n        enableCustomEmoji,\n        enableIncomingWebhooks,\n        enableOutgoingWebhooks,\n        enableCommands,\n        enableOAuthServiceProvider,\n        canCreateOrDeleteCustomEmoji,\n        canManageIntegrations,\n    };\n}\n\nexport default withRouter(connect(mapStateToProps)(BackstageController));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport {t} from 'utils/i18n';\n\nexport default function SearchIcon() {\n    return (\n        <LocalizedIcon\n            className='fa fa-search'\n            title={{id: t('generic_icons.search'), defaultMessage: 'Search Icon'}}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Client4} from 'mattermost-redux/client';\nimport {BotTypes} from 'mattermost-redux/action_types';\n\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {Bot, BotPatch} from '@mattermost/types/bots';\n\nimport {bindClientFunc} from './helpers';\n\nconst BOTS_PER_PAGE_DEFAULT = 20;\n\nexport function createBot(bot: Bot): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.createBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            bot,\n        ],\n    });\n}\n\nexport function patchBot(botUserId: string, botPatch: BotPatch): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.patchBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n            botPatch,\n        ],\n    });\n}\n\nexport function loadBot(botUserId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function loadBots(page = 0, perPage = BOTS_PER_PAGE_DEFAULT): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getBotsIncludeDeleted,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNTS,\n        params: [\n            page,\n            perPage,\n        ],\n    });\n}\n\nexport function disableBot(botUserId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.disableBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function enableBot(botUserId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.enableBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function assignBot(botUserId: string, newOwnerId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.assignBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n            newOwnerId,\n        ],\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\n\nimport {Bot} from '@mattermost/types/bots';\nimport {GlobalState} from '@mattermost/types/store';\nimport {getUsers} from 'mattermost-redux/selectors/entities/common';\n\nexport const ExternalBotAccountNames: string[] = ['mattermost-advisor'];\n\nexport function getBotAccounts(state: GlobalState) {\n    return state.entities.bots.accounts;\n}\n\nexport const getExternalBotAccounts: (state: GlobalState) => Record<string, Bot> = createSelector(\n    'getExternalBotAccounts',\n    getBotAccounts,\n    getUsers,\n    (botAccounts, userProfiles) => {\n        const nextState: Record<string, Bot> = {};\n        Object.values(botAccounts).forEach((botAccount) => {\n            const botUser = userProfiles[botAccount.user_id];\n            if (botUser && !ExternalBotAccountNames.includes(botUser.username)) {\n                nextState[botAccount.user_id] = botAccount;\n            }\n        });\n\n        return nextState;\n    },\n);\n"],"names":["BackstageNavbar","team","siteName","teamExists","delete_at","className","Link","to","name","FormattedMessage","id","defaultMessage","values","getIncomingHooks","state","entities","integrations","incomingHooks","getOutgoingHooks","outgoingHooks","getCommands","commands","getOAuthApps","oauthApps","getAppsOAuthAppIDs","createSelector","appsEnabled","appsOAuthAppIDs","apps","ids","getAppsBotIDs","appsBotIDs","getCurrentTeamId","teamId","hooks","Object","filter","o","team_id","getAllCommands","systemCommands","currentTeamId","command","auto_complete","sort","a","b","display_name","localeCompare","BackstageList","searchPlaceholder","localizeMessage","remainingProps","setFilter","useState","filterLowered","toLowerCase","children","loading","hasChildren","React","child","length","emptyTextSearch","searchTerm","emptyText","addLink","addText","type","addButtonId","header","placeholder","value","onChange","e","target","style","search","helpText","bool","flexGrow","flexShrink","matchesFilter","bot","owner","username","description","displayName","ownerUsername","indexOf","Bot","constructor","props","super","this","actions","enableBot","user_id","disableBot","enableUserAccessToken","disableUserAccessToken","setState","confirmingId","revokeUserAccessToken","closeConfirm","creatingTokenState","token","assign","async","preventDefault","error","data","createUserAccessToken","message","render","fromApp","tokenList","options","accessTokens","forEach","activeLink","disabledText","disableClass","is_active","href","onClick","push","key","confirmRevokeToken","openCreateToken","onSubmit","handleCreateToken","autoFocus","maxLength","handleUpdateDescription","btnClass","savingMessage","saving","closeCreateToken","additionalClassName","imageURL","Utils","user","last_picture_update","alt","src","title","confirmButtonText","show","onConfirm","revokeTokenConfirmed","onCancel","Bots","owners","users","includes","bots","match","enabledBots","map","botToJSX","disabledBots","EnabledSection","DisabledSection","hasDisabled","componentDidMount","loadBots","Constants","parseInt","then","result","promises","getUser","owner_id","getUserAccessTokensForUser","Promise","all","fetchAppsBotIDs","botsToDisplay","createBots","botAccounts","rel","siteURL","getSiteURL","string","connect","getConfig","EnableBotAccountCreation","getExternalBotAccounts","botValues","reduce","UserSelectors","admin","userAccessTokensByUser","dispatch","bindActionCreators","BackstageHeader","childrenElements","index","t","roleOptionSystemAdmin","roleOptionMember","AddBot","role","postAll","checked","postChannels","files","pictureFile","previewBlob","URL","createObjectURL","reader","FileReader","onload","e2","orientation","FileUtils","orientationStyles","image","readAsArrayBuffer","BotDefaultIcon","roles","General","rolesResult","updateUserRoles","adding","isFile","AcceptedProfileImageTypes","size","maxFileSize","trim","patchBot","uploadProfileImage","setDefaultProfileImage","updateRoles","getHistory","usernameError","errObj","ValidationErrors","createBot","tokenResult","UserUtils","transform","transformOrigin","file","undefined","subtitle","buttonText","buttonActiveText","imageStyles","removeImageIcon","delayShow","placement","overlay","setDefault","handleSubmit","htmlFor","updateUsername","accept","updatePicture","updateDisplayName","updateDescription","disabled","editingUserHasManageSystem","updateRole","link","msg","updatePostAll","updatePostChannels","errors","spinning","spinningText","number","ownProps","config","botId","URLSearchParams","location","get","getBotAccounts","MaxFileSize","haveISystemPermission","permission","Permissions","IntegrationOption","Integrations","currentSiteName","document","updateTitle","enableIncomingWebhooks","permissions","IncomingWebhookIcon","enableOutgoingWebhooks","OutgoingWebhookIcon","enableCommands","SlashCommandIcon","enableOAuthServiceProvider","OAuthIcon","BotAccountsIcon","appDirectory","SiteName","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableCommands","EnableOAuthServiceProvider","ModalId","DeleteIntegrationLink","linkText","modalMessage","modalTitle","onDelete","openModal","useCallback","modalId","dialogProps","dialogType","ConfirmModalRedux","mapDispatchToProps","DeleteEmojiButton","EmojiListItem","emoji","deleteCustomEmoji","creatorUsername","creatorDisplayName","deleteButton","handleDelete","creator_id","currentUserId","backgroundImage","Client4","emojiId","emojis","customEmoji","creator","getDisplayNameByUser","getCurrentUserId","currentTeam","getCurrentTeam","EmojiList","next","page","nextLoading","getCustomEmojis","Emoji","missingPages","scrollToTop","term","clearTimeout","searchTimeout","setTimeout","searchEmojis","searchCustomEmojis","em","newSearchEmojis","splice","EMOJI_PER_PAGE","nextButton","previousButton","colSpan","emojiIds","deleteFromSearch","pageStart","pageEnd","slice","buttonContents","extraClasses","nextPage","previousPage","onSearchChange","getCustomEmojiIdsSortedByName","EmojiPage","teamDisplayName","loadRolesIfNeeded","componentDidUpdate","prevProps","teamName","general","AddEmoji","emojiMap","startsWith","endsWith","substring","test","hasSystemEmoji","has","response","createCustomEmoji","responseError","genericError","imageUrl","readAsDataURL","filename","preview","handleFormSubmit","updateName","multiple","updateImage","handleSaveButtonClick","getEmojiMap","DEFAULT_PAGE_SIZE","loadIncomingHooksAndProfilesForTeam","perPage","IntegrationActions","getState","profilesToLoad","i","hook","list","keys","getProfilesByIds","loadOutgoingHooksAndProfilesForTeam","loadCommandsAndProfilesForTeam","loadOAuthAppsAndProfiles","app","loadProfilesForOAuthApps","CopyText","copyToClipboard","queryCommandSupported","tooltip","idMessage","copyText","incomingWebhook","channel","channel_id","InstalledIncomingWebhook","canChange","incomingWebhookId","url","createAt","create_at","InstalledIncomingWebhooks","removeIncomingHook","displayNameA","channelA","channels","displayNameB","incomingWebhooks","incomingWebhookCompare","canManageOthersWebhooks","deleteIncomingWebhook","buildYourOwn","haveITeamPermission","getAllChannels","getUsers","ChannelSelect","channelName","selectOpen","selectPrivate","selectDm","getMyChannelsSorted","getMyChannels","getCurrentUserLocale","locale","sortChannelsByTypeAndDisplayName","AbstractIncomingWebhook","channelId","channelLocked","channel_locked","iconURL","icon_url","serverError","clientError","action","getStateFromHook","initialHook","headerToRender","footerToRender","footer","updateChannelId","updateChannelLocked","enablePostUsernameOverride","enablePostIconOverride","updateIconURL","PropTypes","HEADER","FOOTER","LOADING","AddIncomingWebhook","createIncomingHook","addIncomingHook","EnablePostUsernameOverride","EnablePostIconOverride","EditIncomingWebhook","newHook","submitHook","updateIncomingHook","showConfirmModal","getIncomingHook","hookId","editIncomingHook","outgoingWebhook","trigger_words","triggerWords","triggerWord","InstalledOutgoingWebhook","onRegenToken","makeDisplayName","join","urls","callback_urls","triggerWhen","trigger_when","handleRegenToken","contentType","content_type","InstalledOutgoingWebhooks","regenOutgoingHookToken","removeOutgoingHook","channelB","outgoingWebhooks","outgoingWebhookCompare","regenOutgoingWebhookToken","Actions","AbstractOutgoingWebhook","callbackUrls","split","callbackUrl","contentTypeOption1","contentTypeOption2","renderExtra","updateContentType","rows","updateTriggerWords","updateTriggerWhen","updateCallbackUrls","AddOutgoingWebhook","history","useHistory","setServerError","createOutgoingHook","EditOutgoingWebhook","triggerWordsSame","every","v","callbackUrlsSame","handleConfirmModal","updateOutgoingHook","confirmButton","confirmTitle","confirmMessage","confirmModalDismissed","getOutgoingHook","editOutgoingHook","FAKE_SECRET","oauthApp","InstalledOAuthApp","clientSecret","client_secret","onRegenerateSecret","handleShowClientSecret","creatorName","isTrusted","showHide","is_trusted","handleHideClientSecret","regen","handleRegenerate","icon","appInfo","clientId","InstalledOAuthApps","deleteOAuthApp","oauthAppCompare","regenOAuthAppSecret","nameA","toString","nameB","canManageOauth","oauthApplications","AbstractOAuthApp","homepage","has_icon","Boolean","current","Image","imageLoaded","getStateFromApp","initialApp","trusted","updateTrusted","updateHomepage","ref","updateIconUrl","AddOAuthApp","addOAuthApp","EditOAuthApp","newApp","submitOAuthApp","res","editOAuthApp","err","getOAuthApp","oauthAppId","trigger","InstalledCommand","auto_complete_hint","commandToken","InstalledCommands","regenCommandToken","deleteCommand","commandCompare","canManageOthersSlashCommands","AbstractCommand","method","iconUrl","autocomplete","autocompleteHint","autocompleteDescription","auto_complete_desc","substr","min","max","getStateFromCommand","initialCommand","updateAutocompleteHint","updateAutocompleteDescription","updateTrigger","updateUrl","updateMethod","updateAutocomplete","AddCommand","addCommand","EditCommand","newCommand","originalCommand","submitCommand","editCommand","getCustomTeamCommands","commandId","ConfirmIntegration","useEffect","window","addEventListener","handleKeyPress","removeEventListener","headerText","tokenText","incomingHook","outgoingHook","incomingHookToken","outgoingHookToken","oauthAppToken","oauthAppSecret","secret","replace","ErrorPageTypes","botToken","botname","strong","CommandRoute","component","Component","extraProps","rest","Route","any","path","CommandsContainer","Switch","exact","Redirect","BackstageCategory","parentLink","NavLink","activeClassName","classNames","BackstageSection","subsection","clonedChildren","BackstageSidebar","renderCustomEmoji","enableCustomEmoji","canCreateOrDeleteCustomEmoji","renderIntegrations","canManageIntegrations","BackstageRoute","BackstageController","listRef","useRef","scrollTop","pluggableName","AddIncomingWehook","InstalledOauthApps","AddOauthApp","EditOauthApp","BackstageGlobalStyle","createGlobalStyle","withRouter","getCurrentUser","EnableCustomEmoji","getMyTeams","canManageTeamIntegrations","canManageSystemBots","SearchIcon","WarningIcon","BOTS_PER_PAGE_DEFAULT","bindClientFunc","clientFunc","onSuccess","BotTypes","params","botUserId","botPatch","ExternalBotAccountNames","accounts","userProfiles","nextState","botAccount","botUser"],"sourceRoot":""}