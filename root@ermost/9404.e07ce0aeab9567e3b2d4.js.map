{"version":3,"file":"9404.e07ce0aeab9567e3b2d4.js","mappings":"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","sources":["webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_item/marketplace_item.tsx","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_plugin/marketplace_item_plugin.tsx","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_plugin/index.ts","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_app/marketplace_item_app.tsx","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_app/index.ts","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_list/navigation_row/navigation_button.tsx","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_list/navigation_row/navigation_row.tsx","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_list/navigation_row/index.ts","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_list/marketplace_list.tsx","webpack://mattermost-webapp/./components/plugin_marketplace/marketplace_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport type {MarketplaceLabel} from '@mattermost/types/marketplace';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Tooltip from 'components/tooltip';\nimport PluginIcon from 'components/widgets/icons/plugin_icon';\n\nimport {Constants} from 'utils/constants';\nimport Tag from 'components/widgets/tag/tag';\n\n// Label renders a tag showing a name and a description in a tooltip.\n// If a URL is provided, clicking on the tag will open the URL in a new tab.\nexport const Label = ({name, description, url}: MarketplaceLabel): JSX.Element => {\n    const tag = (\n        <Tag\n            text={name}\n            uppercase={true}\n            size={'sm'}\n        />\n    );\n\n    let label;\n    if (description) {\n        label = (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                overlay={\n                    <Tooltip id={'plugin-marketplace_label_' + name.toLowerCase() + '-tooltip'}>\n                        {description}\n                    </Tooltip>\n                }\n            >\n                {tag}\n            </OverlayTrigger>\n        );\n    } else {\n        label = tag;\n    }\n\n    if (url) {\n        return (\n            <a\n                aria-label={name.toLowerCase()}\n                className='style--none more-modal__row--link marketplace__tag'\n                target='_blank'\n                rel='noopener noreferrer'\n                href={url}\n            >\n                {label}\n            </a>\n        );\n    }\n\n    return label;\n};\n\nexport type MarketplaceItemProps = {\n    id: string;\n    name: string;\n    description?: string;\n    iconSource?: string;\n    labels?: MarketplaceLabel[];\n    homepageUrl?: string;\n\n    error?: string;\n\n    button: JSX.Element;\n    updateDetails: JSX.Element | null;\n    versionLabel: JSX.Element| null;\n};\n\nexport default class MarketplaceItem extends React.PureComponent <MarketplaceItemProps> {\n    render(): JSX.Element {\n        const {labels = null} = this.props;\n        let icon;\n        if (this.props.iconSource) {\n            icon = (\n                <div className='icon__plugin icon__plugin--background'>\n                    <img src={this.props.iconSource}/>\n                </div>\n            );\n        } else {\n            icon = <PluginIcon className='icon__plugin icon__plugin--background'/>;\n        }\n\n        const labelComponents = labels?.map((label) => (\n            <Label\n                key={label.name}\n                name={label.name}\n                description={label.description}\n                url={label.url}\n            />\n        ));\n\n        const pluginDetailsInner = (\n            <>\n                {this.props.name}\n                {this.props.versionLabel}\n            </>\n        );\n\n        const description = (\n            <p className={classNames('more-modal__description', {error_text: this.props.error})}>\n                {this.props.error || this.props.description}\n            </p>\n        );\n\n        let pluginDetails;\n        if (this.props.homepageUrl) {\n            pluginDetails = (\n                <>\n                    <a\n                        aria-label={this.props.name.toLowerCase()}\n                        className='style--none more-modal__row--link'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href={this.props.homepageUrl}\n                    >\n                        {pluginDetailsInner}\n                    </a>\n                    {labelComponents}\n                    <a\n                        aria-label=\"Plugin's website\"\n                        className='style--none more-modal__row--link'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href={this.props.homepageUrl}\n                    >\n                        {description}\n                    </a>\n                </>\n            );\n        } else {\n            pluginDetails = (\n                <>\n                    <span\n                        aria-label={this.props.name.toLowerCase()}\n                        className='style--none'\n                    >\n                        {pluginDetailsInner}\n                    </span>\n                    {labelComponents}\n                    <span\n                        aria-label=\"Plugin\\'s website\"\n                        className='style--none'\n                    >\n                        {description}\n                    </span>\n                </>\n            );\n        }\n\n        return (\n            <>\n                <div\n                    className={classNames('more-modal__row', 'more-modal__row--link', {item_error: this.props.error})}\n                    key={this.props.id}\n                    id={'marketplace-plugin-' + this.props.id}\n                >\n                    {icon}\n                    <div className='more-modal__details'>\n                        {pluginDetails}\n                        {this.props.updateDetails}\n                    </div>\n                    <div className='more-modal__actions'>\n                        {this.props.button}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport semver from 'semver';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {Link} from 'react-router-dom';\n\nimport type {MarketplaceLabel} from '@mattermost/types/marketplace';\nimport {PluginStatusRedux} from '@mattermost/types/plugins';\n\nimport MarketplaceItem from '../marketplace_item';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport ConfirmModal from 'components/confirm_modal';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {localizeMessage} from 'utils/utils';\n\ntype UpdateVersionProps = {\n    version: string;\n    releaseNotesUrl?: string;\n};\n\n// UpdateVersion renders the version text in the update details, linking out to release notes if available.\nexport const UpdateVersion = ({version, releaseNotesUrl}: UpdateVersionProps): JSX.Element => {\n    if (!releaseNotesUrl) {\n        return (\n            <span>\n                {version}\n            </span>\n        );\n    }\n\n    return (\n        <a\n            target='_blank'\n            rel='noopener noreferrer'\n            href={releaseNotesUrl}\n        >\n            {version}\n        </a>\n    );\n};\n\nexport type UpdateDetailsProps = {\n    version: string;\n    releaseNotesUrl?: string;\n    installedVersion?: string;\n    isInstalling: boolean;\n    onUpdate: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\n};\n\n// UpdateDetails renders an inline update prompt for plugins, when available.\nexport const UpdateDetails = ({version, releaseNotesUrl, installedVersion, isInstalling, onUpdate}: UpdateDetailsProps): JSX.Element | null => {\n    if (!installedVersion || isInstalling) {\n        return null;\n    }\n\n    let isUpdate = false;\n    try {\n        isUpdate = semver.gt(version, installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume not an update;\n    }\n\n    if (!isUpdate) {\n        return null;\n    }\n\n    return (\n        <div className={classNames('update')}>\n            <FormattedMessage\n                id='marketplace_modal.list.update_available'\n                defaultMessage='Update available:'\n            />\n            {' '}\n            <UpdateVersion\n                version={version}\n                releaseNotesUrl={releaseNotesUrl}\n            />\n            {' - '}\n            <b>\n                <a onClick={onUpdate}>\n                    <FormattedMessage\n                        id='marketplace_modal.list.update'\n                        defaultMessage='Update'\n                    />\n                </a>\n            </b>\n        </div>\n    );\n};\n\nexport type UpdateConfirmationModalProps = {\n    show: boolean;\n    name: string;\n    version: string;\n    releaseNotesUrl?: string;\n    installedVersion?: string;\n    onUpdate: (checked: boolean) => void;\n    onCancel: (checked: boolean) => void;\n};\n\n// UpdateConfirmationModal prompts before allowing upgrade, specially handling major version changes.\nexport const UpdateConfirmationModal = ({show, name, version, installedVersion, releaseNotesUrl, onUpdate, onCancel}: UpdateConfirmationModalProps): JSX.Element | null => {\n    if (!installedVersion) {\n        return null;\n    }\n\n    let isUpdate = false;\n    try {\n        isUpdate = semver.gt(version, installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume not an update;\n    }\n\n    if (!isUpdate) {\n        return null;\n    }\n\n    const messages = [(\n        <p key='intro'>\n            <FormattedMessage\n                id='marketplace_modal.list.update_confirmation.message.intro'\n                defaultMessage={`Are you sure you want to update the ${name} plugin to ${version}?`}\n                values={{name, version}}\n            />\n        </p>\n    )];\n\n    if (releaseNotesUrl) {\n        messages.push(\n            <p key='current'>\n                <FormattedMarkdownMessage\n                    id='marketplace_modal.list.update_confirmation.message.current_with_release_notes'\n                    defaultMessage='You currently have {installedVersion} installed. View the [release notes](!{releaseNotesUrl}) to learn about the changes included in this update.'\n                    values={{installedVersion, releaseNotesUrl}}\n                />\n            </p>,\n        );\n    } else {\n        messages.push(\n            <p key='current'>\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.message.current'\n                    defaultMessage={`You currently have ${installedVersion} installed.`}\n                    values={{installedVersion}}\n                />\n            </p>,\n        );\n    }\n\n    let sameMajorVersion = false;\n    try {\n        sameMajorVersion = semver.major(version) === semver.major(installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume a potentially breaking change.\n        // In practice, this won't happen since we already tried to parse the version above.\n    }\n\n    if (!sameMajorVersion) {\n        if (releaseNotesUrl) {\n            messages.push(\n                <p\n                    className='alert alert-warning'\n                    key='warning'\n                >\n                    <FormattedMarkdownMessage\n                        id='marketplace_modal.list.update_confirmation.message.warning_major_version_with_release_notes'\n                        defaultMessage='This update may contain breaking changes. Consult the [release notes](!{releaseNotesUrl}) before upgrading.'\n                        values={{releaseNotesUrl}}\n                    />\n                </p>,\n            );\n        } else {\n            messages.push(\n                <p\n                    className='alert alert-warning'\n                    key='warning'\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.list.update_confirmation.message.warning_major_version'\n                        defaultMessage={'This update may contain breaking changes.'}\n                    />\n                </p>,\n            );\n        }\n    }\n\n    return (\n        <ConfirmModal\n            show={show}\n            title={\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.title'\n                    defaultMessage={'Confirm Plugin Update'}\n                />\n            }\n            message={messages}\n            confirmButtonText={\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.confirm_button'\n                    defaultMessage='Update'\n                />\n            }\n            onConfirm={onUpdate}\n            onCancel={onCancel}\n        />\n    );\n};\n\nexport type MarketplaceItemPluginProps = {\n    id: string;\n    name: string;\n    description?: string;\n    version: string;\n    homepageUrl?: string;\n    releaseNotesUrl?: string;\n    labels?: MarketplaceLabel[];\n    iconData?: string;\n    installedVersion?: string;\n    installing: boolean;\n    pluginStatus?: PluginStatusRedux;\n    error?: string;\n    isDefaultMarketplace: boolean;\n    trackEvent: (category: string, event: string, props?: unknown) => void;\n\n    actions: {\n        installPlugin: (id: string) => void;\n        closeMarketplaceModal: () => void;\n    };\n};\n\ntype MarketplaceItemState = {\n    showUpdateConfirmationModal: boolean;\n};\n\nexport default class MarketplaceItemPlugin extends React.PureComponent <MarketplaceItemPluginProps, MarketplaceItemState> {\n    constructor(props: MarketplaceItemPluginProps) {\n        super(props);\n\n        this.state = {\n            showUpdateConfirmationModal: false,\n        };\n    }\n\n    trackEvent = (eventName: string, allowDetail = true): void => {\n        if (this.props.isDefaultMarketplace && allowDetail) {\n            this.props.trackEvent('plugins', eventName, {\n                plugin_id: this.props.id,\n                version: this.props.version,\n                installed_version: this.props.installedVersion,\n            });\n        } else {\n            this.props.trackEvent('plugins', eventName);\n        }\n    }\n\n    showUpdateConfirmationModal = (): void => {\n        this.setState({showUpdateConfirmationModal: true});\n    }\n\n    hideUpdateConfirmationModal = (): void => {\n        this.setState({showUpdateConfirmationModal: false});\n    }\n\n    onInstall = (): void => {\n        this.trackEvent('ui_marketplace_download');\n        this.props.actions.installPlugin(this.props.id);\n    }\n\n    onConfigure = (): void => {\n        this.trackEvent('ui_marketplace_configure', false);\n\n        this.props.actions.closeMarketplaceModal();\n    }\n\n    onUpdate = (): void => {\n        this.trackEvent('ui_marketplace_download_update');\n\n        this.hideUpdateConfirmationModal();\n        this.props.actions.installPlugin(this.props.id);\n    }\n\n    getItemButton(): JSX.Element {\n        if (this.props.installedVersion !== '' && !this.props.installing && !this.props.error) {\n            return (\n                <Link\n                    to={'/admin_console/plugins/plugin_' + this.props.id}\n                >\n                    <button\n                        onClick={this.onConfigure}\n                        className='btn btn-outline'\n                    >\n                        <FormattedMessage\n                            id='marketplace_modal.list.configure'\n                            defaultMessage='Configure'\n                        />\n                    </button>\n                </Link>\n            );\n        }\n\n        let actionButton: JSX.Element;\n        if (this.props.error) {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.try_again'\n                    defaultMessage='Try Again'\n                />\n            );\n        } else {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.install'\n                    defaultMessage='Install'\n                />\n            );\n        }\n\n        return (\n            <button\n                onClick={this.onInstall}\n                className='btn btn-primary'\n                disabled={this.props.installing}\n            >\n                <LoadingWrapper\n                    loading={this.props.installing}\n                    text={localizeMessage('marketplace_modal.installing', 'Installing...')}\n                >\n                    {actionButton}\n                </LoadingWrapper>\n\n            </button>\n        );\n    }\n\n    render(): JSX.Element {\n        let version = `(${this.props.version})`;\n        if (this.props.installedVersion !== '') {\n            version = `(${this.props.installedVersion})`;\n        }\n\n        const versionLabel = <span className='light subtitle'>{version}</span>;\n\n        const updateDetails = (\n            <UpdateDetails\n                version={this.props.version}\n                installedVersion={this.props.installedVersion}\n                releaseNotesUrl={this.props.releaseNotesUrl}\n                isInstalling={this.props.installing}\n                onUpdate={this.showUpdateConfirmationModal}\n            />\n        );\n\n        return (\n            <>\n                <MarketplaceItem\n                    button={this.getItemButton()}\n                    versionLabel={versionLabel}\n                    updateDetails={updateDetails}\n                    iconSource={this.props.iconData}\n                    {...this.props}\n                    error={this.props.error || this.props.pluginStatus?.error}\n                />\n                <UpdateConfirmationModal\n                    show={this.state.showUpdateConfirmationModal}\n                    name={this.props.name}\n                    version={this.props.version}\n                    installedVersion={this.props.installedVersion}\n                    releaseNotesUrl={this.props.releaseNotesUrl}\n                    onUpdate={this.onUpdate}\n                    onCancel={this.hideUpdateConfirmationModal}\n                />\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getPluginStatus} from 'mattermost-redux/selectors/entities/admin';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport {installPlugin} from 'actions/marketplace';\nimport {closeModal} from 'actions/views/modals';\nimport {ModalIdentifiers} from 'utils/constants';\nimport {getInstalling, getError} from 'selectors/views/marketplace';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport MarketplaceItemPlugin, {MarketplaceItemPluginProps} from './marketplace_item_plugin';\n\ntype Props = {\n    id: string;\n}\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const installing = getInstalling(state, props.id);\n    const error = getError(state, props.id);\n    const isDefaultMarketplace = getConfig(state).IsDefaultMarketplace === 'true';\n\n    const pluginStatus = getPluginStatus(state, props.id);\n\n    return {\n        installing,\n        error,\n        isDefaultMarketplace,\n        trackEvent,\n        pluginStatus,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject, MarketplaceItemPluginProps['actions']>({\n            installPlugin,\n            closeMarketplaceModal: () => closeModal(ModalIdentifiers.PLUGIN_MARKETPLACE),\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MarketplaceItemPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport type {MarketplaceLabel} from '@mattermost/types/marketplace';\n\nimport MarketplaceItem from '../marketplace_item';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {localizeMessage} from 'utils/utils';\n\nexport type MarketplaceItemAppProps = {\n    id: string;\n    name: string;\n    description?: string;\n    homepageUrl?: string;\n    iconURL?: string;\n\n    installed: boolean;\n    labels?: MarketplaceLabel[];\n\n    installing: boolean;\n    error?: string;\n\n    trackEvent: (category: string, event: string, props?: unknown) => void;\n\n    actions: {\n        installApp: (id: string) => Promise<boolean>;\n        closeMarketplaceModal: () => void;\n    };\n};\n\nexport default class MarketplaceItemApp extends React.PureComponent <MarketplaceItemAppProps> {\n    onInstall = (): void => {\n        this.props.trackEvent('plugins', 'ui_marketplace_install_app', {\n            app_id: this.props.id,\n        });\n\n        this.props.actions.installApp(this.props.id).then((res) => {\n            if (res) {\n                this.props.actions.closeMarketplaceModal();\n            }\n        });\n    }\n\n    getItemButton(): JSX.Element {\n        if (this.props.installed && !this.props.installing && !this.props.error) {\n            return (\n                <button\n                    className='btn btn-outline'\n                    disabled={true}\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.list.installed'\n                        defaultMessage='Installed'\n                    />\n                </button>\n            );\n        }\n\n        let actionButton: JSX.Element;\n        if (this.props.error) {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.try_again'\n                    defaultMessage='Try Again'\n                />\n            );\n        } else {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.install'\n                    defaultMessage='Install'\n                />\n            );\n        }\n\n        return (\n            <button\n                onClick={this.onInstall}\n                className='btn btn-primary'\n                disabled={this.props.installing}\n            >\n                <LoadingWrapper\n                    loading={this.props.installing}\n                    text={localizeMessage('marketplace_modal.installing', 'Installing...')}\n                >\n                    {actionButton}\n                </LoadingWrapper>\n\n            </button>\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n                <MarketplaceItem\n                    button={this.getItemButton()}\n                    updateDetails={null}\n                    versionLabel={null}\n                    iconSource={this.props.iconURL}\n                    {...this.props}\n                />\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport {installApp} from 'actions/marketplace';\nimport {closeModal} from 'actions/views/modals';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {getInstalling, getError} from 'selectors/views/marketplace';\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport MarketplaceItemApp, {MarketplaceItemAppProps} from './marketplace_item_app';\n\ntype Props = {\n    id: string;\n}\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const installing = getInstalling(state, props.id);\n    const error = getError(state, props.id);\n\n    return {\n        installing,\n        error,\n        trackEvent,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject, MarketplaceItemAppProps['actions']>({\n            installApp,\n            closeMarketplaceModal: () => closeModal(ModalIdentifiers.PLUGIN_MARKETPLACE),\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MarketplaceItemApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype NavigationButtonProps = {\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    messageId: string;\n    defaultMessage: string;\n};\n\nexport default class NavigationButton extends React.PureComponent <NavigationButtonProps> {\n    onClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        event.preventDefault();\n        this.props.onClick(event);\n    };\n\n    render(): JSX.Element {\n        const {onClick, messageId, defaultMessage} = this.props;\n        return (\n            <button\n                className='btn btn-link'\n                onClick={onClick}\n            >\n                <FormattedMessage\n                    id={messageId}\n                    defaultMessage={defaultMessage}\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Theme} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\n\nimport NavigationButton from './navigation_button';\n\nexport type NavigationRowProps = {\n    page: number;\n    total: number;\n    maximumPerPage: number;\n    onNextPageButtonClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onPreviousPageButtonClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    theme: Theme;\n};\n\nexport default class NavigationRow extends React.PureComponent <NavigationRowProps> {\n    canShowNextButton = (): boolean => {\n        const {page, maximumPerPage, total} = this.props;\n        const totalPages = Math.trunc((total - 1) / maximumPerPage);\n\n        return totalPages > page;\n    };\n\n    renderCount = (): JSX.Element => {\n        const {page, total, maximumPerPage} = this.props;\n        const startCount = page * maximumPerPage;\n        const endCount = Math.min(startCount + maximumPerPage, total);\n\n        return (\n            <FormattedMessage\n                id='marketplace_list.count_total_page'\n                defaultMessage='{startCount, number} - {endCount, number} {total, plural, one {plugin} other {plugins}} of {total, number} total'\n                values={{\n                    startCount: startCount + 1,\n                    endCount,\n                    total,\n                }}\n            />\n        );\n    };\n\n    render(): JSX.Element {\n        const style = getStyle(this.props.theme);\n\n        return (\n            <div className='navigation-row'>\n                <div className='col-xs-2'>\n                    {(this.props.page > 0) && (\n                        <NavigationButton\n                            onClick={this.props.onPreviousPageButtonClick}\n                            messageId={'more_channels.prev'}\n                            defaultMessage={'Previous'}\n                        />\n                    )}\n                </div>\n                <div\n                    className='col-xs-8 count'\n                    style={style.count}\n                >\n                    {this.renderCount()}\n                </div>\n                <div className='col-xs-2'>\n                    {this.canShowNextButton() && (\n                        <NavigationButton\n                            onClick={this.props.onNextPageButtonClick}\n                            messageId={'more_channels.next'}\n                            defaultMessage={'Next'}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        count: {\n            color: changeOpacity(theme.centerChannelColor, 0.6),\n        },\n    };\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from '@mattermost/types/store';\n\nimport NavigationRow from './navigation_row';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(NavigationRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {MarketplaceApp, MarketplacePlugin} from '@mattermost/types/marketplace';\nimport {isPlugin, getName} from 'mattermost-redux/utils/marketplace';\n\nimport MarketplaceItemPlugin from '../marketplace_item/marketplace_item_plugin';\nimport MarketplaceItemApp from '../marketplace_item/marketplace_item_app';\n\nimport NavigationRow from './navigation_row';\n\nconst ITEMS_PER_PAGE = 15;\n\ntype MarketplaceListProps = {\n    listing: Array<MarketplacePlugin | MarketplaceApp>;\n};\n\ntype MarketplaceListState = {\n    page: number;\n};\n\nexport default class MarketplaceList extends React.PureComponent <MarketplaceListProps, MarketplaceListState> {\n    static getDerivedStateFromProps(props: MarketplaceListProps, state: MarketplaceListState): MarketplaceListState | null {\n        if (state.page > 0 && props.listing.length < ITEMS_PER_PAGE) {\n            return {page: 0};\n        }\n\n        return null;\n    }\n\n    constructor(props: MarketplaceListProps) {\n        super(props);\n\n        this.state = {\n            page: 0,\n        };\n    }\n\n    nextPage = (): void => {\n        this.setState((state) => ({\n            page: state.page + 1,\n        }));\n    };\n\n    previousPage = (): void => {\n        this.setState((state) => ({\n            page: state.page - 1,\n        }));\n    };\n\n    render(): JSX.Element {\n        const pageStart = this.state.page * ITEMS_PER_PAGE;\n        const pageEnd = pageStart + ITEMS_PER_PAGE;\n\n        this.props.listing.sort((a, b) => {\n            return getName(a).localeCompare(getName(b));\n        });\n\n        const itemsToDisplay = this.props.listing.slice(pageStart, pageEnd);\n\n        return (\n            <div className='more-modal__list'>\n                {itemsToDisplay.map((i) => {\n                    if (isPlugin(i)) {\n                        return (\n                            <MarketplaceItemPlugin\n                                key={i.manifest.id}\n                                id={i.manifest.id}\n                                name={i.manifest.name}\n                                description={i.manifest.description}\n                                version={i.manifest.version}\n                                homepageUrl={i.homepage_url}\n                                releaseNotesUrl={i.release_notes_url}\n                                labels={i.labels}\n                                iconData={i.icon_data}\n                                installedVersion={i.installed_version}\n                            />\n                        );\n                    }\n\n                    return (\n                        <MarketplaceItemApp\n                            key={i.manifest.app_id}\n                            id={i.manifest.app_id}\n                            name={i.manifest.display_name}\n                            description={i.manifest.description}\n                            homepageUrl={i.manifest.homepage_url}\n                            iconURL={i.icon_url}\n                            installed={i.installed}\n                            labels={i.labels}\n                        />\n                    );\n                })\n                }\n                <NavigationRow\n                    page={this.state.page}\n                    total={this.props.listing.length}\n                    maximumPerPage={ITEMS_PER_PAGE}\n                    onNextPageButtonClick={this.nextPage}\n                    onPreviousPageButtonClick={this.previousPage}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport debounce from 'lodash/debounce';\nimport {Tabs, Tab, SelectCallback} from 'react-bootstrap';\n\nimport {PluginStatusRedux} from '@mattermost/types/plugins';\nimport type {MarketplaceApp, MarketplacePlugin} from '@mattermost/types/marketplace';\n\nimport FullScreenModal from 'components/widgets/modals/full_screen_modal';\nimport RootPortal from 'components/root_portal';\nimport QuickInput from 'components/quick_input';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport PluginIcon from 'components/widgets/icons/plugin_icon';\nimport LoadingScreen from 'components/loading_screen';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {t} from 'utils/i18n';\nimport {localizeMessage} from 'utils/utils';\n\nimport './marketplace_modal.scss';\nimport MarketplaceList from './marketplace_list/marketplace_list';\n\nconst MarketplaceTabs = {\n    ALL_LISTING: 'allListing',\n    INSTALLED_LISTING: 'installed',\n};\n\nconst SEARCH_TIMEOUT_MILLISECONDS = 200;\n\ntype AllListingProps = {\n    listing: Array<MarketplacePlugin | MarketplaceApp>;\n};\n\n// AllListing renders the contents of the all listing tab.\nexport const AllListing = ({listing}: AllListingProps): JSX.Element => {\n    if (listing.length === 0) {\n        return (\n            <div className='no_plugins_div'>\n                <br/>\n                <PluginIcon className='icon__plugin'/>\n                <div className='mt-3 light'>\n                    <FormattedMessage\n                        id='marketplace_modal.no_plugins'\n                        defaultMessage='There are no plugins available at this time.'\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return <MarketplaceList listing={listing}/>;\n};\n\ntype InstalledListingProps = {\n    installedItems: Array<MarketplacePlugin | MarketplaceApp>;\n    changeTab: SelectCallback;\n};\n\n// InstalledListing renders the contents of the installed listing tab.\nexport const InstalledListing = ({installedItems, changeTab}: InstalledListingProps): JSX.Element => {\n    if (installedItems.length === 0) {\n        return (\n            <div className='no_plugins_div'>\n                <br/>\n                <PluginIcon className='icon__plugin'/>\n                <div className='mt-3 light'>\n                    <FormattedMessage\n                        id='marketplace_modal.no_plugins_installed'\n                        defaultMessage='You do not have any plugins installed.'\n                    />\n                </div>\n                <button\n                    className='mt-5 style--none color--link'\n                    onClick={() => changeTab(MarketplaceTabs.ALL_LISTING)}\n                    data-testid='Install-Plugins-button'\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.install_plugins'\n                        defaultMessage='Install Plugins'\n                    />\n                </button>\n            </div>\n        );\n    }\n\n    return <MarketplaceList listing={installedItems}/>;\n};\n\nexport type MarketplaceModalProps = {\n    show: boolean;\n    listing: Array<MarketplacePlugin | MarketplaceApp>;\n    installedListing: Array<MarketplacePlugin | MarketplaceApp>;\n    siteURL: string;\n    pluginStatuses?: Record<string, PluginStatusRedux>;\n    firstAdminVisitMarketplaceStatus: boolean;\n    actions: {\n        closeModal: () => void;\n        fetchListing(localOnly?: boolean): Promise<{error?: Error}>;\n        filterListing(filter: string): Promise<{error?: Error}>;\n        setFirstAdminVisitMarketplaceStatus(): Promise<void>;\n        getPluginStatuses(): Promise<void>;\n    };\n};\n\ntype MarketplaceModalState = {\n    tabKey: unknown;\n    loading: boolean;\n    serverError?: Error;\n    filter: string;\n};\n\n// MarketplaceModal is the marketplace modal.\nexport default class MarketplaceModal extends React.PureComponent<MarketplaceModalProps, MarketplaceModalState> {\n    private filterRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: MarketplaceModalProps) {\n        super(props);\n\n        this.state = {\n            tabKey: MarketplaceTabs.ALL_LISTING,\n            loading: true,\n            serverError: undefined,\n            filter: '',\n        };\n\n        this.filterRef = React.createRef();\n    }\n\n    componentDidMount(): void {\n        trackEvent('plugins', 'ui_marketplace_opened');\n\n        this.fetchListing();\n        this.props.actions.getPluginStatuses();\n        if (!this.props.firstAdminVisitMarketplaceStatus) {\n            trackEvent('plugins', 'ui_first_admin_visit_marketplace_status');\n\n            this.props.actions.setFirstAdminVisitMarketplaceStatus();\n        }\n\n        this.filterRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: MarketplaceModalProps): void {\n        // Automatically refresh the component when a plugin is installed or uninstalled.\n        if (this.props.pluginStatuses !== prevProps.pluginStatuses) {\n            this.fetchListing();\n        }\n    }\n\n    fetchListing = async (): Promise<void> => {\n        const {error} = await this.props.actions.fetchListing();\n        this.setState({loading: false, serverError: error});\n    }\n\n    close = (): void => {\n        trackEvent('plugins', 'ui_marketplace_closed');\n        this.props.actions.closeModal();\n    }\n\n    changeTab: SelectCallback = (tabKey: any): void => {\n        this.setState({tabKey});\n    }\n\n    onInput = (): void => {\n        if (this.filterRef.current) {\n            this.setState({filter: this.filterRef.current.value});\n\n            this.debouncedSearch();\n        }\n    }\n\n    handleClearSearch = (): void => {\n        if (this.filterRef.current) {\n            this.filterRef.current.value = '';\n            this.setState({filter: this.filterRef.current.value}, this.doSearch);\n        }\n    }\n\n    doSearch = async (): Promise<void> => {\n        trackEvent('plugins', 'ui_marketplace_search', {filter: this.state.filter});\n\n        const {error} = await this.props.actions.filterListing(this.state.filter);\n\n        this.setState({serverError: error});\n    }\n\n    debouncedSearch = debounce(this.doSearch, SEARCH_TIMEOUT_MILLISECONDS);\n\n    render(): JSX.Element {\n        const input = (\n            <div className='filter-row filter-row--full'>\n                <div className='col-sm-12'>\n                    <QuickInput\n                        id='searchMarketplaceTextbox'\n                        ref={this.filterRef}\n                        className='form-control filter-textbox search_input'\n                        placeholder={{id: t('marketplace_modal.search'), defaultMessage: 'Search Marketplace'}}\n                        inputComponent={LocalizedInput}\n                        onInput={this.onInput}\n                        value={this.state.filter}\n                        clearable={true}\n                        onClear={this.handleClearSearch}\n                    />\n                </div>\n            </div>\n        );\n\n        let errorBanner = null;\n        if (this.state.serverError) {\n            errorBanner = (\n                <div\n                    className='error-bar'\n                    id='error_bar'\n                >\n                    <div className='error-bar__content'>\n                        <FormattedMarkdownMessage\n                            id='app.plugin.marketplace_plugins.app_error'\n                            defaultMessage='Error connecting to the marketplace server. Please check your settings in the [System Console]({siteURL}/admin_console/plugins/plugin_management).'\n                            values={{siteURL: this.props.siteURL}}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <RootPortal>\n                <FullScreenModal\n                    show={this.props.show}\n                    onClose={this.close}\n                    ariaLabel={localizeMessage('marketplace_modal.title', 'Marketplace')}\n                >\n                    {errorBanner}\n                    <div\n                        className='modal-marketplace'\n                        id='modal_marketplace'\n                    >\n                        <h1>\n                            <strong>\n                                <FormattedMessage\n                                    id='marketplace_modal.title'\n                                    defaultMessage='Marketplace'\n                                />\n                            </strong>\n                        </h1>\n                        {input}\n                        <Tabs\n                            id='marketplaceTabs'\n                            className='tabs'\n                            defaultActiveKey={MarketplaceTabs.ALL_LISTING}\n                            activeKey={this.state.tabKey}\n                            onSelect={this.changeTab}\n                            unmountOnExit={true}\n                        >\n                            <Tab\n                                eventKey={MarketplaceTabs.ALL_LISTING}\n                                title={localizeMessage('marketplace_modal.tabs.all_listing', 'All')}\n                            >\n                                {this.state.loading ? <LoadingScreen/> : <AllListing listing={this.props.listing}/>}\n                            </Tab>\n                            <Tab\n                                eventKey={MarketplaceTabs.INSTALLED_LISTING}\n                                title={localizeMessage('marketplace_modal.tabs.installed_listing', 'Installed') + ` (${this.props.installedListing.length})`}\n                            >\n                                <InstalledListing\n                                    installedItems={this.props.installedListing}\n                                    changeTab={this.changeTab}\n                                />\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </FullScreenModal>\n            </RootPortal>\n        );\n    }\n}\n"],"names":["Label","name","description","url","tag","text","uppercase","size","label","delayShow","Constants","placement","overlay","id","toLowerCase","className","target","rel","href","MarketplaceItem","React","render","labels","this","props","icon","iconSource","src","labelComponents","map","key","pluginDetailsInner","versionLabel","classNames","error_text","error","pluginDetails","homepageUrl","item_error","updateDetails","button","string","UpdateVersion","version","releaseNotesUrl","UpdateDetails","installedVersion","isInstalling","onUpdate","isUpdate","semver","e","FormattedMessage","defaultMessage","onClick","bool","UpdateConfirmationModal","show","onCancel","messages","values","push","sameMajorVersion","title","message","confirmButtonText","onConfirm","MarketplaceItemPlugin","constructor","super","eventName","allowDetail","isDefaultMarketplace","trackEvent","plugin_id","installed_version","setState","showUpdateConfirmationModal","actions","installPlugin","closeMarketplaceModal","hideUpdateConfirmationModal","state","getItemButton","installing","Link","to","onConfigure","actionButton","onInstall","disabled","loading","localizeMessage","iconData","pluginStatus","connect","getInstalling","getError","getConfig","IsDefaultMarketplace","getPluginStatus","dispatch","bindActionCreators","closeModal","ModalIdentifiers","MarketplaceItemApp","app_id","installApp","then","res","installed","iconURL","NavigationButton","event","preventDefault","messageId","NavigationRow","page","maximumPerPage","total","Math","trunc","startCount","endCount","min","style","getStyle","theme","onPreviousPageButtonClick","count","renderCount","canShowNextButton","onNextPageButtonClick","number","makeStyleFromTheme","color","changeOpacity","centerChannelColor","getTheme","MarketplaceList","static","listing","length","pageStart","pageEnd","sort","a","b","getName","localeCompare","itemsToDisplay","slice","i","isPlugin","manifest","homepage_url","release_notes_url","icon_data","display_name","icon_url","nextPage","previousPage","MarketplaceTabs","AllListing","InstalledListing","installedItems","changeTab","MarketplaceModal","async","fetchListing","serverError","tabKey","filterRef","current","filter","value","debouncedSearch","doSearch","filterListing","debounce","undefined","componentDidMount","getPluginStatuses","firstAdminVisitMarketplaceStatus","setFirstAdminVisitMarketplaceStatus","focus","componentDidUpdate","prevProps","pluginStatuses","input","ref","placeholder","t","inputComponent","LocalizedInput","onInput","clearable","onClear","handleClearSearch","errorBanner","siteURL","onClose","close","ariaLabel","Tabs","defaultActiveKey","activeKey","onSelect","unmountOnExit","Tab","eventKey","installedListing"],"sourceRoot":""}