{"version":3,"file":"6626.ece4423ee462e3d9fca8.js","mappings":"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","sources":["webpack://mattermost-webapp/./components/terms_of_service/terms_of_service.tsx","webpack://mattermost-webapp/./components/terms_of_service/index.ts","webpack://mattermost-webapp/./components/widgets/icons/fa_logout_icon.tsx","webpack://mattermost-webapp/./components/widgets/icons/fa_warning_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Button, ButtonGroup} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\nimport {TermsOfService as ReduxTermsOfService} from '@mattermost/types/terms_of_service';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport AnnouncementBar from 'components/announcement_bar';\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport {getHistory} from 'utils/browser_history';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport {formatText} from 'utils/text_formatting';\nimport {Constants} from 'utils/constants';\nimport EmojiMap from 'utils/emoji_map';\n\nexport interface UpdateMyTermsOfServiceStatusResponse {\n    terms_of_service_create_at: number;\n    terms_of_service_id: string;\n    user_id: number;\n}\n\nexport interface TermsOfServiceProps {\n    location: {search: string};\n    termsEnabled: boolean;\n    actions: {\n        getTermsOfService: () => Promise<{ data: ReduxTermsOfService }>;\n        updateMyTermsOfServiceStatus: (\n            termsOfServiceId: string,\n            accepted: boolean\n        ) => {data: UpdateMyTermsOfServiceStatusResponse};\n    };\n    emojiMap: EmojiMap;\n    useCaseOnboarding: boolean;\n}\n\ninterface TermsOfServiceState {\n    customTermsOfServiceId: string;\n    customTermsOfServiceText: string;\n    loading: boolean;\n    loadingAgree: boolean;\n    loadingDisagree: boolean;\n    serverError: React.ReactNode;\n}\n\nexport default class TermsOfService extends React.PureComponent<TermsOfServiceProps, TermsOfServiceState> {\n    formattedText: (text: string) => string;\n\n    constructor(props: TermsOfServiceProps) {\n        super(props);\n\n        this.state = {\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n            loadingAgree: false,\n            loadingDisagree: false,\n            serverError: null,\n        };\n\n        this.formattedText = memoizeResult((text: string) => formatText(text, {}, props.emojiMap));\n    }\n\n    componentDidMount(): void {\n        if (this.props.termsEnabled) {\n            this.getTermsOfService();\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    getTermsOfService = async (): Promise<void> => {\n        this.setState({\n            customTermsOfServiceId: '',\n            customTermsOfServiceText: '',\n            loading: true,\n        });\n        const {data} = await this.props.actions.getTermsOfService();\n        if (data) {\n            this.setState({\n                customTermsOfServiceId: data.id,\n                customTermsOfServiceText: data.text,\n                loading: false,\n            });\n        } else {\n            GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.GET_TERMS_ERROR}`);\n        }\n    };\n\n    handleLogoutClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>): void => {\n        e.preventDefault();\n        GlobalActions.emitUserLoggedOutEvent('/login');\n    };\n\n    handleAcceptTerms = (): void => {\n        this.setState({\n            loadingAgree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            true,\n            () => {\n                const query = new URLSearchParams(this.props.location.search);\n                const redirectTo = query.get('redirect_to');\n                if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n                    getHistory().push(redirectTo);\n                } else if (this.props.useCaseOnboarding) {\n                    // need info about whether admin or not,\n                    // and whether admin has already completed\n                    // first time onboarding. Instead of fetching and orchestrating that here,\n                    // let the default root component handle it.\n                    getHistory().push('/');\n                } else {\n                    GlobalActions.redirectUserToDefaultTeam();\n                }\n            },\n        );\n    };\n\n    handleRejectTerms = (): void => {\n        this.setState({\n            loadingDisagree: true,\n            serverError: null,\n        });\n        this.registerUserAction(\n            false,\n            () => {\n                GlobalActions.emitUserLoggedOutEvent(`/login?extra=${Constants.TERMS_REJECTED}`);\n            },\n        );\n    };\n\n    registerUserAction = async (accepted: boolean, success: (data: UpdateMyTermsOfServiceStatusResponse) => void): Promise<void> => {\n        const {data} = await this.props.actions.updateMyTermsOfServiceStatus(this.state.customTermsOfServiceId, accepted);\n        if (data) {\n            success(data);\n        } else {\n            this.setState({\n                loadingAgree: false,\n                loadingDisagree: false,\n                serverError: (\n                    <FormattedMessage\n                        id='terms_of_service.api_error'\n                        defaultMessage='Unable to complete the request. If this issue persists, contact your System Administrator.'\n                    />\n                ),\n            });\n        }\n    };\n\n    render(): JSX.Element {\n        if (this.state.loading) {\n            return <LoadingScreen/>;\n        }\n\n        let termsMarkdownClasses = 'terms-of-service__markdown';\n        if (this.state.serverError) {\n            termsMarkdownClasses += ' terms-of-service-error__height--fill';\n        } else {\n            termsMarkdownClasses += ' terms-of-service__height--fill';\n        }\n        return (\n            <div>\n                <AnnouncementBar/>\n                <div className='signup-header'>\n                    <a\n                        href='#'\n                        onClick={this.handleLogoutClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </a>\n                </div>\n                <div>\n                    <div className='signup-team__container terms-of-service__container'>\n                        <div className={termsMarkdownClasses}>\n                            <div\n                                className='medium-center'\n                                data-testid='termsOfService'\n                            >\n                                {messageHtmlToComponent(this.formattedText(this.state.customTermsOfServiceText), false, {mentions: false})}\n                            </div>\n                        </div>\n                        <div className='terms-of-service__footer medium-center'>\n                            <ButtonGroup className='terms-of-service__button-group'>\n                                <Button\n                                    bsStyle={'primary'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='acceptTerms'\n                                    onClick={this.handleAcceptTerms}\n                                    type='submit'\n                                >\n                                    {this.state.loadingAgree && <LoadingSpinner/>}\n                                    <FormattedMessage\n                                        id='terms_of_service.agreeButton'\n                                        defaultMessage={'I Agree'}\n                                    />\n                                </Button>\n                                <Button\n                                    bsStyle={'link'}\n                                    disabled={this.state.loadingAgree || this.state.loadingDisagree}\n                                    id='rejectTerms'\n                                    onClick={this.handleRejectTerms}\n                                    type='reset'\n                                >\n                                    {this.state.loadingDisagree && <LoadingSpinner/>}\n                                    <FormattedMessage\n                                        id='terms_of_service.disagreeButton'\n                                        defaultMessage={'I Disagree'}\n                                    />\n                                </Button>\n                            </ButtonGroup>\n                            {Boolean(this.state.serverError) && (\n                                <div className='terms-of-service__server-error alert alert-warning'>\n                                    <WarningIcon/>\n                                    {' '}\n                                    {this.state.serverError}\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getTermsOfService, updateMyTermsOfServiceStatus} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getUseCaseOnboarding} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {GlobalState} from '@mattermost/types/store';\nimport {ActionFunc, GenericAction} from 'mattermost-redux/types/actions';\nimport {TermsOfService as ReduxTermsOfService} from '@mattermost/types/terms_of_service';\n\nimport {getEmojiMap} from 'selectors/emojis';\n\nimport TermsOfService, {UpdateMyTermsOfServiceStatusResponse} from './terms_of_service';\n\ntype Actions = {\n    getTermsOfService: () => Promise<{data: ReduxTermsOfService}>;\n    updateMyTermsOfServiceStatus: (\n        termsOfServiceId: string,\n        accepted: boolean\n    ) => {data: UpdateMyTermsOfServiceStatusResponse};\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const useCaseOnboarding = getUseCaseOnboarding(state);\n    return {\n        useCaseOnboarding,\n        termsEnabled: config.EnableCustomTermsOfService === 'true',\n        emojiMap: getEmojiMap(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getTermsOfService,\n            updateMyTermsOfServiceStatus,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TermsOfService);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LogoutIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-1x fa-angle-left'\n            title={formatMessage({id: 'generic_icons.logout', defaultMessage: 'Logout Icon'})}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n"],"names":["TermsOfService","React","constructor","props","super","async","this","setState","customTermsOfServiceId","customTermsOfServiceText","loading","data","actions","getTermsOfService","id","text","GlobalActions","Constants","e","preventDefault","loadingAgree","serverError","registerUserAction","redirectTo","URLSearchParams","location","search","get","match","getHistory","push","useCaseOnboarding","loadingDisagree","accepted","success","updateMyTermsOfServiceStatus","state","FormattedMessage","defaultMessage","formattedText","memoizeResult","formatText","emojiMap","componentDidMount","termsEnabled","render","termsMarkdownClasses","className","href","onClick","handleLogoutClick","messageHtmlToComponent","mentions","ButtonGroup","Button","bsStyle","disabled","handleAcceptTerms","type","handleRejectTerms","Boolean","string","bool","connect","config","getConfig","getUseCaseOnboarding","EnableCustomTermsOfService","getEmojiMap","dispatch","bindActionCreators","LogoutIcon","formatMessage","useIntl","title","WarningIcon","additionalClassName","t"],"sourceRoot":""}