{"version":3,"file":"1507.d070c7cac6ea16a2c2f1.js","mappings":"gwBAoCe,MAAMA,UAAkBC,IAAAA,cAC5BC,YAAYC,GACfC,MAAMD,GAAO,sBAwBI,KACjB,MAAME,EAAe,IAAIC,gBAAgBC,KAAKJ,MAAMK,SAASC,QACvDC,EAAS,CACXC,aAAcN,EAAaO,IAAI,iBAC/BC,SAAUR,EAAaO,IAAI,aAC3BE,YAAaT,EAAaO,IAAI,gBAC9BG,MAAOV,EAAaO,IAAI,SACxBI,MAAOX,EAAaO,IAAI,UAG5BL,KAAKJ,MAAMc,QAAQC,YAAYR,GAAQS,MACnC,IAAmB,IAAlB,KAACC,EAAI,MAAEC,GAAM,EACND,GAAQA,EAAKE,SACbC,OAAOf,SAASgB,KAAOJ,EAAKE,SACrBD,GACPd,KAAKkB,SAAS,CAACJ,MAAOA,EAAMK,SAChC,GAEP,IACJ,qBAEmB,KAChB,MAAMZ,EAAe,IAAIR,gBAAgBC,KAAKJ,MAAMK,SAASC,QAASG,IAAI,gBACtEE,IAAgBA,EAAYa,WAAW,aAAeb,EAAYa,WAAW,YAC7EJ,OAAOf,SAASgB,KAAOV,EAAc,wBAIzCc,EAAAA,EAAAA,KAAaC,QAAQ,SAAS,IAlD9BtB,KAAKQ,MAAQ,CAAC,CAClB,CAEOe,oBAEH,MAAMC,EAAUC,SAASC,eAAe,iBACpCF,GAAWA,EAAQG,YACnBH,EAAQG,WAAWC,YAAYJ,GAEnC,MAAMlB,EAAY,IAAIP,gBAAgBC,KAAKJ,MAAMK,SAASC,QAASG,IAAI,aACnEC,IAAe,cAAeuB,KAAKvB,IAIvCN,KAAKJ,MAAMc,QAAQoB,gBAAgBxB,GAAUM,MACzC,IAAY,IAAX,KAACC,GAAK,EACCA,GACAb,KAAKkB,SAAS,CAACa,IAAKlB,GACxB,GAEZ,CAiCOmB,SACH,MAAMD,EAAM/B,KAAKQ,MAAMuB,IACvB,IAAKA,EACD,OAAO,KAGX,IAAIE,EAOAnB,EASJ,OAdImB,EADAF,EAAIG,SACGH,EAAIG,SAEJC,EAAAA,EAIPnC,KAAKQ,MAAMM,QACXA,EACI,yBAAKsB,UAAU,4BACX,kBAAC,IAAS,CAACtB,MAAOd,KAAKQ,MAAMM,UAMrC,yBAAKsB,UAAU,mBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,oBACX,yBACIC,IAAK,cACLC,IAAKL,EACLM,MAAM,KACNC,OAAO,QAGf,yBAAKJ,UAAU,QACX,kBAAC,IAAwB,CACrBK,GAAG,kBACHC,eAAe,yEACfC,OAAQ,CACJC,QAASb,EAAIc,UAK7B,2BACI,kBAAC,IAAwB,CACrBJ,GAAG,gBACHC,eAAe,4FACfC,OAAQ,CACJC,QAASb,EAAIc,SAIzB,wBAAIT,UAAU,iBACV,kBAAC,IAAwB,CACrBK,GAAG,mBACHC,eAAe,8BACfC,OAAQ,CACJC,QAASb,EAAIc,SAIzB,yBAAKT,UAAU,mBACX,4BACIU,KAAK,SACLV,UAAU,6BACVW,QAAS/C,KAAKgD,YAEd,kBAAC,EAAAC,iBAAgB,CACbR,GAAG,iBACHC,eAAe,UAGvB,4BACII,KAAK,SACLV,UAAU,gCACVW,QAAS/C,KAAKkD,aAEd,kBAAC,EAAAD,iBAAgB,CACbR,GAAG,kBACHC,eAAe,YAI1B5B,GAIjB,EACH,EAlJoBrB,EAAS,aAd1BQ,SAAU,WACNC,OAAQ,IAAAiD,OAAA,aAAF,WAEVzC,QAAS,WACLoB,gBAAkB,IAAD,gBACjBnB,YAAc,IAAD,kBAAF,aCAnB,SAAeyC,EAAAA,EAAAA,SAAQ,MATvB,SAA4BC,GACxB,MAAO,CACH3C,SAAS4C,EAAAA,EAAAA,oBAAiE,CACtExB,gBAAe,KACfnB,YAAWA,EAAAA,IACZ0C,GAEX,GAEA,CAAiD5D,E","sources":["webpack://mattermost-webapp/./components/authorize/authorize.tsx","webpack://mattermost-webapp/./components/authorize/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {OAuthApp} from '@mattermost/types/integrations';\n\nimport icon50 from 'images/icon50x50.png';\nimport FormError from 'components/form_error';\nimport {getHistory} from 'utils/browser_history';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nexport type Params = {\n    responseType: string | null;\n    clientId: string | null;\n    redirectUri: string | null;\n    state: string | null;\n    scope: string | null;\n}\n\ntype Props = {\n    location: {\n        search: string;\n    };\n    actions: {\n        getOAuthAppInfo: (clientId: string | null) => Promise<{data: OAuthApp; error?: Error}>;\n        allowOAuth2: (params: Params) => Promise<{data?: any; error?: Error}>;\n    };\n}\n\ntype State = {\n    app?: OAuthApp;\n    error?: string;\n}\n\nexport default class Authorize extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount(): void {\n        // if we get to this point remove the antiClickjack blocker\n        const blocker = document.getElementById('antiClickjack');\n        if (blocker && blocker.parentNode) {\n            blocker.parentNode.removeChild(blocker);\n        }\n        const clientId = (new URLSearchParams(this.props.location.search)).get('client_id');\n        if (clientId && !((/^[a-z0-9]+$/).test(clientId))) {\n            return;\n        }\n\n        this.props.actions.getOAuthAppInfo(clientId).then(\n            ({data}) => {\n                if (data) {\n                    this.setState({app: data});\n                }\n            });\n    }\n\n    public handleAllow = (): void => {\n        const searchParams = new URLSearchParams(this.props.location.search);\n        const params = {\n            responseType: searchParams.get('response_type'),\n            clientId: searchParams.get('client_id'),\n            redirectUri: searchParams.get('redirect_uri'),\n            state: searchParams.get('state'),\n            scope: searchParams.get('store'),\n        };\n\n        this.props.actions.allowOAuth2(params).then(\n            ({data, error}) => {\n                if (data && data.redirect) {\n                    window.location.href = data.redirect;\n                } else if (error) {\n                    this.setState({error: error.message});\n                }\n            },\n        );\n    }\n\n    public handleDeny = (): void => {\n        const redirectUri = (new URLSearchParams(this.props.location.search)).get('redirect_uri');\n        if (redirectUri && (redirectUri.startsWith('https://') || redirectUri.startsWith('http://'))) {\n            window.location.href = redirectUri + '?error=access_denied';\n            return;\n        }\n\n        getHistory().replace('/error');\n    }\n\n    public render(): ReactNode {\n        const app = this.state.app;\n        if (!app) {\n            return null;\n        }\n\n        let icon;\n        if (app.icon_url) {\n            icon = app.icon_url;\n        } else {\n            icon = icon50;\n        }\n\n        let error;\n        if (this.state.error) {\n            error = (\n                <div className='prompt__error form-group'>\n                    <FormError error={this.state.error}/>\n                </div>\n            );\n        }\n\n        return (\n            <div className='container-fluid'>\n                <div className='prompt'>\n                    <div className='prompt__heading'>\n                        <div className='prompt__app-icon'>\n                            <img\n                                alt={'prompt icon'}\n                                src={icon}\n                                width='50'\n                                height='50'\n                            />\n                        </div>\n                        <div className='text'>\n                            <FormattedMarkdownMessage\n                                id='authorize.title'\n                                defaultMessage='Authorize **{appName}** to Connect to Your **Mattermost** User Account'\n                                values={{\n                                    appName: app.name,\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='authorize.app'\n                            defaultMessage='The app **{appName}** would like the ability to access and modify your basic information.'\n                            values={{\n                                appName: app.name,\n                            }}\n                        />\n                    </p>\n                    <h2 className='prompt__allow'>\n                        <FormattedMarkdownMessage\n                            id='authorize.access'\n                            defaultMessage='Allow **{appName}** access?'\n                            values={{\n                                appName: app.name,\n                            }}\n                        />\n                    </h2>\n                    <div className='prompt__buttons'>\n                        <button\n                            type='submit'\n                            className='btn btn-link authorize-btn'\n                            onClick={this.handleDeny}\n                        >\n                            <FormattedMessage\n                                id='authorize.deny'\n                                defaultMessage='Deny'\n                            />\n                        </button>\n                        <button\n                            type='submit'\n                            className='btn btn-primary authorize-btn'\n                            onClick={this.handleAllow}\n                        >\n                            <FormattedMessage\n                                id='authorize.allow'\n                                defaultMessage='Allow'\n                            />\n                        </button>\n                    </div>\n                    {error}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {GenericAction, ActionFunc} from 'mattermost-redux/types/actions';\nimport {OAuthApp} from '@mattermost/types/integrations';\n\nimport {allowOAuth2, getOAuthAppInfo} from 'actions/admin_actions.jsx';\n\nimport Authorize, {Params} from './authorize';\n\ntype Actions = {\n    getOAuthAppInfo: (clientId: string | null) => Promise<{data: OAuthApp; error?: Error}>;\n    allowOAuth2: (params: Params) => Promise<{data?: any; error?: Error}>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getOAuthAppInfo,\n            allowOAuth2,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(Authorize);\n"],"names":["Authorize","React","constructor","props","super","searchParams","URLSearchParams","this","location","search","params","responseType","get","clientId","redirectUri","state","scope","actions","allowOAuth2","then","data","error","redirect","window","href","setState","message","startsWith","getHistory","replace","componentDidMount","blocker","document","getElementById","parentNode","removeChild","test","getOAuthAppInfo","app","render","icon","icon_url","icon50","className","alt","src","width","height","id","defaultMessage","values","appName","name","type","onClick","handleDeny","FormattedMessage","handleAllow","string","connect","dispatch","bindActionCreators"],"sourceRoot":""}